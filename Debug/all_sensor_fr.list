
all_sensor_fr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fe4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  08009178  08009178  0000a178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009680  08009680  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009680  08009680  0000a680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009688  08009688  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009688  08009688  0000a688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800968c  0800968c  0000a68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009690  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d4  2**0
                  CONTENTS
 10 .bss          00000288  200001d4  200001d4  0000b1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000045c  2000045c  0000b1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a5a6  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c0a  00000000  00000000  000157aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  000173b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007e0  00000000  00000000  00017c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ac7  00000000  00000000  00018440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b424  00000000  00000000  0003af07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1c32  00000000  00000000  0004632b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00117f5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a20  00000000  00000000  00117fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800915c 	.word	0x0800915c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800915c 	.word	0x0800915c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <mPrint>:
#include "Print_log.h"

char buff1 [40];

void mPrint(const char* format ,...)
{
 8001020:	b40f      	push	{r0, r1, r2, r3}
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 40; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	e006      	b.n	800103c <mPrint+0x1c>
	{
		buff1[i] = 0;
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	4a11      	ldr	r2, [pc, #68]	@ (8001078 <mPrint+0x58>)
 8001032:	2100      	movs	r1, #0
 8001034:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 40; i++)
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	3301      	adds	r3, #1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b27      	cmp	r3, #39	@ 0x27
 8001040:	d9f5      	bls.n	800102e <mPrint+0xe>
	}

	va_list args;
	va_start(args, format);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	603b      	str	r3, [r7, #0]
	vsnprintf(buff1,sizeof(buff1),format,args);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	2128      	movs	r1, #40	@ 0x28
 800104e:	480a      	ldr	r0, [pc, #40]	@ (8001078 <mPrint+0x58>)
 8001050:	f003 fd3e 	bl	8004ad0 <vsniprintf>
	va_end(args);
	HAL_UART_Transmit(&huart1, (uint8_t*)buff1, strlen(buff1), 1000);
 8001054:	4808      	ldr	r0, [pc, #32]	@ (8001078 <mPrint+0x58>)
 8001056:	f7ff f90b 	bl	8000270 <strlen>
 800105a:	4603      	mov	r3, r0
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001062:	4905      	ldr	r1, [pc, #20]	@ (8001078 <mPrint+0x58>)
 8001064:	4805      	ldr	r0, [pc, #20]	@ (800107c <mPrint+0x5c>)
 8001066:	f002 f9bd 	bl	80033e4 <HAL_UART_Transmit>

}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001074:	b004      	add	sp, #16
 8001076:	4770      	bx	lr
 8001078:	200001f0 	.word	0x200001f0
 800107c:	20000280 	.word	0x20000280

08001080 <MQ135_Init>:
float ppm_smoke;
float ppm_nox;
float ppm_o3;
ADC_HandleTypeDef* hadc_global;

void MQ135_Init(ADC_HandleTypeDef* hadc) {
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    hadc_global = hadc;
 8001088:	4a04      	ldr	r2, [pc, #16]	@ (800109c <MQ135_Init+0x1c>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6013      	str	r3, [r2, #0]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000234 	.word	0x20000234

080010a0 <calculateResistance>:

float calculateResistance(float adc_value) {
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	ed87 0a01 	vstr	s0, [r7, #4]
    float voltage = (adc_value / 4095.0) * 3.3;
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fa4c 	bl	8000548 <__aeabi_f2d>
 80010b0:	a322      	add	r3, pc, #136	@ (adr r3, 800113c <calculateResistance+0x9c>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fbc9 	bl	800084c <__aeabi_ddiv>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	a320      	add	r3, pc, #128	@ (adr r3, 8001144 <calculateResistance+0xa4>)
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	f7ff fa96 	bl	80005f8 <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fd88 	bl	8000be8 <__aeabi_d2f>
 80010d8:	4603      	mov	r3, r0
 80010da:	60fb      	str	r3, [r7, #12]
    return ((3.3 - voltage) / voltage) * RL_VALUE;
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	a117      	add	r1, pc, #92	@ (adr r1, 8001144 <calculateResistance+0xa4>)
 80010e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010ec:	f7ff f8cc 	bl	8000288 <__aeabi_dsub>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4614      	mov	r4, r2
 80010f6:	461d      	mov	r5, r3
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f7ff fa25 	bl	8000548 <__aeabi_f2d>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4620      	mov	r0, r4
 8001104:	4629      	mov	r1, r5
 8001106:	f7ff fba1 	bl	800084c <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <calculateResistance+0x98>)
 8001118:	f7ff fa6e 	bl	80005f8 <__aeabi_dmul>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fd60 	bl	8000be8 <__aeabi_d2f>
 8001128:	4603      	mov	r3, r0
 800112a:	ee07 3a90 	vmov	s15, r3
}
 800112e:	eeb0 0a67 	vmov.f32	s0, s15
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bdb0      	pop	{r4, r5, r7, pc}
 8001138:	40240000 	.word	0x40240000
 800113c:	00000000 	.word	0x00000000
 8001140:	40affe00 	.word	0x40affe00
 8001144:	66666666 	.word	0x66666666
 8001148:	400a6666 	.word	0x400a6666
 800114c:	00000000 	.word	0x00000000

08001150 <MQ135_CalculateR0>:
// call MQ135_CalculateR0 in main function
float MQ135_CalculateR0(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
    HAL_ADC_Start(hadc_global);
 8001154:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <MQ135_CalculateR0+0x88>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fe77 	bl	8001e4c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc_global, HAL_MAX_DELAY);
 800115e:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <MQ135_CalculateR0+0x88>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f04f 31ff 	mov.w	r1, #4294967295
 8001166:	4618      	mov	r0, r3
 8001168:	f000 ff42 	bl	8001ff0 <HAL_ADC_PollForConversion>
    adc_value = HAL_ADC_GetValue(hadc_global);
 800116c:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <MQ135_CalculateR0+0x88>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 ffc8 	bl	8002106 <HAL_ADC_GetValue>
 8001176:	4603      	mov	r3, r0
 8001178:	4a18      	ldr	r2, [pc, #96]	@ (80011dc <MQ135_CalculateR0+0x8c>)
 800117a:	6013      	str	r3, [r2, #0]
    resistance = calculateResistance(adc_value);
 800117c:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <MQ135_CalculateR0+0x8c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001188:	eeb0 0a67 	vmov.f32	s0, s15
 800118c:	f7ff ff88 	bl	80010a0 <calculateResistance>
 8001190:	eef0 7a40 	vmov.f32	s15, s0
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <MQ135_CalculateR0+0x90>)
 8001196:	edc3 7a00 	vstr	s15, [r3]
    R0 = resistance / pow(PPM_CO2_CONST / 400.0, 1.0 / CO2_EXPONENT);
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MQ135_CalculateR0+0x90>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9d2 	bl	8000548 <__aeabi_f2d>
 80011a4:	a30a      	add	r3, pc, #40	@ (adr r3, 80011d0 <MQ135_CalculateR0+0x80>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	f7ff fb4f 	bl	800084c <__aeabi_ddiv>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fd17 	bl	8000be8 <__aeabi_d2f>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a09      	ldr	r2, [pc, #36]	@ (80011e4 <MQ135_CalculateR0+0x94>)
 80011be:	6013      	str	r3, [r2, #0]
    return R0;
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <MQ135_CalculateR0+0x94>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	ee07 3a90 	vmov	s15, r3
}
 80011c8:	eeb0 0a67 	vmov.f32	s0, s15
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	7a462ecb 	.word	0x7a462ecb
 80011d4:	3ff8f8de 	.word	0x3ff8f8de
 80011d8:	20000234 	.word	0x20000234
 80011dc:	20000218 	.word	0x20000218
 80011e0:	2000021c 	.word	0x2000021c
 80011e4:	20000220 	.word	0x20000220

080011e8 <calculatePPM>:

float calculatePPM(float resistance, float ppm_const, float exponent) {
 80011e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	ed87 0a03 	vstr	s0, [r7, #12]
 80011f4:	edc7 0a02 	vstr	s1, [r7, #8]
 80011f8:	ed87 1a01 	vstr	s2, [r7, #4]
    return ppm_const * pow((resistance / R0), exponent);
 80011fc:	68b8      	ldr	r0, [r7, #8]
 80011fe:	f7ff f9a3 	bl	8000548 <__aeabi_f2d>
 8001202:	4604      	mov	r4, r0
 8001204:	460d      	mov	r5, r1
 8001206:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <calculatePPM+0x78>)
 8001208:	edd3 7a00 	vldr	s15, [r3]
 800120c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001210:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001214:	ee16 0a90 	vmov	r0, s13
 8001218:	f7ff f996 	bl	8000548 <__aeabi_f2d>
 800121c:	4680      	mov	r8, r0
 800121e:	4689      	mov	r9, r1
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff f991 	bl	8000548 <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	ec43 2b11 	vmov	d1, r2, r3
 800122e:	ec49 8b10 	vmov	d0, r8, r9
 8001232:	f007 f833 	bl	800829c <pow>
 8001236:	ec53 2b10 	vmov	r2, r3, d0
 800123a:	4620      	mov	r0, r4
 800123c:	4629      	mov	r1, r5
 800123e:	f7ff f9db 	bl	80005f8 <__aeabi_dmul>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fccd 	bl	8000be8 <__aeabi_d2f>
 800124e:	4603      	mov	r3, r0
 8001250:	ee07 3a90 	vmov	s15, r3
}
 8001254:	eeb0 0a67 	vmov.f32	s0, s15
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001260:	20000220 	.word	0x20000220
 8001264:	00000000 	.word	0x00000000

08001268 <MQ135_ReadPPM>:

float MQ135_ReadPPM(float adc_value) {
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	ed87 0a01 	vstr	s0, [r7, #4]
	// must write 3 below functions in main to get adc_value and filter.
//    HAL_ADC_Start(hadc_global);
//    HAL_ADC_PollForConversion(hadc_global, HAL_MAX_DELAY);
//    adc_value = HAL_ADC_GetValue(hadc_global);
    // Calculate resistance RS
    resistance = calculateResistance(adc_value);
 8001272:	ed97 0a01 	vldr	s0, [r7, #4]
 8001276:	f7ff ff13 	bl	80010a0 <calculateResistance>
 800127a:	eef0 7a40 	vmov.f32	s15, s0
 800127e:	4b54      	ldr	r3, [pc, #336]	@ (80013d0 <MQ135_ReadPPM+0x168>)
 8001280:	edc3 7a00 	vstr	s15, [r3]
    // Calculate individual PPM values for different gases
    ppm_o3 = calculatePPM(resistance, PPM_O3_CONST, O3_EXPONENT);
 8001284:	4b52      	ldr	r3, [pc, #328]	@ (80013d0 <MQ135_ReadPPM+0x168>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 80013d4 <MQ135_ReadPPM+0x16c>
 800128e:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8001292:	eeb0 0a67 	vmov.f32	s0, s15
 8001296:	f7ff ffa7 	bl	80011e8 <calculatePPM>
 800129a:	eef0 7a40 	vmov.f32	s15, s0
 800129e:	4b4e      	ldr	r3, [pc, #312]	@ (80013d8 <MQ135_ReadPPM+0x170>)
 80012a0:	edc3 7a00 	vstr	s15, [r3]
    ppm_co2 = calculatePPM(resistance, PPM_CO2_CONST, CO2_EXPONENT);
 80012a4:	4b4a      	ldr	r3, [pc, #296]	@ (80013d0 <MQ135_ReadPPM+0x168>)
 80012a6:	edd3 7a00 	vldr	s15, [r3]
 80012aa:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 80013dc <MQ135_ReadPPM+0x174>
 80012ae:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 80013e0 <MQ135_ReadPPM+0x178>
 80012b2:	eeb0 0a67 	vmov.f32	s0, s15
 80012b6:	f7ff ff97 	bl	80011e8 <calculatePPM>
 80012ba:	eef0 7a40 	vmov.f32	s15, s0
 80012be:	4b49      	ldr	r3, [pc, #292]	@ (80013e4 <MQ135_ReadPPM+0x17c>)
 80012c0:	edc3 7a00 	vstr	s15, [r3]
    ppm_smoke = calculatePPM(resistance, PPM_SMOKE_CONST, SMOKE_EXPONENT);
 80012c4:	4b42      	ldr	r3, [pc, #264]	@ (80013d0 <MQ135_ReadPPM+0x168>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	ed9f 1a47 	vldr	s2, [pc, #284]	@ 80013e8 <MQ135_ReadPPM+0x180>
 80012ce:	eddf 0a47 	vldr	s1, [pc, #284]	@ 80013ec <MQ135_ReadPPM+0x184>
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	f7ff ff87 	bl	80011e8 <calculatePPM>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	4b44      	ldr	r3, [pc, #272]	@ (80013f0 <MQ135_ReadPPM+0x188>)
 80012e0:	edc3 7a00 	vstr	s15, [r3]
    ppm_nox = calculatePPM(resistance, PPM_NOX_CONST, NOX_EXPONENT);
 80012e4:	4b3a      	ldr	r3, [pc, #232]	@ (80013d0 <MQ135_ReadPPM+0x168>)
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 80013f4 <MQ135_ReadPPM+0x18c>
 80012ee:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 80012f2:	eeb0 0a67 	vmov.f32	s0, s15
 80012f6:	f7ff ff77 	bl	80011e8 <calculatePPM>
 80012fa:	eef0 7a40 	vmov.f32	s15, s0
 80012fe:	4b3e      	ldr	r3, [pc, #248]	@ (80013f8 <MQ135_ReadPPM+0x190>)
 8001300:	edc3 7a00 	vstr	s15, [r3]

    // Weighted average or combined PPM (customize the weights as necessary)
    float combined_ppm = (ppm_co2 * 0.4) + (ppm_smoke * 0.3) + (ppm_nox * 0.2) + (ppm_o3 * 0.1);
 8001304:	4b37      	ldr	r3, [pc, #220]	@ (80013e4 <MQ135_ReadPPM+0x17c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f91d 	bl	8000548 <__aeabi_f2d>
 800130e:	a328      	add	r3, pc, #160	@ (adr r3, 80013b0 <MQ135_ReadPPM+0x148>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	f7ff f970 	bl	80005f8 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4614      	mov	r4, r2
 800131e:	461d      	mov	r5, r3
 8001320:	4b33      	ldr	r3, [pc, #204]	@ (80013f0 <MQ135_ReadPPM+0x188>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f90f 	bl	8000548 <__aeabi_f2d>
 800132a:	a323      	add	r3, pc, #140	@ (adr r3, 80013b8 <MQ135_ReadPPM+0x150>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f962 	bl	80005f8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ffa6 	bl	800028c <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4614      	mov	r4, r2
 8001346:	461d      	mov	r5, r3
 8001348:	4b2b      	ldr	r3, [pc, #172]	@ (80013f8 <MQ135_ReadPPM+0x190>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f8fb 	bl	8000548 <__aeabi_f2d>
 8001352:	a31b      	add	r3, pc, #108	@ (adr r3, 80013c0 <MQ135_ReadPPM+0x158>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f94e 	bl	80005f8 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4620      	mov	r0, r4
 8001362:	4629      	mov	r1, r5
 8001364:	f7fe ff92 	bl	800028c <__adddf3>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4614      	mov	r4, r2
 800136e:	461d      	mov	r5, r3
 8001370:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <MQ135_ReadPPM+0x170>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8e7 	bl	8000548 <__aeabi_f2d>
 800137a:	a313      	add	r3, pc, #76	@ (adr r3, 80013c8 <MQ135_ReadPPM+0x160>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff f93a 	bl	80005f8 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4620      	mov	r0, r4
 800138a:	4629      	mov	r1, r5
 800138c:	f7fe ff7e 	bl	800028c <__adddf3>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fc26 	bl	8000be8 <__aeabi_d2f>
 800139c:	4603      	mov	r3, r0
 800139e:	60fb      	str	r3, [r7, #12]

    return combined_ppm;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	ee07 3a90 	vmov	s15, r3
}
 80013a6:	eeb0 0a67 	vmov.f32	s0, s15
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bdb0      	pop	{r4, r5, r7, pc}
 80013b0:	9999999a 	.word	0x9999999a
 80013b4:	3fd99999 	.word	0x3fd99999
 80013b8:	33333333 	.word	0x33333333
 80013bc:	3fd33333 	.word	0x3fd33333
 80013c0:	9999999a 	.word	0x9999999a
 80013c4:	3fc99999 	.word	0x3fc99999
 80013c8:	9999999a 	.word	0x9999999a
 80013cc:	3fb99999 	.word	0x3fb99999
 80013d0:	2000021c 	.word	0x2000021c
 80013d4:	bf933333 	.word	0xbf933333
 80013d8:	20000230 	.word	0x20000230
 80013dc:	c03137de 	.word	0xc03137de
 80013e0:	42e93442 	.word	0x42e93442
 80013e4:	20000224 	.word	0x20000224
 80013e8:	bfbf9db2 	.word	0xbfbf9db2
 80013ec:	40133333 	.word	0x40133333
 80013f0:	20000228 	.word	0x20000228
 80013f4:	bf4ccccd 	.word	0xbf4ccccd
 80013f8:	2000022c 	.word	0x2000022c

080013fc <KalmanFilter_init>:

#include "kalman_filter.h"
#include <math.h>

void KalmanFilter_init(KalmanFilter_t *filter, float mea_e, float est_e,
		float q) {
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	ed87 0a02 	vstr	s0, [r7, #8]
 8001408:	edc7 0a01 	vstr	s1, [r7, #4]
 800140c:	ed87 1a00 	vstr	s2, [r7]
	filter->_err_measure = mea_e;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	601a      	str	r2, [r3, #0]
	filter->_err_estimate = est_e;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	605a      	str	r2, [r3, #4]
	filter->_q = q;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	609a      	str	r2, [r3, #8]
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <KF_updateEstimate>:
float KF_updateEstimate(KalmanFilter_t *filter, float mea) {
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	ed87 0a00 	vstr	s0, [r7]
	filter->_kalman_gain = filter->_err_estimate
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	edd3 6a01 	vldr	s13, [r3, #4]
			/ (filter->_err_estimate + filter->_err_measure);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	ed93 7a01 	vldr	s14, [r3, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001450:	eec6 7a87 	vdiv.f32	s15, s13, s14
	filter->_kalman_gain = filter->_err_estimate
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	edc3 7a05 	vstr	s15, [r3, #20]
	filter->_current_estimate = filter->_last_estimate
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	ed93 7a04 	vldr	s14, [r3, #16]
			+ filter->_kalman_gain * (mea - filter->_last_estimate);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	edd3 6a05 	vldr	s13, [r3, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	edd3 7a04 	vldr	s15, [r3, #16]
 800146c:	ed97 6a00 	vldr	s12, [r7]
 8001470:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001478:	ee77 7a27 	vadd.f32	s15, s14, s15
	filter->_current_estimate = filter->_last_estimate
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edc3 7a03 	vstr	s15, [r3, #12]
	filter->_err_estimate = (1.0f - filter->_kalman_gain)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	edd3 7a05 	vldr	s15, [r3, #20]
 8001488:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800148c:	ee37 7a67 	vsub.f32	s14, s14, s15
			* filter->_err_estimate
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a01 	vldr	s15, [r3, #4]
 8001496:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ fabsf(filter->_last_estimate - filter->_current_estimate)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	edd3 6a04 	vldr	s13, [r3, #16]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80014a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014aa:	eef0 6ae7 	vabs.f32	s13, s15
					* filter->_q;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80014b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
			+ fabsf(filter->_last_estimate - filter->_current_estimate)
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
	filter->_err_estimate = (1.0f - filter->_kalman_gain)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	edc3 7a01 	vstr	s15, [r3, #4]
	filter->_last_estimate = filter->_current_estimate;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	611a      	str	r2, [r3, #16]

	return filter->_current_estimate;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	ee07 3a90 	vmov	s15, r3
}
 80014d2:	eeb0 0a67 	vmov.f32	s0, s15
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e4:	f000 fbd8 	bl	8001c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e8:	f000 f8de 	bl	80016a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ec:	f000 f9b6 	bl	800185c <MX_GPIO_Init>
  MX_ADC1_Init();
 80014f0:	f000 f938 	bl	8001764 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80014f4:	f000 f988 	bl	8001808 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MQ135_Init(&hadc1);
 80014f8:	4855      	ldr	r0, [pc, #340]	@ (8001650 <main+0x170>)
 80014fa:	f7ff fdc1 	bl	8001080 <MQ135_Init>
  MQ135_CalculateR0();
 80014fe:	f7ff fe27 	bl	8001150 <MQ135_CalculateR0>
  KalmanFilter_init(&adc_filter, 30.0, 30.0, 0.01);
 8001502:	ed9f 1a54 	vldr	s2, [pc, #336]	@ 8001654 <main+0x174>
 8001506:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 800150a:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800150e:	4852      	ldr	r0, [pc, #328]	@ (8001658 <main+0x178>)
 8001510:	f7ff ff74 	bl	80013fc <KalmanFilter_init>
  KalmanFilter_init(&aqi_filter, 30.0, 30.0, 0.01);
 8001514:	ed9f 1a4f 	vldr	s2, [pc, #316]	@ 8001654 <main+0x174>
 8001518:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 800151c:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001520:	484e      	ldr	r0, [pc, #312]	@ (800165c <main+0x17c>)
 8001522:	f7ff ff6b 	bl	80013fc <KalmanFilter_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 8001526:	484a      	ldr	r0, [pc, #296]	@ (8001650 <main+0x170>)
 8001528:	f000 fc90 	bl	8001e4c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	4847      	ldr	r0, [pc, #284]	@ (8001650 <main+0x170>)
 8001532:	f000 fd5d 	bl	8001ff0 <HAL_ADC_PollForConversion>
	  adc_raw = HAL_ADC_GetValue(&hadc1);
 8001536:	4846      	ldr	r0, [pc, #280]	@ (8001650 <main+0x170>)
 8001538:	f000 fde5 	bl	8002106 <HAL_ADC_GetValue>
 800153c:	4603      	mov	r3, r0
 800153e:	4a48      	ldr	r2, [pc, #288]	@ (8001660 <main+0x180>)
 8001540:	6013      	str	r3, [r2, #0]
	  filtered_adc = KF_updateEstimate(&adc_filter, (float) adc_raw);
 8001542:	4b47      	ldr	r3, [pc, #284]	@ (8001660 <main+0x180>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	4841      	ldr	r0, [pc, #260]	@ (8001658 <main+0x178>)
 8001554:	f7ff ff6b 	bl	800142e <KF_updateEstimate>
 8001558:	eef0 7a40 	vmov.f32	s15, s0
 800155c:	4b41      	ldr	r3, [pc, #260]	@ (8001664 <main+0x184>)
 800155e:	edc3 7a00 	vstr	s15, [r3]
	  adc_value = filtered_adc;
 8001562:	4b40      	ldr	r3, [pc, #256]	@ (8001664 <main+0x184>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800156c:	ee17 2a90 	vmov	r2, s15
 8001570:	4b3d      	ldr	r3, [pc, #244]	@ (8001668 <main+0x188>)
 8001572:	601a      	str	r2, [r3, #0]
	  aqi = MQ135_ReadPPM(adc_value);
 8001574:	4b3c      	ldr	r3, [pc, #240]	@ (8001668 <main+0x188>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001580:	eeb0 0a67 	vmov.f32	s0, s15
 8001584:	f7ff fe70 	bl	8001268 <MQ135_ReadPPM>
 8001588:	eef0 7a40 	vmov.f32	s15, s0
 800158c:	4b37      	ldr	r3, [pc, #220]	@ (800166c <main+0x18c>)
 800158e:	edc3 7a00 	vstr	s15, [r3]
	  filtered_aqi = KF_updateEstimate(&aqi_filter, (float) aqi);
 8001592:	4b36      	ldr	r3, [pc, #216]	@ (800166c <main+0x18c>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	eeb0 0a67 	vmov.f32	s0, s15
 800159c:	482f      	ldr	r0, [pc, #188]	@ (800165c <main+0x17c>)
 800159e:	f7ff ff46 	bl	800142e <KF_updateEstimate>
 80015a2:	eef0 7a40 	vmov.f32	s15, s0
 80015a6:	4b32      	ldr	r3, [pc, #200]	@ (8001670 <main+0x190>)
 80015a8:	edc3 7a00 	vstr	s15, [r3]
	  mPrint("adc_value = %d \n" , adc_value );
 80015ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001668 <main+0x188>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	4830      	ldr	r0, [pc, #192]	@ (8001674 <main+0x194>)
 80015b4:	f7ff fd34 	bl	8001020 <mPrint>
	  mPrint("R0 = %f \n" , R0 );
 80015b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <main+0x198>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffc3 	bl	8000548 <__aeabi_f2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	482d      	ldr	r0, [pc, #180]	@ (800167c <main+0x19c>)
 80015c8:	f7ff fd2a 	bl	8001020 <mPrint>
	  mPrint("aqi = %f \n" , aqi);
 80015cc:	4b27      	ldr	r3, [pc, #156]	@ (800166c <main+0x18c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffb9 	bl	8000548 <__aeabi_f2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4829      	ldr	r0, [pc, #164]	@ (8001680 <main+0x1a0>)
 80015dc:	f7ff fd20 	bl	8001020 <mPrint>
	  mPrint("aqi_f = %f \n" , filtered_aqi);
 80015e0:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <main+0x190>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffaf 	bl	8000548 <__aeabi_f2d>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4825      	ldr	r0, [pc, #148]	@ (8001684 <main+0x1a4>)
 80015f0:	f7ff fd16 	bl	8001020 <mPrint>
	  mPrint("ppm_co2 = %f \n" , ppm_co2);
 80015f4:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <main+0x1a8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ffa5 	bl	8000548 <__aeabi_f2d>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4822      	ldr	r0, [pc, #136]	@ (800168c <main+0x1ac>)
 8001604:	f7ff fd0c 	bl	8001020 <mPrint>
	  mPrint("ppm_smoke = %f \n" , ppm_smoke);
 8001608:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <main+0x1b0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff9b 	bl	8000548 <__aeabi_f2d>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	481f      	ldr	r0, [pc, #124]	@ (8001694 <main+0x1b4>)
 8001618:	f7ff fd02 	bl	8001020 <mPrint>
	  mPrint("ppm_nox = %f \n" , ppm_nox);
 800161c:	4b1e      	ldr	r3, [pc, #120]	@ (8001698 <main+0x1b8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff91 	bl	8000548 <__aeabi_f2d>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	481c      	ldr	r0, [pc, #112]	@ (800169c <main+0x1bc>)
 800162c:	f7ff fcf8 	bl	8001020 <mPrint>
	  mPrint("ppm_o3 = %f \n" , ppm_o3);
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <main+0x1c0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff87 	bl	8000548 <__aeabi_f2d>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4819      	ldr	r0, [pc, #100]	@ (80016a4 <main+0x1c4>)
 8001640:	f7ff fcee 	bl	8001020 <mPrint>

	  HAL_Delay(2500);
 8001644:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001648:	f000 fb98 	bl	8001d7c <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800164c:	bf00      	nop
 800164e:	e76a      	b.n	8001526 <main+0x46>
 8001650:	20000238 	.word	0x20000238
 8001654:	3c23d70a 	.word	0x3c23d70a
 8001658:	200002c8 	.word	0x200002c8
 800165c:	200002e0 	.word	0x200002e0
 8001660:	20000304 	.word	0x20000304
 8001664:	200002f8 	.word	0x200002f8
 8001668:	20000218 	.word	0x20000218
 800166c:	20000300 	.word	0x20000300
 8001670:	200002fc 	.word	0x200002fc
 8001674:	08009178 	.word	0x08009178
 8001678:	20000220 	.word	0x20000220
 800167c:	0800918c 	.word	0x0800918c
 8001680:	08009198 	.word	0x08009198
 8001684:	080091a4 	.word	0x080091a4
 8001688:	20000224 	.word	0x20000224
 800168c:	080091b4 	.word	0x080091b4
 8001690:	20000228 	.word	0x20000228
 8001694:	080091c4 	.word	0x080091c4
 8001698:	2000022c 	.word	0x2000022c
 800169c:	080091d8 	.word	0x080091d8
 80016a0:	20000230 	.word	0x20000230
 80016a4:	080091e8 	.word	0x080091e8

080016a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b094      	sub	sp, #80	@ 0x50
 80016ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ae:	f107 0320 	add.w	r3, r7, #32
 80016b2:	2230      	movs	r2, #48	@ 0x30
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 fa18 	bl	8004aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	4b22      	ldr	r3, [pc, #136]	@ (800175c <SystemClock_Config+0xb4>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	4a21      	ldr	r2, [pc, #132]	@ (800175c <SystemClock_Config+0xb4>)
 80016d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016da:	6413      	str	r3, [r2, #64]	@ 0x40
 80016dc:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <SystemClock_Config+0xb4>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <SystemClock_Config+0xb8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001760 <SystemClock_Config+0xb8>)
 80016f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <SystemClock_Config+0xb8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001704:	2302      	movs	r3, #2
 8001706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001708:	2301      	movs	r3, #1
 800170a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800170c:	2310      	movs	r3, #16
 800170e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001710:	2300      	movs	r3, #0
 8001712:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001714:	f107 0320 	add.w	r3, r7, #32
 8001718:	4618      	mov	r0, r3
 800171a:	f001 f9bb 	bl	8002a94 <HAL_RCC_OscConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001724:	f000 f8cc 	bl	80018c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001728:	230f      	movs	r3, #15
 800172a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f001 fc1e 	bl	8002f84 <HAL_RCC_ClockConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800174e:	f000 f8b7 	bl	80018c0 <Error_Handler>
  }
}
 8001752:	bf00      	nop
 8001754:	3750      	adds	r7, #80	@ 0x50
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40007000 	.word	0x40007000

08001764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800176a:	463b      	mov	r3, r7
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001776:	4b21      	ldr	r3, [pc, #132]	@ (80017fc <MX_ADC1_Init+0x98>)
 8001778:	4a21      	ldr	r2, [pc, #132]	@ (8001800 <MX_ADC1_Init+0x9c>)
 800177a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <MX_ADC1_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001782:	4b1e      	ldr	r3, [pc, #120]	@ (80017fc <MX_ADC1_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001788:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <MX_ADC1_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800178e:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <MX_ADC1_Init+0x98>)
 8001790:	2200      	movs	r2, #0
 8001792:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001794:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <MX_ADC1_Init+0x98>)
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800179c:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <MX_ADC1_Init+0x98>)
 800179e:	2200      	movs	r2, #0
 80017a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017a2:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <MX_ADC1_Init+0x98>)
 80017a4:	4a17      	ldr	r2, [pc, #92]	@ (8001804 <MX_ADC1_Init+0xa0>)
 80017a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a8:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <MX_ADC1_Init+0x98>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017ae:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <MX_ADC1_Init+0x98>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <MX_ADC1_Init+0x98>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <MX_ADC1_Init+0x98>)
 80017be:	2201      	movs	r2, #1
 80017c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017c2:	480e      	ldr	r0, [pc, #56]	@ (80017fc <MX_ADC1_Init+0x98>)
 80017c4:	f000 fafe 	bl	8001dc4 <HAL_ADC_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80017ce:	f000 f877 	bl	80018c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80017d2:	2306      	movs	r3, #6
 80017d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017d6:	2301      	movs	r3, #1
 80017d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80017da:	2307      	movs	r3, #7
 80017dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017de:	463b      	mov	r3, r7
 80017e0:	4619      	mov	r1, r3
 80017e2:	4806      	ldr	r0, [pc, #24]	@ (80017fc <MX_ADC1_Init+0x98>)
 80017e4:	f000 fc9c 	bl	8002120 <HAL_ADC_ConfigChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80017ee:	f000 f867 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000238 	.word	0x20000238
 8001800:	40012000 	.word	0x40012000
 8001804:	0f000001 	.word	0x0f000001

08001808 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800180c:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 800180e:	4a12      	ldr	r2, [pc, #72]	@ (8001858 <MX_USART1_UART_Init+0x50>)
 8001810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001812:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 8001814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001820:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001826:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800182c:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 800182e:	220c      	movs	r2, #12
 8001830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001832:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800183e:	4805      	ldr	r0, [pc, #20]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 8001840:	f001 fd80 	bl	8003344 <HAL_UART_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800184a:	f000 f839 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000280 	.word	0x20000280
 8001858:	40011000 	.word	0x40011000

0800185c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <MX_GPIO_Init+0x5c>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001878:	4a0f      	ldr	r2, [pc, #60]	@ (80018b8 <MX_GPIO_Init+0x5c>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001880:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <MX_GPIO_Init+0x5c>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	2101      	movs	r1, #1
 8001890:	480a      	ldr	r0, [pc, #40]	@ (80018bc <MX_GPIO_Init+0x60>)
 8001892:	f001 f8e5 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001896:	2301      	movs	r3, #1
 8001898:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	4619      	mov	r1, r3
 80018aa:	4804      	ldr	r0, [pc, #16]	@ (80018bc <MX_GPIO_Init+0x60>)
 80018ac:	f000 ff3c 	bl	8002728 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020000 	.word	0x40020000

080018c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <Error_Handler+0x8>

080018cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	4a0f      	ldr	r2, [pc, #60]	@ (8001918 <HAL_MspInit+0x4c>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001918 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	4a08      	ldr	r2, [pc, #32]	@ (8001918 <HAL_MspInit+0x4c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a17      	ldr	r2, [pc, #92]	@ (8001998 <HAL_ADC_MspInit+0x7c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d127      	bne.n	800198e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b16      	ldr	r3, [pc, #88]	@ (800199c <HAL_ADC_MspInit+0x80>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	4a15      	ldr	r2, [pc, #84]	@ (800199c <HAL_ADC_MspInit+0x80>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800194c:	6453      	str	r3, [r2, #68]	@ 0x44
 800194e:	4b13      	ldr	r3, [pc, #76]	@ (800199c <HAL_ADC_MspInit+0x80>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <HAL_ADC_MspInit+0x80>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a0e      	ldr	r2, [pc, #56]	@ (800199c <HAL_ADC_MspInit+0x80>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <HAL_ADC_MspInit+0x80>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001976:	2340      	movs	r3, #64	@ 0x40
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197a:	2303      	movs	r3, #3
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <HAL_ADC_MspInit+0x84>)
 800198a:	f000 fecd 	bl	8002728 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	@ 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40012000 	.word	0x40012000
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020000 	.word	0x40020000

080019a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	@ 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a19      	ldr	r2, [pc, #100]	@ (8001a28 <HAL_UART_MspInit+0x84>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d12c      	bne.n	8001a20 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_UART_MspInit+0x88>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ce:	4a17      	ldr	r2, [pc, #92]	@ (8001a2c <HAL_UART_MspInit+0x88>)
 80019d0:	f043 0310 	orr.w	r3, r3, #16
 80019d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_UART_MspInit+0x88>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <HAL_UART_MspInit+0x88>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a10      	ldr	r2, [pc, #64]	@ (8001a2c <HAL_UART_MspInit+0x88>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <HAL_UART_MspInit+0x88>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019fe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a10:	2307      	movs	r3, #7
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <HAL_UART_MspInit+0x8c>)
 8001a1c:	f000 fe84 	bl	8002728 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a20:	bf00      	nop
 8001a22:	3728      	adds	r7, #40	@ 0x28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40011000 	.word	0x40011000
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020000 	.word	0x40020000

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <NMI_Handler+0x4>

08001a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <BusFault_Handler+0x4>

08001a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <UsageFault_Handler+0x4>

08001a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8a:	f000 f957 	bl	8001d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  return 1;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <_kill>:

int _kill(int pid, int sig)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aac:	f003 f870 	bl	8004b90 <__errno>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2216      	movs	r2, #22
 8001ab4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_exit>:

void _exit (int status)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aca:	f04f 31ff 	mov.w	r1, #4294967295
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffe7 	bl	8001aa2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <_exit+0x12>

08001ad8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e00a      	b.n	8001b00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aea:	f3af 8000 	nop.w
 8001aee:	4601      	mov	r1, r0
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	60ba      	str	r2, [r7, #8]
 8001af6:	b2ca      	uxtb	r2, r1
 8001af8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dbf0      	blt.n	8001aea <_read+0x12>
  }

  return len;
 8001b08:	687b      	ldr	r3, [r7, #4]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e009      	b.n	8001b38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	60ba      	str	r2, [r7, #8]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbf1      	blt.n	8001b24 <_write+0x12>
  }
  return len;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_close>:

int _close(int file)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b72:	605a      	str	r2, [r3, #4]
  return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_isatty>:

int _isatty(int file)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bbc:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <_sbrk+0x5c>)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <_sbrk+0x60>)
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <_sbrk+0x64>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <_sbrk+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be4:	f002 ffd4 	bl	8004b90 <__errno>
 8001be8:	4603      	mov	r3, r0
 8001bea:	220c      	movs	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e009      	b.n	8001c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <_sbrk+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20020000 	.word	0x20020000
 8001c14:	00000400 	.word	0x00000400
 8001c18:	20000308 	.word	0x20000308
 8001c1c:	20000460 	.word	0x20000460

08001c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <SystemInit+0x20>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c2a:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <SystemInit+0x20>)
 8001c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c48:	f7ff ffea 	bl	8001c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c4c:	480c      	ldr	r0, [pc, #48]	@ (8001c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c4e:	490d      	ldr	r1, [pc, #52]	@ (8001c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c50:	4a0d      	ldr	r2, [pc, #52]	@ (8001c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c54:	e002      	b.n	8001c5c <LoopCopyDataInit>

08001c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5a:	3304      	adds	r3, #4

08001c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c60:	d3f9      	bcc.n	8001c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c62:	4a0a      	ldr	r2, [pc, #40]	@ (8001c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c64:	4c0a      	ldr	r4, [pc, #40]	@ (8001c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c68:	e001      	b.n	8001c6e <LoopFillZerobss>

08001c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c6c:	3204      	adds	r2, #4

08001c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c70:	d3fb      	bcc.n	8001c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c72:	f002 ff93 	bl	8004b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c76:	f7ff fc33 	bl	80014e0 <main>
  bx  lr    
 8001c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c84:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c88:	08009690 	.word	0x08009690
  ldr r2, =_sbss
 8001c8c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c90:	2000045c 	.word	0x2000045c

08001c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c94:	e7fe      	b.n	8001c94 <ADC_IRQHandler>
	...

08001c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd8 <HAL_Init+0x40>)
 8001ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <HAL_Init+0x40>)
 8001cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a07      	ldr	r2, [pc, #28]	@ (8001cd8 <HAL_Init+0x40>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f000 fcfd 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc6:	200f      	movs	r0, #15
 8001cc8:	f000 f808 	bl	8001cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ccc:	f7ff fdfe 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023c00 	.word	0x40023c00

08001cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce4:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_InitTick+0x54>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <HAL_InitTick+0x58>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fd07 	bl	800270e <HAL_SYSTICK_Config>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00e      	b.n	8001d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b0f      	cmp	r3, #15
 8001d0e:	d80a      	bhi.n	8001d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d10:	2200      	movs	r2, #0
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f000 fcdd 	bl	80026d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d1c:	4a06      	ldr	r2, [pc, #24]	@ (8001d38 <HAL_InitTick+0x5c>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000000 	.word	0x20000000
 8001d34:	20000008 	.word	0x20000008
 8001d38:	20000004 	.word	0x20000004

08001d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_IncTick+0x20>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_IncTick+0x24>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	@ (8001d60 <HAL_IncTick+0x24>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	2000030c 	.word	0x2000030c

08001d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b03      	ldr	r3, [pc, #12]	@ (8001d78 <HAL_GetTick+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	2000030c 	.word	0x2000030c

08001d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d84:	f7ff ffee 	bl	8001d64 <HAL_GetTick>
 8001d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d005      	beq.n	8001da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d96:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <HAL_Delay+0x44>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001da2:	bf00      	nop
 8001da4:	f7ff ffde 	bl	8001d64 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d8f7      	bhi.n	8001da4 <HAL_Delay+0x28>
  {
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000008 	.word	0x20000008

08001dc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e033      	b.n	8001e42 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff fd9a 	bl	800191c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d118      	bne.n	8001e34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e0a:	f023 0302 	bic.w	r3, r3, #2
 8001e0e:	f043 0202 	orr.w	r2, r3, #2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 faa4 	bl	8002364 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f023 0303 	bic.w	r3, r3, #3
 8001e2a:	f043 0201 	orr.w	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e32:	e001      	b.n	8001e38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_Start+0x1a>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e0b2      	b.n	8001fcc <HAL_ADC_Start+0x180>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d018      	beq.n	8001eae <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e8c:	4b52      	ldr	r3, [pc, #328]	@ (8001fd8 <HAL_ADC_Start+0x18c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a52      	ldr	r2, [pc, #328]	@ (8001fdc <HAL_ADC_Start+0x190>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	0c9a      	lsrs	r2, r3, #18
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ea0:	e002      	b.n	8001ea8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f9      	bne.n	8001ea2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d17a      	bne.n	8001fb2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ee6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001efa:	d106      	bne.n	8001f0a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f00:	f023 0206 	bic.w	r2, r3, #6
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f08:	e002      	b.n	8001f10 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f18:	4b31      	ldr	r3, [pc, #196]	@ (8001fe0 <HAL_ADC_Start+0x194>)
 8001f1a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f24:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d12a      	bne.n	8001f88 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a2b      	ldr	r2, [pc, #172]	@ (8001fe4 <HAL_ADC_Start+0x198>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d015      	beq.n	8001f68 <HAL_ADC_Start+0x11c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a29      	ldr	r2, [pc, #164]	@ (8001fe8 <HAL_ADC_Start+0x19c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d105      	bne.n	8001f52 <HAL_ADC_Start+0x106>
 8001f46:	4b26      	ldr	r3, [pc, #152]	@ (8001fe0 <HAL_ADC_Start+0x194>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00a      	beq.n	8001f68 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a25      	ldr	r2, [pc, #148]	@ (8001fec <HAL_ADC_Start+0x1a0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d136      	bne.n	8001fca <HAL_ADC_Start+0x17e>
 8001f5c:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <HAL_ADC_Start+0x194>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d130      	bne.n	8001fca <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d129      	bne.n	8001fca <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	e020      	b.n	8001fca <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a15      	ldr	r2, [pc, #84]	@ (8001fe4 <HAL_ADC_Start+0x198>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d11b      	bne.n	8001fca <HAL_ADC_Start+0x17e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d114      	bne.n	8001fca <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	e00b      	b.n	8001fca <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f043 0210 	orr.w	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	431bde83 	.word	0x431bde83
 8001fe0:	40012300 	.word	0x40012300
 8001fe4:	40012000 	.word	0x40012000
 8001fe8:	40012100 	.word	0x40012100
 8001fec:	40012200 	.word	0x40012200

08001ff0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800200c:	d113      	bne.n	8002036 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800201c:	d10b      	bne.n	8002036 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	f043 0220 	orr.w	r2, r3, #32
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e063      	b.n	80020fe <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002036:	f7ff fe95 	bl	8001d64 <HAL_GetTick>
 800203a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800203c:	e021      	b.n	8002082 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d01d      	beq.n	8002082 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d007      	beq.n	800205c <HAL_ADC_PollForConversion+0x6c>
 800204c:	f7ff fe8a 	bl	8001d64 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d212      	bcs.n	8002082 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b02      	cmp	r3, #2
 8002068:	d00b      	beq.n	8002082 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	f043 0204 	orr.w	r2, r3, #4
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e03d      	b.n	80020fe <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b02      	cmp	r3, #2
 800208e:	d1d6      	bne.n	800203e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0212 	mvn.w	r2, #18
 8002098:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d123      	bne.n	80020fc <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11f      	bne.n	80020fc <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d006      	beq.n	80020d8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d111      	bne.n	80020fc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f043 0201 	orr.w	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_ADC_ConfigChannel+0x1c>
 8002138:	2302      	movs	r3, #2
 800213a:	e105      	b.n	8002348 <HAL_ADC_ConfigChannel+0x228>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b09      	cmp	r3, #9
 800214a:	d925      	bls.n	8002198 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68d9      	ldr	r1, [r3, #12]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	3b1e      	subs	r3, #30
 8002162:	2207      	movs	r2, #7
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43da      	mvns	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	400a      	ands	r2, r1
 8002170:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68d9      	ldr	r1, [r3, #12]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
 8002182:	4618      	mov	r0, r3
 8002184:	4603      	mov	r3, r0
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4403      	add	r3, r0
 800218a:	3b1e      	subs	r3, #30
 800218c:	409a      	lsls	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	e022      	b.n	80021de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6919      	ldr	r1, [r3, #16]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	2207      	movs	r2, #7
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	400a      	ands	r2, r1
 80021ba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6919      	ldr	r1, [r3, #16]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	4618      	mov	r0, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4403      	add	r3, r0
 80021d4:	409a      	lsls	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d824      	bhi.n	8002230 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	3b05      	subs	r3, #5
 80021f8:	221f      	movs	r2, #31
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43da      	mvns	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	400a      	ands	r2, r1
 8002206:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	4618      	mov	r0, r3
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	3b05      	subs	r3, #5
 8002222:	fa00 f203 	lsl.w	r2, r0, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	635a      	str	r2, [r3, #52]	@ 0x34
 800222e:	e04c      	b.n	80022ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b0c      	cmp	r3, #12
 8002236:	d824      	bhi.n	8002282 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	3b23      	subs	r3, #35	@ 0x23
 800224a:	221f      	movs	r2, #31
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43da      	mvns	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	400a      	ands	r2, r1
 8002258:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	b29b      	uxth	r3, r3
 8002266:	4618      	mov	r0, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	3b23      	subs	r3, #35	@ 0x23
 8002274:	fa00 f203 	lsl.w	r2, r0, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002280:	e023      	b.n	80022ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	3b41      	subs	r3, #65	@ 0x41
 8002294:	221f      	movs	r2, #31
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	400a      	ands	r2, r1
 80022a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	4618      	mov	r0, r3
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	3b41      	subs	r3, #65	@ 0x41
 80022be:	fa00 f203 	lsl.w	r2, r0, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ca:	4b22      	ldr	r3, [pc, #136]	@ (8002354 <HAL_ADC_ConfigChannel+0x234>)
 80022cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a21      	ldr	r2, [pc, #132]	@ (8002358 <HAL_ADC_ConfigChannel+0x238>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d109      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x1cc>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b12      	cmp	r3, #18
 80022de:	d105      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a19      	ldr	r2, [pc, #100]	@ (8002358 <HAL_ADC_ConfigChannel+0x238>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d123      	bne.n	800233e <HAL_ADC_ConfigChannel+0x21e>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d003      	beq.n	8002306 <HAL_ADC_ConfigChannel+0x1e6>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b11      	cmp	r3, #17
 8002304:	d11b      	bne.n	800233e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b10      	cmp	r3, #16
 8002318:	d111      	bne.n	800233e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800231a:	4b10      	ldr	r3, [pc, #64]	@ (800235c <HAL_ADC_ConfigChannel+0x23c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a10      	ldr	r2, [pc, #64]	@ (8002360 <HAL_ADC_ConfigChannel+0x240>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	0c9a      	lsrs	r2, r3, #18
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002330:	e002      	b.n	8002338 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	3b01      	subs	r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f9      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40012300 	.word	0x40012300
 8002358:	40012000 	.word	0x40012000
 800235c:	20000000 	.word	0x20000000
 8002360:	431bde83 	.word	0x431bde83

08002364 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800236c:	4b79      	ldr	r3, [pc, #484]	@ (8002554 <ADC_Init+0x1f0>)
 800236e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	431a      	orrs	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002398:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	021a      	lsls	r2, r3, #8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6899      	ldr	r1, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f6:	4a58      	ldr	r2, [pc, #352]	@ (8002558 <ADC_Init+0x1f4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d022      	beq.n	8002442 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800240a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6899      	ldr	r1, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800242c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6899      	ldr	r1, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	e00f      	b.n	8002462 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002450:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002460:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0202 	bic.w	r2, r2, #2
 8002470:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6899      	ldr	r1, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	7e1b      	ldrb	r3, [r3, #24]
 800247c:	005a      	lsls	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3020 	ldrb.w	r3, [r3, #32]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01b      	beq.n	80024c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800249e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80024ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	3b01      	subs	r3, #1
 80024bc:	035a      	lsls	r2, r3, #13
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	e007      	b.n	80024d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024d6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80024e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	051a      	lsls	r2, r3, #20
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800250c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6899      	ldr	r1, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800251a:	025a      	lsls	r2, r3, #9
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002532:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6899      	ldr	r1, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	029a      	lsls	r2, r3, #10
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	609a      	str	r2, [r3, #8]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	40012300 	.word	0x40012300
 8002558:	0f000001 	.word	0x0f000001

0800255c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002578:	4013      	ands	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002584:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258e:	4a04      	ldr	r2, [pc, #16]	@ (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	60d3      	str	r3, [r2, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a8:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <__NVIC_GetPriorityGrouping+0x18>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	f003 0307 	and.w	r3, r3, #7
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	@ (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	@ (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	@ 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	@ 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	@ (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f7ff ff8e 	bl	80025c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff47 	bl	800255c <__NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e8:	f7ff ff5c 	bl	80025a4 <__NVIC_GetPriorityGrouping>
 80026ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff8e 	bl	8002614 <NVIC_EncodePriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff5d 	bl	80025c0 <__NVIC_SetPriority>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffb0 	bl	800267c <SysTick_Config>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	@ 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	e16b      	b.n	8002a1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002744:	2201      	movs	r2, #1
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	429a      	cmp	r2, r3
 800275e:	f040 815a 	bne.w	8002a16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d005      	beq.n	800277a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002776:	2b02      	cmp	r3, #2
 8002778:	d130      	bne.n	80027dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	2203      	movs	r2, #3
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b0:	2201      	movs	r2, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 0201 	and.w	r2, r3, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d017      	beq.n	8002818 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2203      	movs	r2, #3
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d123      	bne.n	800286c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	08da      	lsrs	r2, r3, #3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3208      	adds	r2, #8
 800282c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	220f      	movs	r2, #15
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	08da      	lsrs	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3208      	adds	r2, #8
 8002866:	69b9      	ldr	r1, [r7, #24]
 8002868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0203 	and.w	r2, r3, #3
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80b4 	beq.w	8002a16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	4b60      	ldr	r3, [pc, #384]	@ (8002a34 <HAL_GPIO_Init+0x30c>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b6:	4a5f      	ldr	r2, [pc, #380]	@ (8002a34 <HAL_GPIO_Init+0x30c>)
 80028b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80028be:	4b5d      	ldr	r3, [pc, #372]	@ (8002a34 <HAL_GPIO_Init+0x30c>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002a38 <HAL_GPIO_Init+0x310>)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	3302      	adds	r3, #2
 80028d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	220f      	movs	r2, #15
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a52      	ldr	r2, [pc, #328]	@ (8002a3c <HAL_GPIO_Init+0x314>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d02b      	beq.n	800294e <HAL_GPIO_Init+0x226>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a51      	ldr	r2, [pc, #324]	@ (8002a40 <HAL_GPIO_Init+0x318>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d025      	beq.n	800294a <HAL_GPIO_Init+0x222>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a50      	ldr	r2, [pc, #320]	@ (8002a44 <HAL_GPIO_Init+0x31c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01f      	beq.n	8002946 <HAL_GPIO_Init+0x21e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4f      	ldr	r2, [pc, #316]	@ (8002a48 <HAL_GPIO_Init+0x320>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d019      	beq.n	8002942 <HAL_GPIO_Init+0x21a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4e      	ldr	r2, [pc, #312]	@ (8002a4c <HAL_GPIO_Init+0x324>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_GPIO_Init+0x216>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4d      	ldr	r2, [pc, #308]	@ (8002a50 <HAL_GPIO_Init+0x328>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00d      	beq.n	800293a <HAL_GPIO_Init+0x212>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4c      	ldr	r2, [pc, #304]	@ (8002a54 <HAL_GPIO_Init+0x32c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <HAL_GPIO_Init+0x20e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4b      	ldr	r2, [pc, #300]	@ (8002a58 <HAL_GPIO_Init+0x330>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_GPIO_Init+0x20a>
 800292e:	2307      	movs	r3, #7
 8002930:	e00e      	b.n	8002950 <HAL_GPIO_Init+0x228>
 8002932:	2308      	movs	r3, #8
 8002934:	e00c      	b.n	8002950 <HAL_GPIO_Init+0x228>
 8002936:	2306      	movs	r3, #6
 8002938:	e00a      	b.n	8002950 <HAL_GPIO_Init+0x228>
 800293a:	2305      	movs	r3, #5
 800293c:	e008      	b.n	8002950 <HAL_GPIO_Init+0x228>
 800293e:	2304      	movs	r3, #4
 8002940:	e006      	b.n	8002950 <HAL_GPIO_Init+0x228>
 8002942:	2303      	movs	r3, #3
 8002944:	e004      	b.n	8002950 <HAL_GPIO_Init+0x228>
 8002946:	2302      	movs	r3, #2
 8002948:	e002      	b.n	8002950 <HAL_GPIO_Init+0x228>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_GPIO_Init+0x228>
 800294e:	2300      	movs	r3, #0
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	f002 0203 	and.w	r2, r2, #3
 8002956:	0092      	lsls	r2, r2, #2
 8002958:	4093      	lsls	r3, r2
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002960:	4935      	ldr	r1, [pc, #212]	@ (8002a38 <HAL_GPIO_Init+0x310>)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	3302      	adds	r3, #2
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800296e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a5c <HAL_GPIO_Init+0x334>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002992:	4a32      	ldr	r2, [pc, #200]	@ (8002a5c <HAL_GPIO_Init+0x334>)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002998:	4b30      	ldr	r3, [pc, #192]	@ (8002a5c <HAL_GPIO_Init+0x334>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029bc:	4a27      	ldr	r2, [pc, #156]	@ (8002a5c <HAL_GPIO_Init+0x334>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029c2:	4b26      	ldr	r3, [pc, #152]	@ (8002a5c <HAL_GPIO_Init+0x334>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a5c <HAL_GPIO_Init+0x334>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ec:	4b1b      	ldr	r3, [pc, #108]	@ (8002a5c <HAL_GPIO_Init+0x334>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a10:	4a12      	ldr	r2, [pc, #72]	@ (8002a5c <HAL_GPIO_Init+0x334>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	f67f ae90 	bls.w	8002744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3724      	adds	r7, #36	@ 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40013800 	.word	0x40013800
 8002a3c:	40020000 	.word	0x40020000
 8002a40:	40020400 	.word	0x40020400
 8002a44:	40020800 	.word	0x40020800
 8002a48:	40020c00 	.word	0x40020c00
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40021400 	.word	0x40021400
 8002a54:	40021800 	.word	0x40021800
 8002a58:	40021c00 	.word	0x40021c00
 8002a5c:	40013c00 	.word	0x40013c00

08002a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a7c:	e003      	b.n	8002a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a7e:	887b      	ldrh	r3, [r7, #2]
 8002a80:	041a      	lsls	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	619a      	str	r2, [r3, #24]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e267      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d075      	beq.n	8002b9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ab2:	4b88      	ldr	r3, [pc, #544]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d00c      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002abe:	4b85      	ldr	r3, [pc, #532]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d112      	bne.n	8002af0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aca:	4b82      	ldr	r3, [pc, #520]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ad2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ad6:	d10b      	bne.n	8002af0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	4b7e      	ldr	r3, [pc, #504]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d05b      	beq.n	8002b9c <HAL_RCC_OscConfig+0x108>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d157      	bne.n	8002b9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e242      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af8:	d106      	bne.n	8002b08 <HAL_RCC_OscConfig+0x74>
 8002afa:	4b76      	ldr	r3, [pc, #472]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a75      	ldr	r2, [pc, #468]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e01d      	b.n	8002b44 <HAL_RCC_OscConfig+0xb0>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x98>
 8002b12:	4b70      	ldr	r3, [pc, #448]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a6f      	ldr	r2, [pc, #444]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6c      	ldr	r2, [pc, #432]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0xb0>
 8002b2c:	4b69      	ldr	r3, [pc, #420]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a68      	ldr	r2, [pc, #416]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b66      	ldr	r3, [pc, #408]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a65      	ldr	r2, [pc, #404]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7ff f90a 	bl	8001d64 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7ff f906 	bl	8001d64 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	@ 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e207      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b5b      	ldr	r3, [pc, #364]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0xc0>
 8002b72:	e014      	b.n	8002b9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7ff f8f6 	bl	8001d64 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7ff f8f2 	bl	8001d64 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	@ 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1f3      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	4b51      	ldr	r3, [pc, #324]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0xe8>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d063      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002baa:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bb6:	4b47      	ldr	r3, [pc, #284]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d11c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc2:	4b44      	ldr	r3, [pc, #272]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d116      	bne.n	8002bfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	4b41      	ldr	r3, [pc, #260]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_RCC_OscConfig+0x152>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e1c7      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4937      	ldr	r1, [pc, #220]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	e03a      	b.n	8002c72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c04:	4b34      	ldr	r3, [pc, #208]	@ (8002cd8 <HAL_RCC_OscConfig+0x244>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7ff f8ab 	bl	8001d64 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c12:	f7ff f8a7 	bl	8001d64 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e1a8      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c30:	4b28      	ldr	r3, [pc, #160]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4925      	ldr	r1, [pc, #148]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	600b      	str	r3, [r1, #0]
 8002c44:	e015      	b.n	8002c72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c46:	4b24      	ldr	r3, [pc, #144]	@ (8002cd8 <HAL_RCC_OscConfig+0x244>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7ff f88a 	bl	8001d64 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c54:	f7ff f886 	bl	8001d64 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e187      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d036      	beq.n	8002cec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d016      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c86:	4b15      	ldr	r3, [pc, #84]	@ (8002cdc <HAL_RCC_OscConfig+0x248>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7ff f86a 	bl	8001d64 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c94:	f7ff f866 	bl	8001d64 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e167      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x200>
 8002cb2:	e01b      	b.n	8002cec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb4:	4b09      	ldr	r3, [pc, #36]	@ (8002cdc <HAL_RCC_OscConfig+0x248>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cba:	f7ff f853 	bl	8001d64 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc0:	e00e      	b.n	8002ce0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc2:	f7ff f84f 	bl	8001d64 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d907      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e150      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	42470000 	.word	0x42470000
 8002cdc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce0:	4b88      	ldr	r3, [pc, #544]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1ea      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8097 	beq.w	8002e28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfe:	4b81      	ldr	r3, [pc, #516]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10f      	bne.n	8002d2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	4a7c      	ldr	r2, [pc, #496]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d1a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	4b77      	ldr	r3, [pc, #476]	@ (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d118      	bne.n	8002d68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d36:	4b74      	ldr	r3, [pc, #464]	@ (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a73      	ldr	r2, [pc, #460]	@ (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d42:	f7ff f80f 	bl	8001d64 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4a:	f7ff f80b 	bl	8001d64 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e10c      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCC_OscConfig+0x2ea>
 8002d70:	4b64      	ldr	r3, [pc, #400]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d74:	4a63      	ldr	r2, [pc, #396]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d7c:	e01c      	b.n	8002db8 <HAL_RCC_OscConfig+0x324>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x30c>
 8002d86:	4b5f      	ldr	r3, [pc, #380]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8a:	4a5e      	ldr	r2, [pc, #376]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	f043 0304 	orr.w	r3, r3, #4
 8002d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d92:	4b5c      	ldr	r3, [pc, #368]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d96:	4a5b      	ldr	r2, [pc, #364]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0x324>
 8002da0:	4b58      	ldr	r3, [pc, #352]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da4:	4a57      	ldr	r2, [pc, #348]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002da6:	f023 0301 	bic.w	r3, r3, #1
 8002daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dac:	4b55      	ldr	r3, [pc, #340]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db0:	4a54      	ldr	r2, [pc, #336]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002db2:	f023 0304 	bic.w	r3, r3, #4
 8002db6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d015      	beq.n	8002dec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe ffd0 	bl	8001d64 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fe ffcc 	bl	8001d64 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0cb      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dde:	4b49      	ldr	r3, [pc, #292]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0ee      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x334>
 8002dea:	e014      	b.n	8002e16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7fe ffba 	bl	8001d64 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df4:	f7fe ffb6 	bl	8001d64 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e0b5      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1ee      	bne.n	8002df4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d105      	bne.n	8002e28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1c:	4b39      	ldr	r3, [pc, #228]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	4a38      	ldr	r2, [pc, #224]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80a1 	beq.w	8002f74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e32:	4b34      	ldr	r3, [pc, #208]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d05c      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d141      	bne.n	8002eca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e46:	4b31      	ldr	r3, [pc, #196]	@ (8002f0c <HAL_RCC_OscConfig+0x478>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe ff8a 	bl	8001d64 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe ff86 	bl	8001d64 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e087      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e66:	4b27      	ldr	r3, [pc, #156]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	019b      	lsls	r3, r3, #6
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	061b      	lsls	r3, r3, #24
 8002e96:	491b      	ldr	r1, [pc, #108]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f0c <HAL_RCC_OscConfig+0x478>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7fe ff5f 	bl	8001d64 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe ff5b 	bl	8001d64 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e05c      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebc:	4b11      	ldr	r3, [pc, #68]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x416>
 8002ec8:	e054      	b.n	8002f74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b10      	ldr	r3, [pc, #64]	@ (8002f0c <HAL_RCC_OscConfig+0x478>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe ff48 	bl	8001d64 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe ff44 	bl	8001d64 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e045      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	4b06      	ldr	r3, [pc, #24]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x444>
 8002ef6:	e03d      	b.n	8002f74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d107      	bne.n	8002f10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e038      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40007000 	.word	0x40007000
 8002f0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f10:	4b1b      	ldr	r3, [pc, #108]	@ (8002f80 <HAL_RCC_OscConfig+0x4ec>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d028      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d121      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d11a      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f40:	4013      	ands	r3, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d111      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800

08002f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0cc      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f98:	4b68      	ldr	r3, [pc, #416]	@ (800313c <HAL_RCC_ClockConfig+0x1b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d90c      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b65      	ldr	r3, [pc, #404]	@ (800313c <HAL_RCC_ClockConfig+0x1b8>)
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b63      	ldr	r3, [pc, #396]	@ (800313c <HAL_RCC_ClockConfig+0x1b8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0b8      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd8:	4b59      	ldr	r3, [pc, #356]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a58      	ldr	r2, [pc, #352]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fe2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff0:	4b53      	ldr	r3, [pc, #332]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a52      	ldr	r2, [pc, #328]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffc:	4b50      	ldr	r3, [pc, #320]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	494d      	ldr	r1, [pc, #308]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d044      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b47      	ldr	r3, [pc, #284]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d119      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e07f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d003      	beq.n	8003042 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303e:	2b03      	cmp	r3, #3
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003042:	4b3f      	ldr	r3, [pc, #252]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003052:	4b3b      	ldr	r3, [pc, #236]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e067      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003062:	4b37      	ldr	r3, [pc, #220]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f023 0203 	bic.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4934      	ldr	r1, [pc, #208]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003074:	f7fe fe76 	bl	8001d64 <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307a:	e00a      	b.n	8003092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307c:	f7fe fe72 	bl	8001d64 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e04f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	4b2b      	ldr	r3, [pc, #172]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 020c 	and.w	r2, r3, #12
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d1eb      	bne.n	800307c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030a4:	4b25      	ldr	r3, [pc, #148]	@ (800313c <HAL_RCC_ClockConfig+0x1b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d20c      	bcs.n	80030cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b22      	ldr	r3, [pc, #136]	@ (800313c <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b20      	ldr	r3, [pc, #128]	@ (800313c <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e032      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d8:	4b19      	ldr	r3, [pc, #100]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4916      	ldr	r1, [pc, #88]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d009      	beq.n	800310a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030f6:	4b12      	ldr	r3, [pc, #72]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	490e      	ldr	r1, [pc, #56]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800310a:	f000 f821 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 800310e:	4602      	mov	r2, r0
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	490a      	ldr	r1, [pc, #40]	@ (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	5ccb      	ldrb	r3, [r1, r3]
 800311e:	fa22 f303 	lsr.w	r3, r2, r3
 8003122:	4a09      	ldr	r2, [pc, #36]	@ (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003126:	4b09      	ldr	r3, [pc, #36]	@ (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe fdd6 	bl	8001cdc <HAL_InitTick>

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023c00 	.word	0x40023c00
 8003140:	40023800 	.word	0x40023800
 8003144:	080091f8 	.word	0x080091f8
 8003148:	20000000 	.word	0x20000000
 800314c:	20000004 	.word	0x20000004

08003150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003154:	b090      	sub	sp, #64	@ 0x40
 8003156:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003168:	4b59      	ldr	r3, [pc, #356]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 030c 	and.w	r3, r3, #12
 8003170:	2b08      	cmp	r3, #8
 8003172:	d00d      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x40>
 8003174:	2b08      	cmp	r3, #8
 8003176:	f200 80a1 	bhi.w	80032bc <HAL_RCC_GetSysClockFreq+0x16c>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x34>
 800317e:	2b04      	cmp	r3, #4
 8003180:	d003      	beq.n	800318a <HAL_RCC_GetSysClockFreq+0x3a>
 8003182:	e09b      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b53      	ldr	r3, [pc, #332]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003186:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003188:	e09b      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800318a:	4b53      	ldr	r3, [pc, #332]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800318c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800318e:	e098      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003190:	4b4f      	ldr	r3, [pc, #316]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003198:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800319a:	4b4d      	ldr	r3, [pc, #308]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d028      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a6:	4b4a      	ldr	r3, [pc, #296]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	2200      	movs	r2, #0
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031b8:	2100      	movs	r1, #0
 80031ba:	4b47      	ldr	r3, [pc, #284]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80031bc:	fb03 f201 	mul.w	r2, r3, r1
 80031c0:	2300      	movs	r3, #0
 80031c2:	fb00 f303 	mul.w	r3, r0, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	4a43      	ldr	r2, [pc, #268]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80031ca:	fba0 1202 	umull	r1, r2, r0, r2
 80031ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031d0:	460a      	mov	r2, r1
 80031d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80031d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031d6:	4413      	add	r3, r2
 80031d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031dc:	2200      	movs	r2, #0
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	61fa      	str	r2, [r7, #28]
 80031e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80031ea:	f7fd fd4d 	bl	8000c88 <__aeabi_uldivmod>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4613      	mov	r3, r2
 80031f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031f6:	e053      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f8:	4b35      	ldr	r3, [pc, #212]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	099b      	lsrs	r3, r3, #6
 80031fe:	2200      	movs	r2, #0
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	617a      	str	r2, [r7, #20]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800320a:	f04f 0b00 	mov.w	fp, #0
 800320e:	4652      	mov	r2, sl
 8003210:	465b      	mov	r3, fp
 8003212:	f04f 0000 	mov.w	r0, #0
 8003216:	f04f 0100 	mov.w	r1, #0
 800321a:	0159      	lsls	r1, r3, #5
 800321c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003220:	0150      	lsls	r0, r2, #5
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	ebb2 080a 	subs.w	r8, r2, sl
 800322a:	eb63 090b 	sbc.w	r9, r3, fp
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800323a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800323e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003242:	ebb2 0408 	subs.w	r4, r2, r8
 8003246:	eb63 0509 	sbc.w	r5, r3, r9
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	00eb      	lsls	r3, r5, #3
 8003254:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003258:	00e2      	lsls	r2, r4, #3
 800325a:	4614      	mov	r4, r2
 800325c:	461d      	mov	r5, r3
 800325e:	eb14 030a 	adds.w	r3, r4, sl
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	eb45 030b 	adc.w	r3, r5, fp
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003276:	4629      	mov	r1, r5
 8003278:	028b      	lsls	r3, r1, #10
 800327a:	4621      	mov	r1, r4
 800327c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003280:	4621      	mov	r1, r4
 8003282:	028a      	lsls	r2, r1, #10
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328a:	2200      	movs	r2, #0
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	60fa      	str	r2, [r7, #12]
 8003290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003294:	f7fd fcf8 	bl	8000c88 <__aeabi_uldivmod>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4613      	mov	r3, r2
 800329e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032a0:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	3301      	adds	r3, #1
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80032b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032ba:	e002      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032bc:	4b05      	ldr	r3, [pc, #20]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80032be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3740      	adds	r7, #64	@ 0x40
 80032c8:	46bd      	mov	sp, r7
 80032ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	00f42400 	.word	0x00f42400
 80032d8:	017d7840 	.word	0x017d7840

080032dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e0:	4b03      	ldr	r3, [pc, #12]	@ (80032f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000000 	.word	0x20000000

080032f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032f8:	f7ff fff0 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4b05      	ldr	r3, [pc, #20]	@ (8003314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	0a9b      	lsrs	r3, r3, #10
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	4903      	ldr	r1, [pc, #12]	@ (8003318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800330a:	5ccb      	ldrb	r3, [r1, r3]
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	08009208 	.word	0x08009208

0800331c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003320:	f7ff ffdc 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8003324:	4602      	mov	r2, r0
 8003326:	4b05      	ldr	r3, [pc, #20]	@ (800333c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	0b5b      	lsrs	r3, r3, #13
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	4903      	ldr	r1, [pc, #12]	@ (8003340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003332:	5ccb      	ldrb	r3, [r1, r3]
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40023800 	.word	0x40023800
 8003340:	08009208 	.word	0x08009208

08003344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e042      	b.n	80033dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fe fb1a 	bl	80019a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2224      	movs	r2, #36	@ 0x24
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f973 	bl	8003674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800339c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	@ 0x28
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	4613      	mov	r3, r2
 80033f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b20      	cmp	r3, #32
 8003402:	d175      	bne.n	80034f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <HAL_UART_Transmit+0x2c>
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e06e      	b.n	80034f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2221      	movs	r2, #33	@ 0x21
 800341e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003422:	f7fe fc9f 	bl	8001d64 <HAL_GetTick>
 8003426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	88fa      	ldrh	r2, [r7, #6]
 800342c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	88fa      	ldrh	r2, [r7, #6]
 8003432:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800343c:	d108      	bne.n	8003450 <HAL_UART_Transmit+0x6c>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d104      	bne.n	8003450 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	61bb      	str	r3, [r7, #24]
 800344e:	e003      	b.n	8003458 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003454:	2300      	movs	r3, #0
 8003456:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003458:	e02e      	b.n	80034b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2200      	movs	r2, #0
 8003462:	2180      	movs	r1, #128	@ 0x80
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f848 	bl	80034fa <UART_WaitOnFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e03a      	b.n	80034f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10b      	bne.n	800349a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003490:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	3302      	adds	r3, #2
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	e007      	b.n	80034aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	781a      	ldrb	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	3301      	adds	r3, #1
 80034a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1cb      	bne.n	800345a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2200      	movs	r2, #0
 80034ca:	2140      	movs	r1, #64	@ 0x40
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f814 	bl	80034fa <UART_WaitOnFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e006      	b.n	80034f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
  }
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	603b      	str	r3, [r7, #0]
 8003506:	4613      	mov	r3, r2
 8003508:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800350a:	e03b      	b.n	8003584 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003512:	d037      	beq.n	8003584 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003514:	f7fe fc26 	bl	8001d64 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	6a3a      	ldr	r2, [r7, #32]
 8003520:	429a      	cmp	r2, r3
 8003522:	d302      	bcc.n	800352a <UART_WaitOnFlagUntilTimeout+0x30>
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e03a      	b.n	80035a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d023      	beq.n	8003584 <UART_WaitOnFlagUntilTimeout+0x8a>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b80      	cmp	r3, #128	@ 0x80
 8003540:	d020      	beq.n	8003584 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b40      	cmp	r3, #64	@ 0x40
 8003546:	d01d      	beq.n	8003584 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b08      	cmp	r3, #8
 8003554:	d116      	bne.n	8003584 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 f81d 	bl	80035ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2208      	movs	r2, #8
 8003576:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e00f      	b.n	80035a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4013      	ands	r3, r2
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	429a      	cmp	r2, r3
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d0b4      	beq.n	800350c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b095      	sub	sp, #84	@ 0x54
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	330c      	adds	r3, #12
 80035ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035be:	e853 3f00 	ldrex	r3, [r3]
 80035c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	330c      	adds	r3, #12
 80035d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80035d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e5      	bne.n	80035b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3314      	adds	r3, #20
 80035ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3314      	adds	r3, #20
 8003606:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003608:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800360a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800360e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e5      	bne.n	80035e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003620:	2b01      	cmp	r3, #1
 8003622:	d119      	bne.n	8003658 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	60bb      	str	r3, [r7, #8]
   return(result);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f023 0310 	bic.w	r3, r3, #16
 800363a:	647b      	str	r3, [r7, #68]	@ 0x44
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003644:	61ba      	str	r2, [r7, #24]
 8003646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6979      	ldr	r1, [r7, #20]
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	613b      	str	r3, [r7, #16]
   return(result);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003666:	bf00      	nop
 8003668:	3754      	adds	r7, #84	@ 0x54
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003678:	b0c0      	sub	sp, #256	@ 0x100
 800367a:	af00      	add	r7, sp, #0
 800367c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003690:	68d9      	ldr	r1, [r3, #12]
 8003692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	ea40 0301 	orr.w	r3, r0, r1
 800369c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800369e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80036cc:	f021 010c 	bic.w	r1, r1, #12
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036da:	430b      	orrs	r3, r1
 80036dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80036ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ee:	6999      	ldr	r1, [r3, #24]
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	ea40 0301 	orr.w	r3, r0, r1
 80036fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	4b8f      	ldr	r3, [pc, #572]	@ (8003940 <UART_SetConfig+0x2cc>)
 8003704:	429a      	cmp	r2, r3
 8003706:	d005      	beq.n	8003714 <UART_SetConfig+0xa0>
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4b8d      	ldr	r3, [pc, #564]	@ (8003944 <UART_SetConfig+0x2d0>)
 8003710:	429a      	cmp	r2, r3
 8003712:	d104      	bne.n	800371e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003714:	f7ff fe02 	bl	800331c <HAL_RCC_GetPCLK2Freq>
 8003718:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800371c:	e003      	b.n	8003726 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800371e:	f7ff fde9 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 8003722:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003730:	f040 810c 	bne.w	800394c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003738:	2200      	movs	r2, #0
 800373a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800373e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003742:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003746:	4622      	mov	r2, r4
 8003748:	462b      	mov	r3, r5
 800374a:	1891      	adds	r1, r2, r2
 800374c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800374e:	415b      	adcs	r3, r3
 8003750:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003752:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003756:	4621      	mov	r1, r4
 8003758:	eb12 0801 	adds.w	r8, r2, r1
 800375c:	4629      	mov	r1, r5
 800375e:	eb43 0901 	adc.w	r9, r3, r1
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800376e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003776:	4690      	mov	r8, r2
 8003778:	4699      	mov	r9, r3
 800377a:	4623      	mov	r3, r4
 800377c:	eb18 0303 	adds.w	r3, r8, r3
 8003780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003784:	462b      	mov	r3, r5
 8003786:	eb49 0303 	adc.w	r3, r9, r3
 800378a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800378e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800379a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800379e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037a2:	460b      	mov	r3, r1
 80037a4:	18db      	adds	r3, r3, r3
 80037a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80037a8:	4613      	mov	r3, r2
 80037aa:	eb42 0303 	adc.w	r3, r2, r3
 80037ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80037b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037b8:	f7fd fa66 	bl	8000c88 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4b61      	ldr	r3, [pc, #388]	@ (8003948 <UART_SetConfig+0x2d4>)
 80037c2:	fba3 2302 	umull	r2, r3, r3, r2
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	011c      	lsls	r4, r3, #4
 80037ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80037d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80037dc:	4642      	mov	r2, r8
 80037de:	464b      	mov	r3, r9
 80037e0:	1891      	adds	r1, r2, r2
 80037e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80037e4:	415b      	adcs	r3, r3
 80037e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037ec:	4641      	mov	r1, r8
 80037ee:	eb12 0a01 	adds.w	sl, r2, r1
 80037f2:	4649      	mov	r1, r9
 80037f4:	eb43 0b01 	adc.w	fp, r3, r1
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003804:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003808:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800380c:	4692      	mov	sl, r2
 800380e:	469b      	mov	fp, r3
 8003810:	4643      	mov	r3, r8
 8003812:	eb1a 0303 	adds.w	r3, sl, r3
 8003816:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800381a:	464b      	mov	r3, r9
 800381c:	eb4b 0303 	adc.w	r3, fp, r3
 8003820:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003830:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003834:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003838:	460b      	mov	r3, r1
 800383a:	18db      	adds	r3, r3, r3
 800383c:	643b      	str	r3, [r7, #64]	@ 0x40
 800383e:	4613      	mov	r3, r2
 8003840:	eb42 0303 	adc.w	r3, r2, r3
 8003844:	647b      	str	r3, [r7, #68]	@ 0x44
 8003846:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800384a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800384e:	f7fd fa1b 	bl	8000c88 <__aeabi_uldivmod>
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	4611      	mov	r1, r2
 8003858:	4b3b      	ldr	r3, [pc, #236]	@ (8003948 <UART_SetConfig+0x2d4>)
 800385a:	fba3 2301 	umull	r2, r3, r3, r1
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	2264      	movs	r2, #100	@ 0x64
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	1acb      	subs	r3, r1, r3
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800386e:	4b36      	ldr	r3, [pc, #216]	@ (8003948 <UART_SetConfig+0x2d4>)
 8003870:	fba3 2302 	umull	r2, r3, r3, r2
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800387c:	441c      	add	r4, r3
 800387e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003882:	2200      	movs	r2, #0
 8003884:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003888:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800388c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003890:	4642      	mov	r2, r8
 8003892:	464b      	mov	r3, r9
 8003894:	1891      	adds	r1, r2, r2
 8003896:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003898:	415b      	adcs	r3, r3
 800389a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800389c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80038a0:	4641      	mov	r1, r8
 80038a2:	1851      	adds	r1, r2, r1
 80038a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80038a6:	4649      	mov	r1, r9
 80038a8:	414b      	adcs	r3, r1
 80038aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038b8:	4659      	mov	r1, fp
 80038ba:	00cb      	lsls	r3, r1, #3
 80038bc:	4651      	mov	r1, sl
 80038be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038c2:	4651      	mov	r1, sl
 80038c4:	00ca      	lsls	r2, r1, #3
 80038c6:	4610      	mov	r0, r2
 80038c8:	4619      	mov	r1, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	4642      	mov	r2, r8
 80038ce:	189b      	adds	r3, r3, r2
 80038d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038d4:	464b      	mov	r3, r9
 80038d6:	460a      	mov	r2, r1
 80038d8:	eb42 0303 	adc.w	r3, r2, r3
 80038dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038f4:	460b      	mov	r3, r1
 80038f6:	18db      	adds	r3, r3, r3
 80038f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038fa:	4613      	mov	r3, r2
 80038fc:	eb42 0303 	adc.w	r3, r2, r3
 8003900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003906:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800390a:	f7fd f9bd 	bl	8000c88 <__aeabi_uldivmod>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4b0d      	ldr	r3, [pc, #52]	@ (8003948 <UART_SetConfig+0x2d4>)
 8003914:	fba3 1302 	umull	r1, r3, r3, r2
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	2164      	movs	r1, #100	@ 0x64
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	3332      	adds	r3, #50	@ 0x32
 8003926:	4a08      	ldr	r2, [pc, #32]	@ (8003948 <UART_SetConfig+0x2d4>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	f003 0207 	and.w	r2, r3, #7
 8003932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4422      	add	r2, r4
 800393a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800393c:	e106      	b.n	8003b4c <UART_SetConfig+0x4d8>
 800393e:	bf00      	nop
 8003940:	40011000 	.word	0x40011000
 8003944:	40011400 	.word	0x40011400
 8003948:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800394c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003950:	2200      	movs	r2, #0
 8003952:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003956:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800395a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800395e:	4642      	mov	r2, r8
 8003960:	464b      	mov	r3, r9
 8003962:	1891      	adds	r1, r2, r2
 8003964:	6239      	str	r1, [r7, #32]
 8003966:	415b      	adcs	r3, r3
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
 800396a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800396e:	4641      	mov	r1, r8
 8003970:	1854      	adds	r4, r2, r1
 8003972:	4649      	mov	r1, r9
 8003974:	eb43 0501 	adc.w	r5, r3, r1
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	00eb      	lsls	r3, r5, #3
 8003982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003986:	00e2      	lsls	r2, r4, #3
 8003988:	4614      	mov	r4, r2
 800398a:	461d      	mov	r5, r3
 800398c:	4643      	mov	r3, r8
 800398e:	18e3      	adds	r3, r4, r3
 8003990:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003994:	464b      	mov	r3, r9
 8003996:	eb45 0303 	adc.w	r3, r5, r3
 800399a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039ba:	4629      	mov	r1, r5
 80039bc:	008b      	lsls	r3, r1, #2
 80039be:	4621      	mov	r1, r4
 80039c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c4:	4621      	mov	r1, r4
 80039c6:	008a      	lsls	r2, r1, #2
 80039c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80039cc:	f7fd f95c 	bl	8000c88 <__aeabi_uldivmod>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4b60      	ldr	r3, [pc, #384]	@ (8003b58 <UART_SetConfig+0x4e4>)
 80039d6:	fba3 2302 	umull	r2, r3, r3, r2
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	011c      	lsls	r4, r3, #4
 80039de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039f0:	4642      	mov	r2, r8
 80039f2:	464b      	mov	r3, r9
 80039f4:	1891      	adds	r1, r2, r2
 80039f6:	61b9      	str	r1, [r7, #24]
 80039f8:	415b      	adcs	r3, r3
 80039fa:	61fb      	str	r3, [r7, #28]
 80039fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a00:	4641      	mov	r1, r8
 8003a02:	1851      	adds	r1, r2, r1
 8003a04:	6139      	str	r1, [r7, #16]
 8003a06:	4649      	mov	r1, r9
 8003a08:	414b      	adcs	r3, r1
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a18:	4659      	mov	r1, fp
 8003a1a:	00cb      	lsls	r3, r1, #3
 8003a1c:	4651      	mov	r1, sl
 8003a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a22:	4651      	mov	r1, sl
 8003a24:	00ca      	lsls	r2, r1, #3
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4642      	mov	r2, r8
 8003a2e:	189b      	adds	r3, r3, r2
 8003a30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a34:	464b      	mov	r3, r9
 8003a36:	460a      	mov	r2, r1
 8003a38:	eb42 0303 	adc.w	r3, r2, r3
 8003a3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a58:	4649      	mov	r1, r9
 8003a5a:	008b      	lsls	r3, r1, #2
 8003a5c:	4641      	mov	r1, r8
 8003a5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a62:	4641      	mov	r1, r8
 8003a64:	008a      	lsls	r2, r1, #2
 8003a66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a6a:	f7fd f90d 	bl	8000c88 <__aeabi_uldivmod>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4611      	mov	r1, r2
 8003a74:	4b38      	ldr	r3, [pc, #224]	@ (8003b58 <UART_SetConfig+0x4e4>)
 8003a76:	fba3 2301 	umull	r2, r3, r3, r1
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	2264      	movs	r2, #100	@ 0x64
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	1acb      	subs	r3, r1, r3
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	3332      	adds	r3, #50	@ 0x32
 8003a88:	4a33      	ldr	r2, [pc, #204]	@ (8003b58 <UART_SetConfig+0x4e4>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a94:	441c      	add	r4, r3
 8003a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003aa0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003aa4:	4642      	mov	r2, r8
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	1891      	adds	r1, r2, r2
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	415b      	adcs	r3, r3
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ab4:	4641      	mov	r1, r8
 8003ab6:	1851      	adds	r1, r2, r1
 8003ab8:	6039      	str	r1, [r7, #0]
 8003aba:	4649      	mov	r1, r9
 8003abc:	414b      	adcs	r3, r1
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003acc:	4659      	mov	r1, fp
 8003ace:	00cb      	lsls	r3, r1, #3
 8003ad0:	4651      	mov	r1, sl
 8003ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad6:	4651      	mov	r1, sl
 8003ad8:	00ca      	lsls	r2, r1, #3
 8003ada:	4610      	mov	r0, r2
 8003adc:	4619      	mov	r1, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	189b      	adds	r3, r3, r2
 8003ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	460a      	mov	r2, r1
 8003aea:	eb42 0303 	adc.w	r3, r2, r3
 8003aee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003afa:	667a      	str	r2, [r7, #100]	@ 0x64
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b08:	4649      	mov	r1, r9
 8003b0a:	008b      	lsls	r3, r1, #2
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b12:	4641      	mov	r1, r8
 8003b14:	008a      	lsls	r2, r1, #2
 8003b16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b1a:	f7fd f8b5 	bl	8000c88 <__aeabi_uldivmod>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4b0d      	ldr	r3, [pc, #52]	@ (8003b58 <UART_SetConfig+0x4e4>)
 8003b24:	fba3 1302 	umull	r1, r3, r3, r2
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	2164      	movs	r1, #100	@ 0x64
 8003b2c:	fb01 f303 	mul.w	r3, r1, r3
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	3332      	adds	r3, #50	@ 0x32
 8003b36:	4a08      	ldr	r2, [pc, #32]	@ (8003b58 <UART_SetConfig+0x4e4>)
 8003b38:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3c:	095b      	lsrs	r3, r3, #5
 8003b3e:	f003 020f 	and.w	r2, r3, #15
 8003b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4422      	add	r2, r4
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b52:	46bd      	mov	sp, r7
 8003b54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b58:	51eb851f 	.word	0x51eb851f

08003b5c <__cvt>:
 8003b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b60:	ec57 6b10 	vmov	r6, r7, d0
 8003b64:	2f00      	cmp	r7, #0
 8003b66:	460c      	mov	r4, r1
 8003b68:	4619      	mov	r1, r3
 8003b6a:	463b      	mov	r3, r7
 8003b6c:	bfbb      	ittet	lt
 8003b6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003b72:	461f      	movlt	r7, r3
 8003b74:	2300      	movge	r3, #0
 8003b76:	232d      	movlt	r3, #45	@ 0x2d
 8003b78:	700b      	strb	r3, [r1, #0]
 8003b7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003b80:	4691      	mov	r9, r2
 8003b82:	f023 0820 	bic.w	r8, r3, #32
 8003b86:	bfbc      	itt	lt
 8003b88:	4632      	movlt	r2, r6
 8003b8a:	4616      	movlt	r6, r2
 8003b8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b90:	d005      	beq.n	8003b9e <__cvt+0x42>
 8003b92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003b96:	d100      	bne.n	8003b9a <__cvt+0x3e>
 8003b98:	3401      	adds	r4, #1
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	e000      	b.n	8003ba0 <__cvt+0x44>
 8003b9e:	2103      	movs	r1, #3
 8003ba0:	ab03      	add	r3, sp, #12
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	ab02      	add	r3, sp, #8
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	ec47 6b10 	vmov	d0, r6, r7
 8003bac:	4653      	mov	r3, sl
 8003bae:	4622      	mov	r2, r4
 8003bb0:	f001 f8aa 	bl	8004d08 <_dtoa_r>
 8003bb4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003bb8:	4605      	mov	r5, r0
 8003bba:	d119      	bne.n	8003bf0 <__cvt+0x94>
 8003bbc:	f019 0f01 	tst.w	r9, #1
 8003bc0:	d00e      	beq.n	8003be0 <__cvt+0x84>
 8003bc2:	eb00 0904 	add.w	r9, r0, r4
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2300      	movs	r3, #0
 8003bca:	4630      	mov	r0, r6
 8003bcc:	4639      	mov	r1, r7
 8003bce:	f7fc ff7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bd2:	b108      	cbz	r0, 8003bd8 <__cvt+0x7c>
 8003bd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8003bd8:	2230      	movs	r2, #48	@ 0x30
 8003bda:	9b03      	ldr	r3, [sp, #12]
 8003bdc:	454b      	cmp	r3, r9
 8003bde:	d31e      	bcc.n	8003c1e <__cvt+0xc2>
 8003be0:	9b03      	ldr	r3, [sp, #12]
 8003be2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003be4:	1b5b      	subs	r3, r3, r5
 8003be6:	4628      	mov	r0, r5
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	b004      	add	sp, #16
 8003bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003bf4:	eb00 0904 	add.w	r9, r0, r4
 8003bf8:	d1e5      	bne.n	8003bc6 <__cvt+0x6a>
 8003bfa:	7803      	ldrb	r3, [r0, #0]
 8003bfc:	2b30      	cmp	r3, #48	@ 0x30
 8003bfe:	d10a      	bne.n	8003c16 <__cvt+0xba>
 8003c00:	2200      	movs	r2, #0
 8003c02:	2300      	movs	r3, #0
 8003c04:	4630      	mov	r0, r6
 8003c06:	4639      	mov	r1, r7
 8003c08:	f7fc ff5e 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c0c:	b918      	cbnz	r0, 8003c16 <__cvt+0xba>
 8003c0e:	f1c4 0401 	rsb	r4, r4, #1
 8003c12:	f8ca 4000 	str.w	r4, [sl]
 8003c16:	f8da 3000 	ldr.w	r3, [sl]
 8003c1a:	4499      	add	r9, r3
 8003c1c:	e7d3      	b.n	8003bc6 <__cvt+0x6a>
 8003c1e:	1c59      	adds	r1, r3, #1
 8003c20:	9103      	str	r1, [sp, #12]
 8003c22:	701a      	strb	r2, [r3, #0]
 8003c24:	e7d9      	b.n	8003bda <__cvt+0x7e>

08003c26 <__exponent>:
 8003c26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c28:	2900      	cmp	r1, #0
 8003c2a:	bfba      	itte	lt
 8003c2c:	4249      	neglt	r1, r1
 8003c2e:	232d      	movlt	r3, #45	@ 0x2d
 8003c30:	232b      	movge	r3, #43	@ 0x2b
 8003c32:	2909      	cmp	r1, #9
 8003c34:	7002      	strb	r2, [r0, #0]
 8003c36:	7043      	strb	r3, [r0, #1]
 8003c38:	dd29      	ble.n	8003c8e <__exponent+0x68>
 8003c3a:	f10d 0307 	add.w	r3, sp, #7
 8003c3e:	461d      	mov	r5, r3
 8003c40:	270a      	movs	r7, #10
 8003c42:	461a      	mov	r2, r3
 8003c44:	fbb1 f6f7 	udiv	r6, r1, r7
 8003c48:	fb07 1416 	mls	r4, r7, r6, r1
 8003c4c:	3430      	adds	r4, #48	@ 0x30
 8003c4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003c52:	460c      	mov	r4, r1
 8003c54:	2c63      	cmp	r4, #99	@ 0x63
 8003c56:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c5a:	4631      	mov	r1, r6
 8003c5c:	dcf1      	bgt.n	8003c42 <__exponent+0x1c>
 8003c5e:	3130      	adds	r1, #48	@ 0x30
 8003c60:	1e94      	subs	r4, r2, #2
 8003c62:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c66:	1c41      	adds	r1, r0, #1
 8003c68:	4623      	mov	r3, r4
 8003c6a:	42ab      	cmp	r3, r5
 8003c6c:	d30a      	bcc.n	8003c84 <__exponent+0x5e>
 8003c6e:	f10d 0309 	add.w	r3, sp, #9
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	42ac      	cmp	r4, r5
 8003c76:	bf88      	it	hi
 8003c78:	2300      	movhi	r3, #0
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	4403      	add	r3, r0
 8003c7e:	1a18      	subs	r0, r3, r0
 8003c80:	b003      	add	sp, #12
 8003c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c84:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003c88:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003c8c:	e7ed      	b.n	8003c6a <__exponent+0x44>
 8003c8e:	2330      	movs	r3, #48	@ 0x30
 8003c90:	3130      	adds	r1, #48	@ 0x30
 8003c92:	7083      	strb	r3, [r0, #2]
 8003c94:	70c1      	strb	r1, [r0, #3]
 8003c96:	1d03      	adds	r3, r0, #4
 8003c98:	e7f1      	b.n	8003c7e <__exponent+0x58>
	...

08003c9c <_printf_float>:
 8003c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca0:	b08d      	sub	sp, #52	@ 0x34
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003ca8:	4616      	mov	r6, r2
 8003caa:	461f      	mov	r7, r3
 8003cac:	4605      	mov	r5, r0
 8003cae:	f000 ff25 	bl	8004afc <_localeconv_r>
 8003cb2:	6803      	ldr	r3, [r0, #0]
 8003cb4:	9304      	str	r3, [sp, #16]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fc fada 	bl	8000270 <strlen>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8003cc0:	f8d8 3000 	ldr.w	r3, [r8]
 8003cc4:	9005      	str	r0, [sp, #20]
 8003cc6:	3307      	adds	r3, #7
 8003cc8:	f023 0307 	bic.w	r3, r3, #7
 8003ccc:	f103 0208 	add.w	r2, r3, #8
 8003cd0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003cd4:	f8d4 b000 	ldr.w	fp, [r4]
 8003cd8:	f8c8 2000 	str.w	r2, [r8]
 8003cdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003ce0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003ce4:	9307      	str	r3, [sp, #28]
 8003ce6:	f8cd 8018 	str.w	r8, [sp, #24]
 8003cea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cf2:	4b9c      	ldr	r3, [pc, #624]	@ (8003f64 <_printf_float+0x2c8>)
 8003cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf8:	f7fc ff18 	bl	8000b2c <__aeabi_dcmpun>
 8003cfc:	bb70      	cbnz	r0, 8003d5c <_printf_float+0xc0>
 8003cfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d02:	4b98      	ldr	r3, [pc, #608]	@ (8003f64 <_printf_float+0x2c8>)
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295
 8003d08:	f7fc fef2 	bl	8000af0 <__aeabi_dcmple>
 8003d0c:	bb30      	cbnz	r0, 8003d5c <_printf_float+0xc0>
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2300      	movs	r3, #0
 8003d12:	4640      	mov	r0, r8
 8003d14:	4649      	mov	r1, r9
 8003d16:	f7fc fee1 	bl	8000adc <__aeabi_dcmplt>
 8003d1a:	b110      	cbz	r0, 8003d22 <_printf_float+0x86>
 8003d1c:	232d      	movs	r3, #45	@ 0x2d
 8003d1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d22:	4a91      	ldr	r2, [pc, #580]	@ (8003f68 <_printf_float+0x2cc>)
 8003d24:	4b91      	ldr	r3, [pc, #580]	@ (8003f6c <_printf_float+0x2d0>)
 8003d26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003d2a:	bf8c      	ite	hi
 8003d2c:	4690      	movhi	r8, r2
 8003d2e:	4698      	movls	r8, r3
 8003d30:	2303      	movs	r3, #3
 8003d32:	6123      	str	r3, [r4, #16]
 8003d34:	f02b 0304 	bic.w	r3, fp, #4
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	f04f 0900 	mov.w	r9, #0
 8003d3e:	9700      	str	r7, [sp, #0]
 8003d40:	4633      	mov	r3, r6
 8003d42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003d44:	4621      	mov	r1, r4
 8003d46:	4628      	mov	r0, r5
 8003d48:	f000 f9d2 	bl	80040f0 <_printf_common>
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	f040 808d 	bne.w	8003e6c <_printf_float+0x1d0>
 8003d52:	f04f 30ff 	mov.w	r0, #4294967295
 8003d56:	b00d      	add	sp, #52	@ 0x34
 8003d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	464b      	mov	r3, r9
 8003d60:	4640      	mov	r0, r8
 8003d62:	4649      	mov	r1, r9
 8003d64:	f7fc fee2 	bl	8000b2c <__aeabi_dcmpun>
 8003d68:	b140      	cbz	r0, 8003d7c <_printf_float+0xe0>
 8003d6a:	464b      	mov	r3, r9
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bfbc      	itt	lt
 8003d70:	232d      	movlt	r3, #45	@ 0x2d
 8003d72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003d76:	4a7e      	ldr	r2, [pc, #504]	@ (8003f70 <_printf_float+0x2d4>)
 8003d78:	4b7e      	ldr	r3, [pc, #504]	@ (8003f74 <_printf_float+0x2d8>)
 8003d7a:	e7d4      	b.n	8003d26 <_printf_float+0x8a>
 8003d7c:	6863      	ldr	r3, [r4, #4]
 8003d7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003d82:	9206      	str	r2, [sp, #24]
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	d13b      	bne.n	8003e00 <_printf_float+0x164>
 8003d88:	2306      	movs	r3, #6
 8003d8a:	6063      	str	r3, [r4, #4]
 8003d8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003d90:	2300      	movs	r3, #0
 8003d92:	6022      	str	r2, [r4, #0]
 8003d94:	9303      	str	r3, [sp, #12]
 8003d96:	ab0a      	add	r3, sp, #40	@ 0x28
 8003d98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003d9c:	ab09      	add	r3, sp, #36	@ 0x24
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	6861      	ldr	r1, [r4, #4]
 8003da2:	ec49 8b10 	vmov	d0, r8, r9
 8003da6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003daa:	4628      	mov	r0, r5
 8003dac:	f7ff fed6 	bl	8003b5c <__cvt>
 8003db0:	9b06      	ldr	r3, [sp, #24]
 8003db2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003db4:	2b47      	cmp	r3, #71	@ 0x47
 8003db6:	4680      	mov	r8, r0
 8003db8:	d129      	bne.n	8003e0e <_printf_float+0x172>
 8003dba:	1cc8      	adds	r0, r1, #3
 8003dbc:	db02      	blt.n	8003dc4 <_printf_float+0x128>
 8003dbe:	6863      	ldr	r3, [r4, #4]
 8003dc0:	4299      	cmp	r1, r3
 8003dc2:	dd41      	ble.n	8003e48 <_printf_float+0x1ac>
 8003dc4:	f1aa 0a02 	sub.w	sl, sl, #2
 8003dc8:	fa5f fa8a 	uxtb.w	sl, sl
 8003dcc:	3901      	subs	r1, #1
 8003dce:	4652      	mov	r2, sl
 8003dd0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003dd4:	9109      	str	r1, [sp, #36]	@ 0x24
 8003dd6:	f7ff ff26 	bl	8003c26 <__exponent>
 8003dda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003ddc:	1813      	adds	r3, r2, r0
 8003dde:	2a01      	cmp	r2, #1
 8003de0:	4681      	mov	r9, r0
 8003de2:	6123      	str	r3, [r4, #16]
 8003de4:	dc02      	bgt.n	8003dec <_printf_float+0x150>
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	07d2      	lsls	r2, r2, #31
 8003dea:	d501      	bpl.n	8003df0 <_printf_float+0x154>
 8003dec:	3301      	adds	r3, #1
 8003dee:	6123      	str	r3, [r4, #16]
 8003df0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0a2      	beq.n	8003d3e <_printf_float+0xa2>
 8003df8:	232d      	movs	r3, #45	@ 0x2d
 8003dfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dfe:	e79e      	b.n	8003d3e <_printf_float+0xa2>
 8003e00:	9a06      	ldr	r2, [sp, #24]
 8003e02:	2a47      	cmp	r2, #71	@ 0x47
 8003e04:	d1c2      	bne.n	8003d8c <_printf_float+0xf0>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1c0      	bne.n	8003d8c <_printf_float+0xf0>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e7bd      	b.n	8003d8a <_printf_float+0xee>
 8003e0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e12:	d9db      	bls.n	8003dcc <_printf_float+0x130>
 8003e14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003e18:	d118      	bne.n	8003e4c <_printf_float+0x1b0>
 8003e1a:	2900      	cmp	r1, #0
 8003e1c:	6863      	ldr	r3, [r4, #4]
 8003e1e:	dd0b      	ble.n	8003e38 <_printf_float+0x19c>
 8003e20:	6121      	str	r1, [r4, #16]
 8003e22:	b913      	cbnz	r3, 8003e2a <_printf_float+0x18e>
 8003e24:	6822      	ldr	r2, [r4, #0]
 8003e26:	07d0      	lsls	r0, r2, #31
 8003e28:	d502      	bpl.n	8003e30 <_printf_float+0x194>
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	440b      	add	r3, r1
 8003e2e:	6123      	str	r3, [r4, #16]
 8003e30:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003e32:	f04f 0900 	mov.w	r9, #0
 8003e36:	e7db      	b.n	8003df0 <_printf_float+0x154>
 8003e38:	b913      	cbnz	r3, 8003e40 <_printf_float+0x1a4>
 8003e3a:	6822      	ldr	r2, [r4, #0]
 8003e3c:	07d2      	lsls	r2, r2, #31
 8003e3e:	d501      	bpl.n	8003e44 <_printf_float+0x1a8>
 8003e40:	3302      	adds	r3, #2
 8003e42:	e7f4      	b.n	8003e2e <_printf_float+0x192>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e7f2      	b.n	8003e2e <_printf_float+0x192>
 8003e48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e4e:	4299      	cmp	r1, r3
 8003e50:	db05      	blt.n	8003e5e <_printf_float+0x1c2>
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	6121      	str	r1, [r4, #16]
 8003e56:	07d8      	lsls	r0, r3, #31
 8003e58:	d5ea      	bpl.n	8003e30 <_printf_float+0x194>
 8003e5a:	1c4b      	adds	r3, r1, #1
 8003e5c:	e7e7      	b.n	8003e2e <_printf_float+0x192>
 8003e5e:	2900      	cmp	r1, #0
 8003e60:	bfd4      	ite	le
 8003e62:	f1c1 0202 	rsble	r2, r1, #2
 8003e66:	2201      	movgt	r2, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	e7e0      	b.n	8003e2e <_printf_float+0x192>
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	055a      	lsls	r2, r3, #21
 8003e70:	d407      	bmi.n	8003e82 <_printf_float+0x1e6>
 8003e72:	6923      	ldr	r3, [r4, #16]
 8003e74:	4642      	mov	r2, r8
 8003e76:	4631      	mov	r1, r6
 8003e78:	4628      	mov	r0, r5
 8003e7a:	47b8      	blx	r7
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	d12b      	bne.n	8003ed8 <_printf_float+0x23c>
 8003e80:	e767      	b.n	8003d52 <_printf_float+0xb6>
 8003e82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e86:	f240 80dd 	bls.w	8004044 <_printf_float+0x3a8>
 8003e8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2300      	movs	r3, #0
 8003e92:	f7fc fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e96:	2800      	cmp	r0, #0
 8003e98:	d033      	beq.n	8003f02 <_printf_float+0x266>
 8003e9a:	4a37      	ldr	r2, [pc, #220]	@ (8003f78 <_printf_float+0x2dc>)
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	4631      	mov	r1, r6
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	47b8      	blx	r7
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	f43f af54 	beq.w	8003d52 <_printf_float+0xb6>
 8003eaa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003eae:	4543      	cmp	r3, r8
 8003eb0:	db02      	blt.n	8003eb8 <_printf_float+0x21c>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	07d8      	lsls	r0, r3, #31
 8003eb6:	d50f      	bpl.n	8003ed8 <_printf_float+0x23c>
 8003eb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ebc:	4631      	mov	r1, r6
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	47b8      	blx	r7
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	f43f af45 	beq.w	8003d52 <_printf_float+0xb6>
 8003ec8:	f04f 0900 	mov.w	r9, #0
 8003ecc:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ed0:	f104 0a1a 	add.w	sl, r4, #26
 8003ed4:	45c8      	cmp	r8, r9
 8003ed6:	dc09      	bgt.n	8003eec <_printf_float+0x250>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	079b      	lsls	r3, r3, #30
 8003edc:	f100 8103 	bmi.w	80040e6 <_printf_float+0x44a>
 8003ee0:	68e0      	ldr	r0, [r4, #12]
 8003ee2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ee4:	4298      	cmp	r0, r3
 8003ee6:	bfb8      	it	lt
 8003ee8:	4618      	movlt	r0, r3
 8003eea:	e734      	b.n	8003d56 <_printf_float+0xba>
 8003eec:	2301      	movs	r3, #1
 8003eee:	4652      	mov	r2, sl
 8003ef0:	4631      	mov	r1, r6
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	47b8      	blx	r7
 8003ef6:	3001      	adds	r0, #1
 8003ef8:	f43f af2b 	beq.w	8003d52 <_printf_float+0xb6>
 8003efc:	f109 0901 	add.w	r9, r9, #1
 8003f00:	e7e8      	b.n	8003ed4 <_printf_float+0x238>
 8003f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	dc39      	bgt.n	8003f7c <_printf_float+0x2e0>
 8003f08:	4a1b      	ldr	r2, [pc, #108]	@ (8003f78 <_printf_float+0x2dc>)
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4631      	mov	r1, r6
 8003f0e:	4628      	mov	r0, r5
 8003f10:	47b8      	blx	r7
 8003f12:	3001      	adds	r0, #1
 8003f14:	f43f af1d 	beq.w	8003d52 <_printf_float+0xb6>
 8003f18:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003f1c:	ea59 0303 	orrs.w	r3, r9, r3
 8003f20:	d102      	bne.n	8003f28 <_printf_float+0x28c>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	07d9      	lsls	r1, r3, #31
 8003f26:	d5d7      	bpl.n	8003ed8 <_printf_float+0x23c>
 8003f28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f2c:	4631      	mov	r1, r6
 8003f2e:	4628      	mov	r0, r5
 8003f30:	47b8      	blx	r7
 8003f32:	3001      	adds	r0, #1
 8003f34:	f43f af0d 	beq.w	8003d52 <_printf_float+0xb6>
 8003f38:	f04f 0a00 	mov.w	sl, #0
 8003f3c:	f104 0b1a 	add.w	fp, r4, #26
 8003f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f42:	425b      	negs	r3, r3
 8003f44:	4553      	cmp	r3, sl
 8003f46:	dc01      	bgt.n	8003f4c <_printf_float+0x2b0>
 8003f48:	464b      	mov	r3, r9
 8003f4a:	e793      	b.n	8003e74 <_printf_float+0x1d8>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	465a      	mov	r2, fp
 8003f50:	4631      	mov	r1, r6
 8003f52:	4628      	mov	r0, r5
 8003f54:	47b8      	blx	r7
 8003f56:	3001      	adds	r0, #1
 8003f58:	f43f aefb 	beq.w	8003d52 <_printf_float+0xb6>
 8003f5c:	f10a 0a01 	add.w	sl, sl, #1
 8003f60:	e7ee      	b.n	8003f40 <_printf_float+0x2a4>
 8003f62:	bf00      	nop
 8003f64:	7fefffff 	.word	0x7fefffff
 8003f68:	08009214 	.word	0x08009214
 8003f6c:	08009210 	.word	0x08009210
 8003f70:	0800921c 	.word	0x0800921c
 8003f74:	08009218 	.word	0x08009218
 8003f78:	08009220 	.word	0x08009220
 8003f7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003f82:	4553      	cmp	r3, sl
 8003f84:	bfa8      	it	ge
 8003f86:	4653      	movge	r3, sl
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	4699      	mov	r9, r3
 8003f8c:	dc36      	bgt.n	8003ffc <_printf_float+0x360>
 8003f8e:	f04f 0b00 	mov.w	fp, #0
 8003f92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f96:	f104 021a 	add.w	r2, r4, #26
 8003f9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f9c:	9306      	str	r3, [sp, #24]
 8003f9e:	eba3 0309 	sub.w	r3, r3, r9
 8003fa2:	455b      	cmp	r3, fp
 8003fa4:	dc31      	bgt.n	800400a <_printf_float+0x36e>
 8003fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fa8:	459a      	cmp	sl, r3
 8003faa:	dc3a      	bgt.n	8004022 <_printf_float+0x386>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	07da      	lsls	r2, r3, #31
 8003fb0:	d437      	bmi.n	8004022 <_printf_float+0x386>
 8003fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fb4:	ebaa 0903 	sub.w	r9, sl, r3
 8003fb8:	9b06      	ldr	r3, [sp, #24]
 8003fba:	ebaa 0303 	sub.w	r3, sl, r3
 8003fbe:	4599      	cmp	r9, r3
 8003fc0:	bfa8      	it	ge
 8003fc2:	4699      	movge	r9, r3
 8003fc4:	f1b9 0f00 	cmp.w	r9, #0
 8003fc8:	dc33      	bgt.n	8004032 <_printf_float+0x396>
 8003fca:	f04f 0800 	mov.w	r8, #0
 8003fce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fd2:	f104 0b1a 	add.w	fp, r4, #26
 8003fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fd8:	ebaa 0303 	sub.w	r3, sl, r3
 8003fdc:	eba3 0309 	sub.w	r3, r3, r9
 8003fe0:	4543      	cmp	r3, r8
 8003fe2:	f77f af79 	ble.w	8003ed8 <_printf_float+0x23c>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	465a      	mov	r2, fp
 8003fea:	4631      	mov	r1, r6
 8003fec:	4628      	mov	r0, r5
 8003fee:	47b8      	blx	r7
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	f43f aeae 	beq.w	8003d52 <_printf_float+0xb6>
 8003ff6:	f108 0801 	add.w	r8, r8, #1
 8003ffa:	e7ec      	b.n	8003fd6 <_printf_float+0x33a>
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	4631      	mov	r1, r6
 8004000:	4628      	mov	r0, r5
 8004002:	47b8      	blx	r7
 8004004:	3001      	adds	r0, #1
 8004006:	d1c2      	bne.n	8003f8e <_printf_float+0x2f2>
 8004008:	e6a3      	b.n	8003d52 <_printf_float+0xb6>
 800400a:	2301      	movs	r3, #1
 800400c:	4631      	mov	r1, r6
 800400e:	4628      	mov	r0, r5
 8004010:	9206      	str	r2, [sp, #24]
 8004012:	47b8      	blx	r7
 8004014:	3001      	adds	r0, #1
 8004016:	f43f ae9c 	beq.w	8003d52 <_printf_float+0xb6>
 800401a:	9a06      	ldr	r2, [sp, #24]
 800401c:	f10b 0b01 	add.w	fp, fp, #1
 8004020:	e7bb      	b.n	8003f9a <_printf_float+0x2fe>
 8004022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004026:	4631      	mov	r1, r6
 8004028:	4628      	mov	r0, r5
 800402a:	47b8      	blx	r7
 800402c:	3001      	adds	r0, #1
 800402e:	d1c0      	bne.n	8003fb2 <_printf_float+0x316>
 8004030:	e68f      	b.n	8003d52 <_printf_float+0xb6>
 8004032:	9a06      	ldr	r2, [sp, #24]
 8004034:	464b      	mov	r3, r9
 8004036:	4442      	add	r2, r8
 8004038:	4631      	mov	r1, r6
 800403a:	4628      	mov	r0, r5
 800403c:	47b8      	blx	r7
 800403e:	3001      	adds	r0, #1
 8004040:	d1c3      	bne.n	8003fca <_printf_float+0x32e>
 8004042:	e686      	b.n	8003d52 <_printf_float+0xb6>
 8004044:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004048:	f1ba 0f01 	cmp.w	sl, #1
 800404c:	dc01      	bgt.n	8004052 <_printf_float+0x3b6>
 800404e:	07db      	lsls	r3, r3, #31
 8004050:	d536      	bpl.n	80040c0 <_printf_float+0x424>
 8004052:	2301      	movs	r3, #1
 8004054:	4642      	mov	r2, r8
 8004056:	4631      	mov	r1, r6
 8004058:	4628      	mov	r0, r5
 800405a:	47b8      	blx	r7
 800405c:	3001      	adds	r0, #1
 800405e:	f43f ae78 	beq.w	8003d52 <_printf_float+0xb6>
 8004062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004066:	4631      	mov	r1, r6
 8004068:	4628      	mov	r0, r5
 800406a:	47b8      	blx	r7
 800406c:	3001      	adds	r0, #1
 800406e:	f43f ae70 	beq.w	8003d52 <_printf_float+0xb6>
 8004072:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004076:	2200      	movs	r2, #0
 8004078:	2300      	movs	r3, #0
 800407a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800407e:	f7fc fd23 	bl	8000ac8 <__aeabi_dcmpeq>
 8004082:	b9c0      	cbnz	r0, 80040b6 <_printf_float+0x41a>
 8004084:	4653      	mov	r3, sl
 8004086:	f108 0201 	add.w	r2, r8, #1
 800408a:	4631      	mov	r1, r6
 800408c:	4628      	mov	r0, r5
 800408e:	47b8      	blx	r7
 8004090:	3001      	adds	r0, #1
 8004092:	d10c      	bne.n	80040ae <_printf_float+0x412>
 8004094:	e65d      	b.n	8003d52 <_printf_float+0xb6>
 8004096:	2301      	movs	r3, #1
 8004098:	465a      	mov	r2, fp
 800409a:	4631      	mov	r1, r6
 800409c:	4628      	mov	r0, r5
 800409e:	47b8      	blx	r7
 80040a0:	3001      	adds	r0, #1
 80040a2:	f43f ae56 	beq.w	8003d52 <_printf_float+0xb6>
 80040a6:	f108 0801 	add.w	r8, r8, #1
 80040aa:	45d0      	cmp	r8, sl
 80040ac:	dbf3      	blt.n	8004096 <_printf_float+0x3fa>
 80040ae:	464b      	mov	r3, r9
 80040b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80040b4:	e6df      	b.n	8003e76 <_printf_float+0x1da>
 80040b6:	f04f 0800 	mov.w	r8, #0
 80040ba:	f104 0b1a 	add.w	fp, r4, #26
 80040be:	e7f4      	b.n	80040aa <_printf_float+0x40e>
 80040c0:	2301      	movs	r3, #1
 80040c2:	4642      	mov	r2, r8
 80040c4:	e7e1      	b.n	800408a <_printf_float+0x3ee>
 80040c6:	2301      	movs	r3, #1
 80040c8:	464a      	mov	r2, r9
 80040ca:	4631      	mov	r1, r6
 80040cc:	4628      	mov	r0, r5
 80040ce:	47b8      	blx	r7
 80040d0:	3001      	adds	r0, #1
 80040d2:	f43f ae3e 	beq.w	8003d52 <_printf_float+0xb6>
 80040d6:	f108 0801 	add.w	r8, r8, #1
 80040da:	68e3      	ldr	r3, [r4, #12]
 80040dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80040de:	1a5b      	subs	r3, r3, r1
 80040e0:	4543      	cmp	r3, r8
 80040e2:	dcf0      	bgt.n	80040c6 <_printf_float+0x42a>
 80040e4:	e6fc      	b.n	8003ee0 <_printf_float+0x244>
 80040e6:	f04f 0800 	mov.w	r8, #0
 80040ea:	f104 0919 	add.w	r9, r4, #25
 80040ee:	e7f4      	b.n	80040da <_printf_float+0x43e>

080040f0 <_printf_common>:
 80040f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f4:	4616      	mov	r6, r2
 80040f6:	4698      	mov	r8, r3
 80040f8:	688a      	ldr	r2, [r1, #8]
 80040fa:	690b      	ldr	r3, [r1, #16]
 80040fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004100:	4293      	cmp	r3, r2
 8004102:	bfb8      	it	lt
 8004104:	4613      	movlt	r3, r2
 8004106:	6033      	str	r3, [r6, #0]
 8004108:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800410c:	4607      	mov	r7, r0
 800410e:	460c      	mov	r4, r1
 8004110:	b10a      	cbz	r2, 8004116 <_printf_common+0x26>
 8004112:	3301      	adds	r3, #1
 8004114:	6033      	str	r3, [r6, #0]
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	0699      	lsls	r1, r3, #26
 800411a:	bf42      	ittt	mi
 800411c:	6833      	ldrmi	r3, [r6, #0]
 800411e:	3302      	addmi	r3, #2
 8004120:	6033      	strmi	r3, [r6, #0]
 8004122:	6825      	ldr	r5, [r4, #0]
 8004124:	f015 0506 	ands.w	r5, r5, #6
 8004128:	d106      	bne.n	8004138 <_printf_common+0x48>
 800412a:	f104 0a19 	add.w	sl, r4, #25
 800412e:	68e3      	ldr	r3, [r4, #12]
 8004130:	6832      	ldr	r2, [r6, #0]
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	42ab      	cmp	r3, r5
 8004136:	dc26      	bgt.n	8004186 <_printf_common+0x96>
 8004138:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800413c:	6822      	ldr	r2, [r4, #0]
 800413e:	3b00      	subs	r3, #0
 8004140:	bf18      	it	ne
 8004142:	2301      	movne	r3, #1
 8004144:	0692      	lsls	r2, r2, #26
 8004146:	d42b      	bmi.n	80041a0 <_printf_common+0xb0>
 8004148:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800414c:	4641      	mov	r1, r8
 800414e:	4638      	mov	r0, r7
 8004150:	47c8      	blx	r9
 8004152:	3001      	adds	r0, #1
 8004154:	d01e      	beq.n	8004194 <_printf_common+0xa4>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	6922      	ldr	r2, [r4, #16]
 800415a:	f003 0306 	and.w	r3, r3, #6
 800415e:	2b04      	cmp	r3, #4
 8004160:	bf02      	ittt	eq
 8004162:	68e5      	ldreq	r5, [r4, #12]
 8004164:	6833      	ldreq	r3, [r6, #0]
 8004166:	1aed      	subeq	r5, r5, r3
 8004168:	68a3      	ldr	r3, [r4, #8]
 800416a:	bf0c      	ite	eq
 800416c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004170:	2500      	movne	r5, #0
 8004172:	4293      	cmp	r3, r2
 8004174:	bfc4      	itt	gt
 8004176:	1a9b      	subgt	r3, r3, r2
 8004178:	18ed      	addgt	r5, r5, r3
 800417a:	2600      	movs	r6, #0
 800417c:	341a      	adds	r4, #26
 800417e:	42b5      	cmp	r5, r6
 8004180:	d11a      	bne.n	80041b8 <_printf_common+0xc8>
 8004182:	2000      	movs	r0, #0
 8004184:	e008      	b.n	8004198 <_printf_common+0xa8>
 8004186:	2301      	movs	r3, #1
 8004188:	4652      	mov	r2, sl
 800418a:	4641      	mov	r1, r8
 800418c:	4638      	mov	r0, r7
 800418e:	47c8      	blx	r9
 8004190:	3001      	adds	r0, #1
 8004192:	d103      	bne.n	800419c <_printf_common+0xac>
 8004194:	f04f 30ff 	mov.w	r0, #4294967295
 8004198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800419c:	3501      	adds	r5, #1
 800419e:	e7c6      	b.n	800412e <_printf_common+0x3e>
 80041a0:	18e1      	adds	r1, r4, r3
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	2030      	movs	r0, #48	@ 0x30
 80041a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041aa:	4422      	add	r2, r4
 80041ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041b4:	3302      	adds	r3, #2
 80041b6:	e7c7      	b.n	8004148 <_printf_common+0x58>
 80041b8:	2301      	movs	r3, #1
 80041ba:	4622      	mov	r2, r4
 80041bc:	4641      	mov	r1, r8
 80041be:	4638      	mov	r0, r7
 80041c0:	47c8      	blx	r9
 80041c2:	3001      	adds	r0, #1
 80041c4:	d0e6      	beq.n	8004194 <_printf_common+0xa4>
 80041c6:	3601      	adds	r6, #1
 80041c8:	e7d9      	b.n	800417e <_printf_common+0x8e>
	...

080041cc <_printf_i>:
 80041cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041d0:	7e0f      	ldrb	r7, [r1, #24]
 80041d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041d4:	2f78      	cmp	r7, #120	@ 0x78
 80041d6:	4691      	mov	r9, r2
 80041d8:	4680      	mov	r8, r0
 80041da:	460c      	mov	r4, r1
 80041dc:	469a      	mov	sl, r3
 80041de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041e2:	d807      	bhi.n	80041f4 <_printf_i+0x28>
 80041e4:	2f62      	cmp	r7, #98	@ 0x62
 80041e6:	d80a      	bhi.n	80041fe <_printf_i+0x32>
 80041e8:	2f00      	cmp	r7, #0
 80041ea:	f000 80d1 	beq.w	8004390 <_printf_i+0x1c4>
 80041ee:	2f58      	cmp	r7, #88	@ 0x58
 80041f0:	f000 80b8 	beq.w	8004364 <_printf_i+0x198>
 80041f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041fc:	e03a      	b.n	8004274 <_printf_i+0xa8>
 80041fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004202:	2b15      	cmp	r3, #21
 8004204:	d8f6      	bhi.n	80041f4 <_printf_i+0x28>
 8004206:	a101      	add	r1, pc, #4	@ (adr r1, 800420c <_printf_i+0x40>)
 8004208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800420c:	08004265 	.word	0x08004265
 8004210:	08004279 	.word	0x08004279
 8004214:	080041f5 	.word	0x080041f5
 8004218:	080041f5 	.word	0x080041f5
 800421c:	080041f5 	.word	0x080041f5
 8004220:	080041f5 	.word	0x080041f5
 8004224:	08004279 	.word	0x08004279
 8004228:	080041f5 	.word	0x080041f5
 800422c:	080041f5 	.word	0x080041f5
 8004230:	080041f5 	.word	0x080041f5
 8004234:	080041f5 	.word	0x080041f5
 8004238:	08004377 	.word	0x08004377
 800423c:	080042a3 	.word	0x080042a3
 8004240:	08004331 	.word	0x08004331
 8004244:	080041f5 	.word	0x080041f5
 8004248:	080041f5 	.word	0x080041f5
 800424c:	08004399 	.word	0x08004399
 8004250:	080041f5 	.word	0x080041f5
 8004254:	080042a3 	.word	0x080042a3
 8004258:	080041f5 	.word	0x080041f5
 800425c:	080041f5 	.word	0x080041f5
 8004260:	08004339 	.word	0x08004339
 8004264:	6833      	ldr	r3, [r6, #0]
 8004266:	1d1a      	adds	r2, r3, #4
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6032      	str	r2, [r6, #0]
 800426c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004270:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004274:	2301      	movs	r3, #1
 8004276:	e09c      	b.n	80043b2 <_printf_i+0x1e6>
 8004278:	6833      	ldr	r3, [r6, #0]
 800427a:	6820      	ldr	r0, [r4, #0]
 800427c:	1d19      	adds	r1, r3, #4
 800427e:	6031      	str	r1, [r6, #0]
 8004280:	0606      	lsls	r6, r0, #24
 8004282:	d501      	bpl.n	8004288 <_printf_i+0xbc>
 8004284:	681d      	ldr	r5, [r3, #0]
 8004286:	e003      	b.n	8004290 <_printf_i+0xc4>
 8004288:	0645      	lsls	r5, r0, #25
 800428a:	d5fb      	bpl.n	8004284 <_printf_i+0xb8>
 800428c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004290:	2d00      	cmp	r5, #0
 8004292:	da03      	bge.n	800429c <_printf_i+0xd0>
 8004294:	232d      	movs	r3, #45	@ 0x2d
 8004296:	426d      	negs	r5, r5
 8004298:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800429c:	4858      	ldr	r0, [pc, #352]	@ (8004400 <_printf_i+0x234>)
 800429e:	230a      	movs	r3, #10
 80042a0:	e011      	b.n	80042c6 <_printf_i+0xfa>
 80042a2:	6821      	ldr	r1, [r4, #0]
 80042a4:	6833      	ldr	r3, [r6, #0]
 80042a6:	0608      	lsls	r0, r1, #24
 80042a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80042ac:	d402      	bmi.n	80042b4 <_printf_i+0xe8>
 80042ae:	0649      	lsls	r1, r1, #25
 80042b0:	bf48      	it	mi
 80042b2:	b2ad      	uxthmi	r5, r5
 80042b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80042b6:	4852      	ldr	r0, [pc, #328]	@ (8004400 <_printf_i+0x234>)
 80042b8:	6033      	str	r3, [r6, #0]
 80042ba:	bf14      	ite	ne
 80042bc:	230a      	movne	r3, #10
 80042be:	2308      	moveq	r3, #8
 80042c0:	2100      	movs	r1, #0
 80042c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042c6:	6866      	ldr	r6, [r4, #4]
 80042c8:	60a6      	str	r6, [r4, #8]
 80042ca:	2e00      	cmp	r6, #0
 80042cc:	db05      	blt.n	80042da <_printf_i+0x10e>
 80042ce:	6821      	ldr	r1, [r4, #0]
 80042d0:	432e      	orrs	r6, r5
 80042d2:	f021 0104 	bic.w	r1, r1, #4
 80042d6:	6021      	str	r1, [r4, #0]
 80042d8:	d04b      	beq.n	8004372 <_printf_i+0x1a6>
 80042da:	4616      	mov	r6, r2
 80042dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80042e0:	fb03 5711 	mls	r7, r3, r1, r5
 80042e4:	5dc7      	ldrb	r7, [r0, r7]
 80042e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042ea:	462f      	mov	r7, r5
 80042ec:	42bb      	cmp	r3, r7
 80042ee:	460d      	mov	r5, r1
 80042f0:	d9f4      	bls.n	80042dc <_printf_i+0x110>
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d10b      	bne.n	800430e <_printf_i+0x142>
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	07df      	lsls	r7, r3, #31
 80042fa:	d508      	bpl.n	800430e <_printf_i+0x142>
 80042fc:	6923      	ldr	r3, [r4, #16]
 80042fe:	6861      	ldr	r1, [r4, #4]
 8004300:	4299      	cmp	r1, r3
 8004302:	bfde      	ittt	le
 8004304:	2330      	movle	r3, #48	@ 0x30
 8004306:	f806 3c01 	strble.w	r3, [r6, #-1]
 800430a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800430e:	1b92      	subs	r2, r2, r6
 8004310:	6122      	str	r2, [r4, #16]
 8004312:	f8cd a000 	str.w	sl, [sp]
 8004316:	464b      	mov	r3, r9
 8004318:	aa03      	add	r2, sp, #12
 800431a:	4621      	mov	r1, r4
 800431c:	4640      	mov	r0, r8
 800431e:	f7ff fee7 	bl	80040f0 <_printf_common>
 8004322:	3001      	adds	r0, #1
 8004324:	d14a      	bne.n	80043bc <_printf_i+0x1f0>
 8004326:	f04f 30ff 	mov.w	r0, #4294967295
 800432a:	b004      	add	sp, #16
 800432c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	f043 0320 	orr.w	r3, r3, #32
 8004336:	6023      	str	r3, [r4, #0]
 8004338:	4832      	ldr	r0, [pc, #200]	@ (8004404 <_printf_i+0x238>)
 800433a:	2778      	movs	r7, #120	@ 0x78
 800433c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	6831      	ldr	r1, [r6, #0]
 8004344:	061f      	lsls	r7, r3, #24
 8004346:	f851 5b04 	ldr.w	r5, [r1], #4
 800434a:	d402      	bmi.n	8004352 <_printf_i+0x186>
 800434c:	065f      	lsls	r7, r3, #25
 800434e:	bf48      	it	mi
 8004350:	b2ad      	uxthmi	r5, r5
 8004352:	6031      	str	r1, [r6, #0]
 8004354:	07d9      	lsls	r1, r3, #31
 8004356:	bf44      	itt	mi
 8004358:	f043 0320 	orrmi.w	r3, r3, #32
 800435c:	6023      	strmi	r3, [r4, #0]
 800435e:	b11d      	cbz	r5, 8004368 <_printf_i+0x19c>
 8004360:	2310      	movs	r3, #16
 8004362:	e7ad      	b.n	80042c0 <_printf_i+0xf4>
 8004364:	4826      	ldr	r0, [pc, #152]	@ (8004400 <_printf_i+0x234>)
 8004366:	e7e9      	b.n	800433c <_printf_i+0x170>
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	f023 0320 	bic.w	r3, r3, #32
 800436e:	6023      	str	r3, [r4, #0]
 8004370:	e7f6      	b.n	8004360 <_printf_i+0x194>
 8004372:	4616      	mov	r6, r2
 8004374:	e7bd      	b.n	80042f2 <_printf_i+0x126>
 8004376:	6833      	ldr	r3, [r6, #0]
 8004378:	6825      	ldr	r5, [r4, #0]
 800437a:	6961      	ldr	r1, [r4, #20]
 800437c:	1d18      	adds	r0, r3, #4
 800437e:	6030      	str	r0, [r6, #0]
 8004380:	062e      	lsls	r6, r5, #24
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	d501      	bpl.n	800438a <_printf_i+0x1be>
 8004386:	6019      	str	r1, [r3, #0]
 8004388:	e002      	b.n	8004390 <_printf_i+0x1c4>
 800438a:	0668      	lsls	r0, r5, #25
 800438c:	d5fb      	bpl.n	8004386 <_printf_i+0x1ba>
 800438e:	8019      	strh	r1, [r3, #0]
 8004390:	2300      	movs	r3, #0
 8004392:	6123      	str	r3, [r4, #16]
 8004394:	4616      	mov	r6, r2
 8004396:	e7bc      	b.n	8004312 <_printf_i+0x146>
 8004398:	6833      	ldr	r3, [r6, #0]
 800439a:	1d1a      	adds	r2, r3, #4
 800439c:	6032      	str	r2, [r6, #0]
 800439e:	681e      	ldr	r6, [r3, #0]
 80043a0:	6862      	ldr	r2, [r4, #4]
 80043a2:	2100      	movs	r1, #0
 80043a4:	4630      	mov	r0, r6
 80043a6:	f7fb ff13 	bl	80001d0 <memchr>
 80043aa:	b108      	cbz	r0, 80043b0 <_printf_i+0x1e4>
 80043ac:	1b80      	subs	r0, r0, r6
 80043ae:	6060      	str	r0, [r4, #4]
 80043b0:	6863      	ldr	r3, [r4, #4]
 80043b2:	6123      	str	r3, [r4, #16]
 80043b4:	2300      	movs	r3, #0
 80043b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043ba:	e7aa      	b.n	8004312 <_printf_i+0x146>
 80043bc:	6923      	ldr	r3, [r4, #16]
 80043be:	4632      	mov	r2, r6
 80043c0:	4649      	mov	r1, r9
 80043c2:	4640      	mov	r0, r8
 80043c4:	47d0      	blx	sl
 80043c6:	3001      	adds	r0, #1
 80043c8:	d0ad      	beq.n	8004326 <_printf_i+0x15a>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	079b      	lsls	r3, r3, #30
 80043ce:	d413      	bmi.n	80043f8 <_printf_i+0x22c>
 80043d0:	68e0      	ldr	r0, [r4, #12]
 80043d2:	9b03      	ldr	r3, [sp, #12]
 80043d4:	4298      	cmp	r0, r3
 80043d6:	bfb8      	it	lt
 80043d8:	4618      	movlt	r0, r3
 80043da:	e7a6      	b.n	800432a <_printf_i+0x15e>
 80043dc:	2301      	movs	r3, #1
 80043de:	4632      	mov	r2, r6
 80043e0:	4649      	mov	r1, r9
 80043e2:	4640      	mov	r0, r8
 80043e4:	47d0      	blx	sl
 80043e6:	3001      	adds	r0, #1
 80043e8:	d09d      	beq.n	8004326 <_printf_i+0x15a>
 80043ea:	3501      	adds	r5, #1
 80043ec:	68e3      	ldr	r3, [r4, #12]
 80043ee:	9903      	ldr	r1, [sp, #12]
 80043f0:	1a5b      	subs	r3, r3, r1
 80043f2:	42ab      	cmp	r3, r5
 80043f4:	dcf2      	bgt.n	80043dc <_printf_i+0x210>
 80043f6:	e7eb      	b.n	80043d0 <_printf_i+0x204>
 80043f8:	2500      	movs	r5, #0
 80043fa:	f104 0619 	add.w	r6, r4, #25
 80043fe:	e7f5      	b.n	80043ec <_printf_i+0x220>
 8004400:	08009222 	.word	0x08009222
 8004404:	08009233 	.word	0x08009233

08004408 <_scanf_float>:
 8004408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440c:	b087      	sub	sp, #28
 800440e:	4691      	mov	r9, r2
 8004410:	9303      	str	r3, [sp, #12]
 8004412:	688b      	ldr	r3, [r1, #8]
 8004414:	1e5a      	subs	r2, r3, #1
 8004416:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800441a:	bf81      	itttt	hi
 800441c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004420:	eb03 0b05 	addhi.w	fp, r3, r5
 8004424:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004428:	608b      	strhi	r3, [r1, #8]
 800442a:	680b      	ldr	r3, [r1, #0]
 800442c:	460a      	mov	r2, r1
 800442e:	f04f 0500 	mov.w	r5, #0
 8004432:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004436:	f842 3b1c 	str.w	r3, [r2], #28
 800443a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800443e:	4680      	mov	r8, r0
 8004440:	460c      	mov	r4, r1
 8004442:	bf98      	it	ls
 8004444:	f04f 0b00 	movls.w	fp, #0
 8004448:	9201      	str	r2, [sp, #4]
 800444a:	4616      	mov	r6, r2
 800444c:	46aa      	mov	sl, r5
 800444e:	462f      	mov	r7, r5
 8004450:	9502      	str	r5, [sp, #8]
 8004452:	68a2      	ldr	r2, [r4, #8]
 8004454:	b15a      	cbz	r2, 800446e <_scanf_float+0x66>
 8004456:	f8d9 3000 	ldr.w	r3, [r9]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b4e      	cmp	r3, #78	@ 0x4e
 800445e:	d863      	bhi.n	8004528 <_scanf_float+0x120>
 8004460:	2b40      	cmp	r3, #64	@ 0x40
 8004462:	d83b      	bhi.n	80044dc <_scanf_float+0xd4>
 8004464:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004468:	b2c8      	uxtb	r0, r1
 800446a:	280e      	cmp	r0, #14
 800446c:	d939      	bls.n	80044e2 <_scanf_float+0xda>
 800446e:	b11f      	cbz	r7, 8004478 <_scanf_float+0x70>
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004476:	6023      	str	r3, [r4, #0]
 8004478:	f10a 3aff 	add.w	sl, sl, #4294967295
 800447c:	f1ba 0f01 	cmp.w	sl, #1
 8004480:	f200 8114 	bhi.w	80046ac <_scanf_float+0x2a4>
 8004484:	9b01      	ldr	r3, [sp, #4]
 8004486:	429e      	cmp	r6, r3
 8004488:	f200 8105 	bhi.w	8004696 <_scanf_float+0x28e>
 800448c:	2001      	movs	r0, #1
 800448e:	b007      	add	sp, #28
 8004490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004494:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004498:	2a0d      	cmp	r2, #13
 800449a:	d8e8      	bhi.n	800446e <_scanf_float+0x66>
 800449c:	a101      	add	r1, pc, #4	@ (adr r1, 80044a4 <_scanf_float+0x9c>)
 800449e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080045ed 	.word	0x080045ed
 80044a8:	0800446f 	.word	0x0800446f
 80044ac:	0800446f 	.word	0x0800446f
 80044b0:	0800446f 	.word	0x0800446f
 80044b4:	08004649 	.word	0x08004649
 80044b8:	08004623 	.word	0x08004623
 80044bc:	0800446f 	.word	0x0800446f
 80044c0:	0800446f 	.word	0x0800446f
 80044c4:	080045fb 	.word	0x080045fb
 80044c8:	0800446f 	.word	0x0800446f
 80044cc:	0800446f 	.word	0x0800446f
 80044d0:	0800446f 	.word	0x0800446f
 80044d4:	0800446f 	.word	0x0800446f
 80044d8:	080045b7 	.word	0x080045b7
 80044dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80044e0:	e7da      	b.n	8004498 <_scanf_float+0x90>
 80044e2:	290e      	cmp	r1, #14
 80044e4:	d8c3      	bhi.n	800446e <_scanf_float+0x66>
 80044e6:	a001      	add	r0, pc, #4	@ (adr r0, 80044ec <_scanf_float+0xe4>)
 80044e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80044ec:	080045a7 	.word	0x080045a7
 80044f0:	0800446f 	.word	0x0800446f
 80044f4:	080045a7 	.word	0x080045a7
 80044f8:	08004637 	.word	0x08004637
 80044fc:	0800446f 	.word	0x0800446f
 8004500:	08004549 	.word	0x08004549
 8004504:	0800458d 	.word	0x0800458d
 8004508:	0800458d 	.word	0x0800458d
 800450c:	0800458d 	.word	0x0800458d
 8004510:	0800458d 	.word	0x0800458d
 8004514:	0800458d 	.word	0x0800458d
 8004518:	0800458d 	.word	0x0800458d
 800451c:	0800458d 	.word	0x0800458d
 8004520:	0800458d 	.word	0x0800458d
 8004524:	0800458d 	.word	0x0800458d
 8004528:	2b6e      	cmp	r3, #110	@ 0x6e
 800452a:	d809      	bhi.n	8004540 <_scanf_float+0x138>
 800452c:	2b60      	cmp	r3, #96	@ 0x60
 800452e:	d8b1      	bhi.n	8004494 <_scanf_float+0x8c>
 8004530:	2b54      	cmp	r3, #84	@ 0x54
 8004532:	d07b      	beq.n	800462c <_scanf_float+0x224>
 8004534:	2b59      	cmp	r3, #89	@ 0x59
 8004536:	d19a      	bne.n	800446e <_scanf_float+0x66>
 8004538:	2d07      	cmp	r5, #7
 800453a:	d198      	bne.n	800446e <_scanf_float+0x66>
 800453c:	2508      	movs	r5, #8
 800453e:	e02f      	b.n	80045a0 <_scanf_float+0x198>
 8004540:	2b74      	cmp	r3, #116	@ 0x74
 8004542:	d073      	beq.n	800462c <_scanf_float+0x224>
 8004544:	2b79      	cmp	r3, #121	@ 0x79
 8004546:	e7f6      	b.n	8004536 <_scanf_float+0x12e>
 8004548:	6821      	ldr	r1, [r4, #0]
 800454a:	05c8      	lsls	r0, r1, #23
 800454c:	d51e      	bpl.n	800458c <_scanf_float+0x184>
 800454e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004552:	6021      	str	r1, [r4, #0]
 8004554:	3701      	adds	r7, #1
 8004556:	f1bb 0f00 	cmp.w	fp, #0
 800455a:	d003      	beq.n	8004564 <_scanf_float+0x15c>
 800455c:	3201      	adds	r2, #1
 800455e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004562:	60a2      	str	r2, [r4, #8]
 8004564:	68a3      	ldr	r3, [r4, #8]
 8004566:	3b01      	subs	r3, #1
 8004568:	60a3      	str	r3, [r4, #8]
 800456a:	6923      	ldr	r3, [r4, #16]
 800456c:	3301      	adds	r3, #1
 800456e:	6123      	str	r3, [r4, #16]
 8004570:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004574:	3b01      	subs	r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	f8c9 3004 	str.w	r3, [r9, #4]
 800457c:	f340 8082 	ble.w	8004684 <_scanf_float+0x27c>
 8004580:	f8d9 3000 	ldr.w	r3, [r9]
 8004584:	3301      	adds	r3, #1
 8004586:	f8c9 3000 	str.w	r3, [r9]
 800458a:	e762      	b.n	8004452 <_scanf_float+0x4a>
 800458c:	eb1a 0105 	adds.w	r1, sl, r5
 8004590:	f47f af6d 	bne.w	800446e <_scanf_float+0x66>
 8004594:	6822      	ldr	r2, [r4, #0]
 8004596:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800459a:	6022      	str	r2, [r4, #0]
 800459c:	460d      	mov	r5, r1
 800459e:	468a      	mov	sl, r1
 80045a0:	f806 3b01 	strb.w	r3, [r6], #1
 80045a4:	e7de      	b.n	8004564 <_scanf_float+0x15c>
 80045a6:	6822      	ldr	r2, [r4, #0]
 80045a8:	0610      	lsls	r0, r2, #24
 80045aa:	f57f af60 	bpl.w	800446e <_scanf_float+0x66>
 80045ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045b2:	6022      	str	r2, [r4, #0]
 80045b4:	e7f4      	b.n	80045a0 <_scanf_float+0x198>
 80045b6:	f1ba 0f00 	cmp.w	sl, #0
 80045ba:	d10c      	bne.n	80045d6 <_scanf_float+0x1ce>
 80045bc:	b977      	cbnz	r7, 80045dc <_scanf_float+0x1d4>
 80045be:	6822      	ldr	r2, [r4, #0]
 80045c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80045c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80045c8:	d108      	bne.n	80045dc <_scanf_float+0x1d4>
 80045ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80045ce:	6022      	str	r2, [r4, #0]
 80045d0:	f04f 0a01 	mov.w	sl, #1
 80045d4:	e7e4      	b.n	80045a0 <_scanf_float+0x198>
 80045d6:	f1ba 0f02 	cmp.w	sl, #2
 80045da:	d050      	beq.n	800467e <_scanf_float+0x276>
 80045dc:	2d01      	cmp	r5, #1
 80045de:	d002      	beq.n	80045e6 <_scanf_float+0x1de>
 80045e0:	2d04      	cmp	r5, #4
 80045e2:	f47f af44 	bne.w	800446e <_scanf_float+0x66>
 80045e6:	3501      	adds	r5, #1
 80045e8:	b2ed      	uxtb	r5, r5
 80045ea:	e7d9      	b.n	80045a0 <_scanf_float+0x198>
 80045ec:	f1ba 0f01 	cmp.w	sl, #1
 80045f0:	f47f af3d 	bne.w	800446e <_scanf_float+0x66>
 80045f4:	f04f 0a02 	mov.w	sl, #2
 80045f8:	e7d2      	b.n	80045a0 <_scanf_float+0x198>
 80045fa:	b975      	cbnz	r5, 800461a <_scanf_float+0x212>
 80045fc:	2f00      	cmp	r7, #0
 80045fe:	f47f af37 	bne.w	8004470 <_scanf_float+0x68>
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004608:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800460c:	f040 8103 	bne.w	8004816 <_scanf_float+0x40e>
 8004610:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004614:	6022      	str	r2, [r4, #0]
 8004616:	2501      	movs	r5, #1
 8004618:	e7c2      	b.n	80045a0 <_scanf_float+0x198>
 800461a:	2d03      	cmp	r5, #3
 800461c:	d0e3      	beq.n	80045e6 <_scanf_float+0x1de>
 800461e:	2d05      	cmp	r5, #5
 8004620:	e7df      	b.n	80045e2 <_scanf_float+0x1da>
 8004622:	2d02      	cmp	r5, #2
 8004624:	f47f af23 	bne.w	800446e <_scanf_float+0x66>
 8004628:	2503      	movs	r5, #3
 800462a:	e7b9      	b.n	80045a0 <_scanf_float+0x198>
 800462c:	2d06      	cmp	r5, #6
 800462e:	f47f af1e 	bne.w	800446e <_scanf_float+0x66>
 8004632:	2507      	movs	r5, #7
 8004634:	e7b4      	b.n	80045a0 <_scanf_float+0x198>
 8004636:	6822      	ldr	r2, [r4, #0]
 8004638:	0591      	lsls	r1, r2, #22
 800463a:	f57f af18 	bpl.w	800446e <_scanf_float+0x66>
 800463e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004642:	6022      	str	r2, [r4, #0]
 8004644:	9702      	str	r7, [sp, #8]
 8004646:	e7ab      	b.n	80045a0 <_scanf_float+0x198>
 8004648:	6822      	ldr	r2, [r4, #0]
 800464a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800464e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004652:	d005      	beq.n	8004660 <_scanf_float+0x258>
 8004654:	0550      	lsls	r0, r2, #21
 8004656:	f57f af0a 	bpl.w	800446e <_scanf_float+0x66>
 800465a:	2f00      	cmp	r7, #0
 800465c:	f000 80db 	beq.w	8004816 <_scanf_float+0x40e>
 8004660:	0591      	lsls	r1, r2, #22
 8004662:	bf58      	it	pl
 8004664:	9902      	ldrpl	r1, [sp, #8]
 8004666:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800466a:	bf58      	it	pl
 800466c:	1a79      	subpl	r1, r7, r1
 800466e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004672:	bf58      	it	pl
 8004674:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004678:	6022      	str	r2, [r4, #0]
 800467a:	2700      	movs	r7, #0
 800467c:	e790      	b.n	80045a0 <_scanf_float+0x198>
 800467e:	f04f 0a03 	mov.w	sl, #3
 8004682:	e78d      	b.n	80045a0 <_scanf_float+0x198>
 8004684:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004688:	4649      	mov	r1, r9
 800468a:	4640      	mov	r0, r8
 800468c:	4798      	blx	r3
 800468e:	2800      	cmp	r0, #0
 8004690:	f43f aedf 	beq.w	8004452 <_scanf_float+0x4a>
 8004694:	e6eb      	b.n	800446e <_scanf_float+0x66>
 8004696:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800469a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800469e:	464a      	mov	r2, r9
 80046a0:	4640      	mov	r0, r8
 80046a2:	4798      	blx	r3
 80046a4:	6923      	ldr	r3, [r4, #16]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	6123      	str	r3, [r4, #16]
 80046aa:	e6eb      	b.n	8004484 <_scanf_float+0x7c>
 80046ac:	1e6b      	subs	r3, r5, #1
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d824      	bhi.n	80046fc <_scanf_float+0x2f4>
 80046b2:	2d02      	cmp	r5, #2
 80046b4:	d836      	bhi.n	8004724 <_scanf_float+0x31c>
 80046b6:	9b01      	ldr	r3, [sp, #4]
 80046b8:	429e      	cmp	r6, r3
 80046ba:	f67f aee7 	bls.w	800448c <_scanf_float+0x84>
 80046be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80046c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046c6:	464a      	mov	r2, r9
 80046c8:	4640      	mov	r0, r8
 80046ca:	4798      	blx	r3
 80046cc:	6923      	ldr	r3, [r4, #16]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	6123      	str	r3, [r4, #16]
 80046d2:	e7f0      	b.n	80046b6 <_scanf_float+0x2ae>
 80046d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80046d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80046dc:	464a      	mov	r2, r9
 80046de:	4640      	mov	r0, r8
 80046e0:	4798      	blx	r3
 80046e2:	6923      	ldr	r3, [r4, #16]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	6123      	str	r3, [r4, #16]
 80046e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046ec:	fa5f fa8a 	uxtb.w	sl, sl
 80046f0:	f1ba 0f02 	cmp.w	sl, #2
 80046f4:	d1ee      	bne.n	80046d4 <_scanf_float+0x2cc>
 80046f6:	3d03      	subs	r5, #3
 80046f8:	b2ed      	uxtb	r5, r5
 80046fa:	1b76      	subs	r6, r6, r5
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	05da      	lsls	r2, r3, #23
 8004700:	d530      	bpl.n	8004764 <_scanf_float+0x35c>
 8004702:	055b      	lsls	r3, r3, #21
 8004704:	d511      	bpl.n	800472a <_scanf_float+0x322>
 8004706:	9b01      	ldr	r3, [sp, #4]
 8004708:	429e      	cmp	r6, r3
 800470a:	f67f aebf 	bls.w	800448c <_scanf_float+0x84>
 800470e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004712:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004716:	464a      	mov	r2, r9
 8004718:	4640      	mov	r0, r8
 800471a:	4798      	blx	r3
 800471c:	6923      	ldr	r3, [r4, #16]
 800471e:	3b01      	subs	r3, #1
 8004720:	6123      	str	r3, [r4, #16]
 8004722:	e7f0      	b.n	8004706 <_scanf_float+0x2fe>
 8004724:	46aa      	mov	sl, r5
 8004726:	46b3      	mov	fp, r6
 8004728:	e7de      	b.n	80046e8 <_scanf_float+0x2e0>
 800472a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800472e:	6923      	ldr	r3, [r4, #16]
 8004730:	2965      	cmp	r1, #101	@ 0x65
 8004732:	f103 33ff 	add.w	r3, r3, #4294967295
 8004736:	f106 35ff 	add.w	r5, r6, #4294967295
 800473a:	6123      	str	r3, [r4, #16]
 800473c:	d00c      	beq.n	8004758 <_scanf_float+0x350>
 800473e:	2945      	cmp	r1, #69	@ 0x45
 8004740:	d00a      	beq.n	8004758 <_scanf_float+0x350>
 8004742:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004746:	464a      	mov	r2, r9
 8004748:	4640      	mov	r0, r8
 800474a:	4798      	blx	r3
 800474c:	6923      	ldr	r3, [r4, #16]
 800474e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004752:	3b01      	subs	r3, #1
 8004754:	1eb5      	subs	r5, r6, #2
 8004756:	6123      	str	r3, [r4, #16]
 8004758:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800475c:	464a      	mov	r2, r9
 800475e:	4640      	mov	r0, r8
 8004760:	4798      	blx	r3
 8004762:	462e      	mov	r6, r5
 8004764:	6822      	ldr	r2, [r4, #0]
 8004766:	f012 0210 	ands.w	r2, r2, #16
 800476a:	d001      	beq.n	8004770 <_scanf_float+0x368>
 800476c:	2000      	movs	r0, #0
 800476e:	e68e      	b.n	800448e <_scanf_float+0x86>
 8004770:	7032      	strb	r2, [r6, #0]
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800477c:	d125      	bne.n	80047ca <_scanf_float+0x3c2>
 800477e:	9b02      	ldr	r3, [sp, #8]
 8004780:	429f      	cmp	r7, r3
 8004782:	d00a      	beq.n	800479a <_scanf_float+0x392>
 8004784:	1bda      	subs	r2, r3, r7
 8004786:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800478a:	429e      	cmp	r6, r3
 800478c:	bf28      	it	cs
 800478e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004792:	4922      	ldr	r1, [pc, #136]	@ (800481c <_scanf_float+0x414>)
 8004794:	4630      	mov	r0, r6
 8004796:	f000 f907 	bl	80049a8 <siprintf>
 800479a:	9901      	ldr	r1, [sp, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	4640      	mov	r0, r8
 80047a0:	f002 fc2e 	bl	8007000 <_strtod_r>
 80047a4:	9b03      	ldr	r3, [sp, #12]
 80047a6:	6821      	ldr	r1, [r4, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f011 0f02 	tst.w	r1, #2
 80047ae:	ec57 6b10 	vmov	r6, r7, d0
 80047b2:	f103 0204 	add.w	r2, r3, #4
 80047b6:	d015      	beq.n	80047e4 <_scanf_float+0x3dc>
 80047b8:	9903      	ldr	r1, [sp, #12]
 80047ba:	600a      	str	r2, [r1, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	e9c3 6700 	strd	r6, r7, [r3]
 80047c2:	68e3      	ldr	r3, [r4, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60e3      	str	r3, [r4, #12]
 80047c8:	e7d0      	b.n	800476c <_scanf_float+0x364>
 80047ca:	9b04      	ldr	r3, [sp, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0e4      	beq.n	800479a <_scanf_float+0x392>
 80047d0:	9905      	ldr	r1, [sp, #20]
 80047d2:	230a      	movs	r3, #10
 80047d4:	3101      	adds	r1, #1
 80047d6:	4640      	mov	r0, r8
 80047d8:	f002 fc92 	bl	8007100 <_strtol_r>
 80047dc:	9b04      	ldr	r3, [sp, #16]
 80047de:	9e05      	ldr	r6, [sp, #20]
 80047e0:	1ac2      	subs	r2, r0, r3
 80047e2:	e7d0      	b.n	8004786 <_scanf_float+0x37e>
 80047e4:	f011 0f04 	tst.w	r1, #4
 80047e8:	9903      	ldr	r1, [sp, #12]
 80047ea:	600a      	str	r2, [r1, #0]
 80047ec:	d1e6      	bne.n	80047bc <_scanf_float+0x3b4>
 80047ee:	681d      	ldr	r5, [r3, #0]
 80047f0:	4632      	mov	r2, r6
 80047f2:	463b      	mov	r3, r7
 80047f4:	4630      	mov	r0, r6
 80047f6:	4639      	mov	r1, r7
 80047f8:	f7fc f998 	bl	8000b2c <__aeabi_dcmpun>
 80047fc:	b128      	cbz	r0, 800480a <_scanf_float+0x402>
 80047fe:	4808      	ldr	r0, [pc, #32]	@ (8004820 <_scanf_float+0x418>)
 8004800:	f000 f9f4 	bl	8004bec <nanf>
 8004804:	ed85 0a00 	vstr	s0, [r5]
 8004808:	e7db      	b.n	80047c2 <_scanf_float+0x3ba>
 800480a:	4630      	mov	r0, r6
 800480c:	4639      	mov	r1, r7
 800480e:	f7fc f9eb 	bl	8000be8 <__aeabi_d2f>
 8004812:	6028      	str	r0, [r5, #0]
 8004814:	e7d5      	b.n	80047c2 <_scanf_float+0x3ba>
 8004816:	2700      	movs	r7, #0
 8004818:	e62e      	b.n	8004478 <_scanf_float+0x70>
 800481a:	bf00      	nop
 800481c:	08009244 	.word	0x08009244
 8004820:	08009385 	.word	0x08009385

08004824 <std>:
 8004824:	2300      	movs	r3, #0
 8004826:	b510      	push	{r4, lr}
 8004828:	4604      	mov	r4, r0
 800482a:	e9c0 3300 	strd	r3, r3, [r0]
 800482e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004832:	6083      	str	r3, [r0, #8]
 8004834:	8181      	strh	r1, [r0, #12]
 8004836:	6643      	str	r3, [r0, #100]	@ 0x64
 8004838:	81c2      	strh	r2, [r0, #14]
 800483a:	6183      	str	r3, [r0, #24]
 800483c:	4619      	mov	r1, r3
 800483e:	2208      	movs	r2, #8
 8004840:	305c      	adds	r0, #92	@ 0x5c
 8004842:	f000 f953 	bl	8004aec <memset>
 8004846:	4b0d      	ldr	r3, [pc, #52]	@ (800487c <std+0x58>)
 8004848:	6263      	str	r3, [r4, #36]	@ 0x24
 800484a:	4b0d      	ldr	r3, [pc, #52]	@ (8004880 <std+0x5c>)
 800484c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800484e:	4b0d      	ldr	r3, [pc, #52]	@ (8004884 <std+0x60>)
 8004850:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004852:	4b0d      	ldr	r3, [pc, #52]	@ (8004888 <std+0x64>)
 8004854:	6323      	str	r3, [r4, #48]	@ 0x30
 8004856:	4b0d      	ldr	r3, [pc, #52]	@ (800488c <std+0x68>)
 8004858:	6224      	str	r4, [r4, #32]
 800485a:	429c      	cmp	r4, r3
 800485c:	d006      	beq.n	800486c <std+0x48>
 800485e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004862:	4294      	cmp	r4, r2
 8004864:	d002      	beq.n	800486c <std+0x48>
 8004866:	33d0      	adds	r3, #208	@ 0xd0
 8004868:	429c      	cmp	r4, r3
 800486a:	d105      	bne.n	8004878 <std+0x54>
 800486c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004874:	f000 b9b6 	b.w	8004be4 <__retarget_lock_init_recursive>
 8004878:	bd10      	pop	{r4, pc}
 800487a:	bf00      	nop
 800487c:	080049ed 	.word	0x080049ed
 8004880:	08004a0f 	.word	0x08004a0f
 8004884:	08004a47 	.word	0x08004a47
 8004888:	08004a6b 	.word	0x08004a6b
 800488c:	20000310 	.word	0x20000310

08004890 <stdio_exit_handler>:
 8004890:	4a02      	ldr	r2, [pc, #8]	@ (800489c <stdio_exit_handler+0xc>)
 8004892:	4903      	ldr	r1, [pc, #12]	@ (80048a0 <stdio_exit_handler+0x10>)
 8004894:	4803      	ldr	r0, [pc, #12]	@ (80048a4 <stdio_exit_handler+0x14>)
 8004896:	f000 b869 	b.w	800496c <_fwalk_sglue>
 800489a:	bf00      	nop
 800489c:	2000000c 	.word	0x2000000c
 80048a0:	080074bd 	.word	0x080074bd
 80048a4:	2000001c 	.word	0x2000001c

080048a8 <cleanup_stdio>:
 80048a8:	6841      	ldr	r1, [r0, #4]
 80048aa:	4b0c      	ldr	r3, [pc, #48]	@ (80048dc <cleanup_stdio+0x34>)
 80048ac:	4299      	cmp	r1, r3
 80048ae:	b510      	push	{r4, lr}
 80048b0:	4604      	mov	r4, r0
 80048b2:	d001      	beq.n	80048b8 <cleanup_stdio+0x10>
 80048b4:	f002 fe02 	bl	80074bc <_fflush_r>
 80048b8:	68a1      	ldr	r1, [r4, #8]
 80048ba:	4b09      	ldr	r3, [pc, #36]	@ (80048e0 <cleanup_stdio+0x38>)
 80048bc:	4299      	cmp	r1, r3
 80048be:	d002      	beq.n	80048c6 <cleanup_stdio+0x1e>
 80048c0:	4620      	mov	r0, r4
 80048c2:	f002 fdfb 	bl	80074bc <_fflush_r>
 80048c6:	68e1      	ldr	r1, [r4, #12]
 80048c8:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <cleanup_stdio+0x3c>)
 80048ca:	4299      	cmp	r1, r3
 80048cc:	d004      	beq.n	80048d8 <cleanup_stdio+0x30>
 80048ce:	4620      	mov	r0, r4
 80048d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d4:	f002 bdf2 	b.w	80074bc <_fflush_r>
 80048d8:	bd10      	pop	{r4, pc}
 80048da:	bf00      	nop
 80048dc:	20000310 	.word	0x20000310
 80048e0:	20000378 	.word	0x20000378
 80048e4:	200003e0 	.word	0x200003e0

080048e8 <global_stdio_init.part.0>:
 80048e8:	b510      	push	{r4, lr}
 80048ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004918 <global_stdio_init.part.0+0x30>)
 80048ec:	4c0b      	ldr	r4, [pc, #44]	@ (800491c <global_stdio_init.part.0+0x34>)
 80048ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004920 <global_stdio_init.part.0+0x38>)
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	4620      	mov	r0, r4
 80048f4:	2200      	movs	r2, #0
 80048f6:	2104      	movs	r1, #4
 80048f8:	f7ff ff94 	bl	8004824 <std>
 80048fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004900:	2201      	movs	r2, #1
 8004902:	2109      	movs	r1, #9
 8004904:	f7ff ff8e 	bl	8004824 <std>
 8004908:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800490c:	2202      	movs	r2, #2
 800490e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004912:	2112      	movs	r1, #18
 8004914:	f7ff bf86 	b.w	8004824 <std>
 8004918:	20000448 	.word	0x20000448
 800491c:	20000310 	.word	0x20000310
 8004920:	08004891 	.word	0x08004891

08004924 <__sfp_lock_acquire>:
 8004924:	4801      	ldr	r0, [pc, #4]	@ (800492c <__sfp_lock_acquire+0x8>)
 8004926:	f000 b95e 	b.w	8004be6 <__retarget_lock_acquire_recursive>
 800492a:	bf00      	nop
 800492c:	20000451 	.word	0x20000451

08004930 <__sfp_lock_release>:
 8004930:	4801      	ldr	r0, [pc, #4]	@ (8004938 <__sfp_lock_release+0x8>)
 8004932:	f000 b959 	b.w	8004be8 <__retarget_lock_release_recursive>
 8004936:	bf00      	nop
 8004938:	20000451 	.word	0x20000451

0800493c <__sinit>:
 800493c:	b510      	push	{r4, lr}
 800493e:	4604      	mov	r4, r0
 8004940:	f7ff fff0 	bl	8004924 <__sfp_lock_acquire>
 8004944:	6a23      	ldr	r3, [r4, #32]
 8004946:	b11b      	cbz	r3, 8004950 <__sinit+0x14>
 8004948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800494c:	f7ff bff0 	b.w	8004930 <__sfp_lock_release>
 8004950:	4b04      	ldr	r3, [pc, #16]	@ (8004964 <__sinit+0x28>)
 8004952:	6223      	str	r3, [r4, #32]
 8004954:	4b04      	ldr	r3, [pc, #16]	@ (8004968 <__sinit+0x2c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f5      	bne.n	8004948 <__sinit+0xc>
 800495c:	f7ff ffc4 	bl	80048e8 <global_stdio_init.part.0>
 8004960:	e7f2      	b.n	8004948 <__sinit+0xc>
 8004962:	bf00      	nop
 8004964:	080048a9 	.word	0x080048a9
 8004968:	20000448 	.word	0x20000448

0800496c <_fwalk_sglue>:
 800496c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004970:	4607      	mov	r7, r0
 8004972:	4688      	mov	r8, r1
 8004974:	4614      	mov	r4, r2
 8004976:	2600      	movs	r6, #0
 8004978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800497c:	f1b9 0901 	subs.w	r9, r9, #1
 8004980:	d505      	bpl.n	800498e <_fwalk_sglue+0x22>
 8004982:	6824      	ldr	r4, [r4, #0]
 8004984:	2c00      	cmp	r4, #0
 8004986:	d1f7      	bne.n	8004978 <_fwalk_sglue+0xc>
 8004988:	4630      	mov	r0, r6
 800498a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800498e:	89ab      	ldrh	r3, [r5, #12]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d907      	bls.n	80049a4 <_fwalk_sglue+0x38>
 8004994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004998:	3301      	adds	r3, #1
 800499a:	d003      	beq.n	80049a4 <_fwalk_sglue+0x38>
 800499c:	4629      	mov	r1, r5
 800499e:	4638      	mov	r0, r7
 80049a0:	47c0      	blx	r8
 80049a2:	4306      	orrs	r6, r0
 80049a4:	3568      	adds	r5, #104	@ 0x68
 80049a6:	e7e9      	b.n	800497c <_fwalk_sglue+0x10>

080049a8 <siprintf>:
 80049a8:	b40e      	push	{r1, r2, r3}
 80049aa:	b510      	push	{r4, lr}
 80049ac:	b09d      	sub	sp, #116	@ 0x74
 80049ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 80049b0:	9002      	str	r0, [sp, #8]
 80049b2:	9006      	str	r0, [sp, #24]
 80049b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80049b8:	480a      	ldr	r0, [pc, #40]	@ (80049e4 <siprintf+0x3c>)
 80049ba:	9107      	str	r1, [sp, #28]
 80049bc:	9104      	str	r1, [sp, #16]
 80049be:	490a      	ldr	r1, [pc, #40]	@ (80049e8 <siprintf+0x40>)
 80049c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80049c4:	9105      	str	r1, [sp, #20]
 80049c6:	2400      	movs	r4, #0
 80049c8:	a902      	add	r1, sp, #8
 80049ca:	6800      	ldr	r0, [r0, #0]
 80049cc:	9301      	str	r3, [sp, #4]
 80049ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80049d0:	f002 fbf4 	bl	80071bc <_svfiprintf_r>
 80049d4:	9b02      	ldr	r3, [sp, #8]
 80049d6:	701c      	strb	r4, [r3, #0]
 80049d8:	b01d      	add	sp, #116	@ 0x74
 80049da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049de:	b003      	add	sp, #12
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20000018 	.word	0x20000018
 80049e8:	ffff0208 	.word	0xffff0208

080049ec <__sread>:
 80049ec:	b510      	push	{r4, lr}
 80049ee:	460c      	mov	r4, r1
 80049f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f4:	f000 f8a8 	bl	8004b48 <_read_r>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	bfab      	itete	ge
 80049fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80049fe:	89a3      	ldrhlt	r3, [r4, #12]
 8004a00:	181b      	addge	r3, r3, r0
 8004a02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a06:	bfac      	ite	ge
 8004a08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a0a:	81a3      	strhlt	r3, [r4, #12]
 8004a0c:	bd10      	pop	{r4, pc}

08004a0e <__swrite>:
 8004a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a12:	461f      	mov	r7, r3
 8004a14:	898b      	ldrh	r3, [r1, #12]
 8004a16:	05db      	lsls	r3, r3, #23
 8004a18:	4605      	mov	r5, r0
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	4616      	mov	r6, r2
 8004a1e:	d505      	bpl.n	8004a2c <__swrite+0x1e>
 8004a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a24:	2302      	movs	r3, #2
 8004a26:	2200      	movs	r2, #0
 8004a28:	f000 f87c 	bl	8004b24 <_lseek_r>
 8004a2c:	89a3      	ldrh	r3, [r4, #12]
 8004a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a36:	81a3      	strh	r3, [r4, #12]
 8004a38:	4632      	mov	r2, r6
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a42:	f000 b893 	b.w	8004b6c <_write_r>

08004a46 <__sseek>:
 8004a46:	b510      	push	{r4, lr}
 8004a48:	460c      	mov	r4, r1
 8004a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a4e:	f000 f869 	bl	8004b24 <_lseek_r>
 8004a52:	1c43      	adds	r3, r0, #1
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	bf15      	itete	ne
 8004a58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a62:	81a3      	strheq	r3, [r4, #12]
 8004a64:	bf18      	it	ne
 8004a66:	81a3      	strhne	r3, [r4, #12]
 8004a68:	bd10      	pop	{r4, pc}

08004a6a <__sclose>:
 8004a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a6e:	f000 b849 	b.w	8004b04 <_close_r>

08004a72 <_vsniprintf_r>:
 8004a72:	b530      	push	{r4, r5, lr}
 8004a74:	4614      	mov	r4, r2
 8004a76:	2c00      	cmp	r4, #0
 8004a78:	b09b      	sub	sp, #108	@ 0x6c
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	da05      	bge.n	8004a8c <_vsniprintf_r+0x1a>
 8004a80:	238b      	movs	r3, #139	@ 0x8b
 8004a82:	6003      	str	r3, [r0, #0]
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295
 8004a88:	b01b      	add	sp, #108	@ 0x6c
 8004a8a:	bd30      	pop	{r4, r5, pc}
 8004a8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004a90:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	9319      	str	r3, [sp, #100]	@ 0x64
 8004a9a:	bf14      	ite	ne
 8004a9c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004aa0:	4623      	moveq	r3, r4
 8004aa2:	9302      	str	r3, [sp, #8]
 8004aa4:	9305      	str	r3, [sp, #20]
 8004aa6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004aaa:	9100      	str	r1, [sp, #0]
 8004aac:	9104      	str	r1, [sp, #16]
 8004aae:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004ab2:	4669      	mov	r1, sp
 8004ab4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8004ab6:	f002 fb81 	bl	80071bc <_svfiprintf_r>
 8004aba:	1c43      	adds	r3, r0, #1
 8004abc:	bfbc      	itt	lt
 8004abe:	238b      	movlt	r3, #139	@ 0x8b
 8004ac0:	602b      	strlt	r3, [r5, #0]
 8004ac2:	2c00      	cmp	r4, #0
 8004ac4:	d0e0      	beq.n	8004a88 <_vsniprintf_r+0x16>
 8004ac6:	9b00      	ldr	r3, [sp, #0]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
 8004acc:	e7dc      	b.n	8004a88 <_vsniprintf_r+0x16>
	...

08004ad0 <vsniprintf>:
 8004ad0:	b507      	push	{r0, r1, r2, lr}
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	460a      	mov	r2, r1
 8004ad8:	4601      	mov	r1, r0
 8004ada:	4803      	ldr	r0, [pc, #12]	@ (8004ae8 <vsniprintf+0x18>)
 8004adc:	6800      	ldr	r0, [r0, #0]
 8004ade:	f7ff ffc8 	bl	8004a72 <_vsniprintf_r>
 8004ae2:	b003      	add	sp, #12
 8004ae4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ae8:	20000018 	.word	0x20000018

08004aec <memset>:
 8004aec:	4402      	add	r2, r0
 8004aee:	4603      	mov	r3, r0
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d100      	bne.n	8004af6 <memset+0xa>
 8004af4:	4770      	bx	lr
 8004af6:	f803 1b01 	strb.w	r1, [r3], #1
 8004afa:	e7f9      	b.n	8004af0 <memset+0x4>

08004afc <_localeconv_r>:
 8004afc:	4800      	ldr	r0, [pc, #0]	@ (8004b00 <_localeconv_r+0x4>)
 8004afe:	4770      	bx	lr
 8004b00:	20000158 	.word	0x20000158

08004b04 <_close_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	4d06      	ldr	r5, [pc, #24]	@ (8004b20 <_close_r+0x1c>)
 8004b08:	2300      	movs	r3, #0
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	602b      	str	r3, [r5, #0]
 8004b10:	f7fd f81b 	bl	8001b4a <_close>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	d102      	bne.n	8004b1e <_close_r+0x1a>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	b103      	cbz	r3, 8004b1e <_close_r+0x1a>
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	bd38      	pop	{r3, r4, r5, pc}
 8004b20:	2000044c 	.word	0x2000044c

08004b24 <_lseek_r>:
 8004b24:	b538      	push	{r3, r4, r5, lr}
 8004b26:	4d07      	ldr	r5, [pc, #28]	@ (8004b44 <_lseek_r+0x20>)
 8004b28:	4604      	mov	r4, r0
 8004b2a:	4608      	mov	r0, r1
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	2200      	movs	r2, #0
 8004b30:	602a      	str	r2, [r5, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	f7fd f830 	bl	8001b98 <_lseek>
 8004b38:	1c43      	adds	r3, r0, #1
 8004b3a:	d102      	bne.n	8004b42 <_lseek_r+0x1e>
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	b103      	cbz	r3, 8004b42 <_lseek_r+0x1e>
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	bd38      	pop	{r3, r4, r5, pc}
 8004b44:	2000044c 	.word	0x2000044c

08004b48 <_read_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	4d07      	ldr	r5, [pc, #28]	@ (8004b68 <_read_r+0x20>)
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	4608      	mov	r0, r1
 8004b50:	4611      	mov	r1, r2
 8004b52:	2200      	movs	r2, #0
 8004b54:	602a      	str	r2, [r5, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	f7fc ffbe 	bl	8001ad8 <_read>
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	d102      	bne.n	8004b66 <_read_r+0x1e>
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	b103      	cbz	r3, 8004b66 <_read_r+0x1e>
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
 8004b68:	2000044c 	.word	0x2000044c

08004b6c <_write_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4d07      	ldr	r5, [pc, #28]	@ (8004b8c <_write_r+0x20>)
 8004b70:	4604      	mov	r4, r0
 8004b72:	4608      	mov	r0, r1
 8004b74:	4611      	mov	r1, r2
 8004b76:	2200      	movs	r2, #0
 8004b78:	602a      	str	r2, [r5, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f7fc ffc9 	bl	8001b12 <_write>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d102      	bne.n	8004b8a <_write_r+0x1e>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	b103      	cbz	r3, 8004b8a <_write_r+0x1e>
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	2000044c 	.word	0x2000044c

08004b90 <__errno>:
 8004b90:	4b01      	ldr	r3, [pc, #4]	@ (8004b98 <__errno+0x8>)
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000018 	.word	0x20000018

08004b9c <__libc_init_array>:
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	4d0d      	ldr	r5, [pc, #52]	@ (8004bd4 <__libc_init_array+0x38>)
 8004ba0:	4c0d      	ldr	r4, [pc, #52]	@ (8004bd8 <__libc_init_array+0x3c>)
 8004ba2:	1b64      	subs	r4, r4, r5
 8004ba4:	10a4      	asrs	r4, r4, #2
 8004ba6:	2600      	movs	r6, #0
 8004ba8:	42a6      	cmp	r6, r4
 8004baa:	d109      	bne.n	8004bc0 <__libc_init_array+0x24>
 8004bac:	4d0b      	ldr	r5, [pc, #44]	@ (8004bdc <__libc_init_array+0x40>)
 8004bae:	4c0c      	ldr	r4, [pc, #48]	@ (8004be0 <__libc_init_array+0x44>)
 8004bb0:	f004 fad4 	bl	800915c <_init>
 8004bb4:	1b64      	subs	r4, r4, r5
 8004bb6:	10a4      	asrs	r4, r4, #2
 8004bb8:	2600      	movs	r6, #0
 8004bba:	42a6      	cmp	r6, r4
 8004bbc:	d105      	bne.n	8004bca <__libc_init_array+0x2e>
 8004bbe:	bd70      	pop	{r4, r5, r6, pc}
 8004bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bc4:	4798      	blx	r3
 8004bc6:	3601      	adds	r6, #1
 8004bc8:	e7ee      	b.n	8004ba8 <__libc_init_array+0xc>
 8004bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bce:	4798      	blx	r3
 8004bd0:	3601      	adds	r6, #1
 8004bd2:	e7f2      	b.n	8004bba <__libc_init_array+0x1e>
 8004bd4:	08009688 	.word	0x08009688
 8004bd8:	08009688 	.word	0x08009688
 8004bdc:	08009688 	.word	0x08009688
 8004be0:	0800968c 	.word	0x0800968c

08004be4 <__retarget_lock_init_recursive>:
 8004be4:	4770      	bx	lr

08004be6 <__retarget_lock_acquire_recursive>:
 8004be6:	4770      	bx	lr

08004be8 <__retarget_lock_release_recursive>:
 8004be8:	4770      	bx	lr
	...

08004bec <nanf>:
 8004bec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004bf4 <nanf+0x8>
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	7fc00000 	.word	0x7fc00000

08004bf8 <quorem>:
 8004bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfc:	6903      	ldr	r3, [r0, #16]
 8004bfe:	690c      	ldr	r4, [r1, #16]
 8004c00:	42a3      	cmp	r3, r4
 8004c02:	4607      	mov	r7, r0
 8004c04:	db7e      	blt.n	8004d04 <quorem+0x10c>
 8004c06:	3c01      	subs	r4, #1
 8004c08:	f101 0814 	add.w	r8, r1, #20
 8004c0c:	00a3      	lsls	r3, r4, #2
 8004c0e:	f100 0514 	add.w	r5, r0, #20
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c18:	9301      	str	r3, [sp, #4]
 8004c1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c22:	3301      	adds	r3, #1
 8004c24:	429a      	cmp	r2, r3
 8004c26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c2e:	d32e      	bcc.n	8004c8e <quorem+0x96>
 8004c30:	f04f 0a00 	mov.w	sl, #0
 8004c34:	46c4      	mov	ip, r8
 8004c36:	46ae      	mov	lr, r5
 8004c38:	46d3      	mov	fp, sl
 8004c3a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004c3e:	b298      	uxth	r0, r3
 8004c40:	fb06 a000 	mla	r0, r6, r0, sl
 8004c44:	0c02      	lsrs	r2, r0, #16
 8004c46:	0c1b      	lsrs	r3, r3, #16
 8004c48:	fb06 2303 	mla	r3, r6, r3, r2
 8004c4c:	f8de 2000 	ldr.w	r2, [lr]
 8004c50:	b280      	uxth	r0, r0
 8004c52:	b292      	uxth	r2, r2
 8004c54:	1a12      	subs	r2, r2, r0
 8004c56:	445a      	add	r2, fp
 8004c58:	f8de 0000 	ldr.w	r0, [lr]
 8004c5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004c66:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004c6a:	b292      	uxth	r2, r2
 8004c6c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004c70:	45e1      	cmp	r9, ip
 8004c72:	f84e 2b04 	str.w	r2, [lr], #4
 8004c76:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004c7a:	d2de      	bcs.n	8004c3a <quorem+0x42>
 8004c7c:	9b00      	ldr	r3, [sp, #0]
 8004c7e:	58eb      	ldr	r3, [r5, r3]
 8004c80:	b92b      	cbnz	r3, 8004c8e <quorem+0x96>
 8004c82:	9b01      	ldr	r3, [sp, #4]
 8004c84:	3b04      	subs	r3, #4
 8004c86:	429d      	cmp	r5, r3
 8004c88:	461a      	mov	r2, r3
 8004c8a:	d32f      	bcc.n	8004cec <quorem+0xf4>
 8004c8c:	613c      	str	r4, [r7, #16]
 8004c8e:	4638      	mov	r0, r7
 8004c90:	f001 f9c6 	bl	8006020 <__mcmp>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	db25      	blt.n	8004ce4 <quorem+0xec>
 8004c98:	4629      	mov	r1, r5
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ca0:	f8d1 c000 	ldr.w	ip, [r1]
 8004ca4:	fa1f fe82 	uxth.w	lr, r2
 8004ca8:	fa1f f38c 	uxth.w	r3, ip
 8004cac:	eba3 030e 	sub.w	r3, r3, lr
 8004cb0:	4403      	add	r3, r0
 8004cb2:	0c12      	lsrs	r2, r2, #16
 8004cb4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004cb8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cc2:	45c1      	cmp	r9, r8
 8004cc4:	f841 3b04 	str.w	r3, [r1], #4
 8004cc8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004ccc:	d2e6      	bcs.n	8004c9c <quorem+0xa4>
 8004cce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cd6:	b922      	cbnz	r2, 8004ce2 <quorem+0xea>
 8004cd8:	3b04      	subs	r3, #4
 8004cda:	429d      	cmp	r5, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	d30b      	bcc.n	8004cf8 <quorem+0x100>
 8004ce0:	613c      	str	r4, [r7, #16]
 8004ce2:	3601      	adds	r6, #1
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	b003      	add	sp, #12
 8004ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	3b04      	subs	r3, #4
 8004cf0:	2a00      	cmp	r2, #0
 8004cf2:	d1cb      	bne.n	8004c8c <quorem+0x94>
 8004cf4:	3c01      	subs	r4, #1
 8004cf6:	e7c6      	b.n	8004c86 <quorem+0x8e>
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	3b04      	subs	r3, #4
 8004cfc:	2a00      	cmp	r2, #0
 8004cfe:	d1ef      	bne.n	8004ce0 <quorem+0xe8>
 8004d00:	3c01      	subs	r4, #1
 8004d02:	e7ea      	b.n	8004cda <quorem+0xe2>
 8004d04:	2000      	movs	r0, #0
 8004d06:	e7ee      	b.n	8004ce6 <quorem+0xee>

08004d08 <_dtoa_r>:
 8004d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d0c:	69c7      	ldr	r7, [r0, #28]
 8004d0e:	b097      	sub	sp, #92	@ 0x5c
 8004d10:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004d14:	ec55 4b10 	vmov	r4, r5, d0
 8004d18:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004d1a:	9107      	str	r1, [sp, #28]
 8004d1c:	4681      	mov	r9, r0
 8004d1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004d20:	9311      	str	r3, [sp, #68]	@ 0x44
 8004d22:	b97f      	cbnz	r7, 8004d44 <_dtoa_r+0x3c>
 8004d24:	2010      	movs	r0, #16
 8004d26:	f000 fe09 	bl	800593c <malloc>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	f8c9 001c 	str.w	r0, [r9, #28]
 8004d30:	b920      	cbnz	r0, 8004d3c <_dtoa_r+0x34>
 8004d32:	4ba9      	ldr	r3, [pc, #676]	@ (8004fd8 <_dtoa_r+0x2d0>)
 8004d34:	21ef      	movs	r1, #239	@ 0xef
 8004d36:	48a9      	ldr	r0, [pc, #676]	@ (8004fdc <_dtoa_r+0x2d4>)
 8004d38:	f002 fc3a 	bl	80075b0 <__assert_func>
 8004d3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004d40:	6007      	str	r7, [r0, #0]
 8004d42:	60c7      	str	r7, [r0, #12]
 8004d44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004d48:	6819      	ldr	r1, [r3, #0]
 8004d4a:	b159      	cbz	r1, 8004d64 <_dtoa_r+0x5c>
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	604a      	str	r2, [r1, #4]
 8004d50:	2301      	movs	r3, #1
 8004d52:	4093      	lsls	r3, r2
 8004d54:	608b      	str	r3, [r1, #8]
 8004d56:	4648      	mov	r0, r9
 8004d58:	f000 fee6 	bl	8005b28 <_Bfree>
 8004d5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	1e2b      	subs	r3, r5, #0
 8004d66:	bfb9      	ittee	lt
 8004d68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004d6c:	9305      	strlt	r3, [sp, #20]
 8004d6e:	2300      	movge	r3, #0
 8004d70:	6033      	strge	r3, [r6, #0]
 8004d72:	9f05      	ldr	r7, [sp, #20]
 8004d74:	4b9a      	ldr	r3, [pc, #616]	@ (8004fe0 <_dtoa_r+0x2d8>)
 8004d76:	bfbc      	itt	lt
 8004d78:	2201      	movlt	r2, #1
 8004d7a:	6032      	strlt	r2, [r6, #0]
 8004d7c:	43bb      	bics	r3, r7
 8004d7e:	d112      	bne.n	8004da6 <_dtoa_r+0x9e>
 8004d80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004d82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d8c:	4323      	orrs	r3, r4
 8004d8e:	f000 855a 	beq.w	8005846 <_dtoa_r+0xb3e>
 8004d92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d94:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004ff4 <_dtoa_r+0x2ec>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 855c 	beq.w	8005856 <_dtoa_r+0xb4e>
 8004d9e:	f10a 0303 	add.w	r3, sl, #3
 8004da2:	f000 bd56 	b.w	8005852 <_dtoa_r+0xb4a>
 8004da6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004daa:	2200      	movs	r2, #0
 8004dac:	ec51 0b17 	vmov	r0, r1, d7
 8004db0:	2300      	movs	r3, #0
 8004db2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004db6:	f7fb fe87 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dba:	4680      	mov	r8, r0
 8004dbc:	b158      	cbz	r0, 8004dd6 <_dtoa_r+0xce>
 8004dbe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004dc6:	b113      	cbz	r3, 8004dce <_dtoa_r+0xc6>
 8004dc8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004dca:	4b86      	ldr	r3, [pc, #536]	@ (8004fe4 <_dtoa_r+0x2dc>)
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004ff8 <_dtoa_r+0x2f0>
 8004dd2:	f000 bd40 	b.w	8005856 <_dtoa_r+0xb4e>
 8004dd6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004dda:	aa14      	add	r2, sp, #80	@ 0x50
 8004ddc:	a915      	add	r1, sp, #84	@ 0x54
 8004dde:	4648      	mov	r0, r9
 8004de0:	f001 fa3e 	bl	8006260 <__d2b>
 8004de4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004de8:	9002      	str	r0, [sp, #8]
 8004dea:	2e00      	cmp	r6, #0
 8004dec:	d078      	beq.n	8004ee0 <_dtoa_r+0x1d8>
 8004dee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004df0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004df8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004dfc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004e00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004e04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004e08:	4619      	mov	r1, r3
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	4b76      	ldr	r3, [pc, #472]	@ (8004fe8 <_dtoa_r+0x2e0>)
 8004e0e:	f7fb fa3b 	bl	8000288 <__aeabi_dsub>
 8004e12:	a36b      	add	r3, pc, #428	@ (adr r3, 8004fc0 <_dtoa_r+0x2b8>)
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f7fb fbee 	bl	80005f8 <__aeabi_dmul>
 8004e1c:	a36a      	add	r3, pc, #424	@ (adr r3, 8004fc8 <_dtoa_r+0x2c0>)
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	f7fb fa33 	bl	800028c <__adddf3>
 8004e26:	4604      	mov	r4, r0
 8004e28:	4630      	mov	r0, r6
 8004e2a:	460d      	mov	r5, r1
 8004e2c:	f7fb fb7a 	bl	8000524 <__aeabi_i2d>
 8004e30:	a367      	add	r3, pc, #412	@ (adr r3, 8004fd0 <_dtoa_r+0x2c8>)
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	f7fb fbdf 	bl	80005f8 <__aeabi_dmul>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4620      	mov	r0, r4
 8004e40:	4629      	mov	r1, r5
 8004e42:	f7fb fa23 	bl	800028c <__adddf3>
 8004e46:	4604      	mov	r4, r0
 8004e48:	460d      	mov	r5, r1
 8004e4a:	f7fb fe85 	bl	8000b58 <__aeabi_d2iz>
 8004e4e:	2200      	movs	r2, #0
 8004e50:	4607      	mov	r7, r0
 8004e52:	2300      	movs	r3, #0
 8004e54:	4620      	mov	r0, r4
 8004e56:	4629      	mov	r1, r5
 8004e58:	f7fb fe40 	bl	8000adc <__aeabi_dcmplt>
 8004e5c:	b140      	cbz	r0, 8004e70 <_dtoa_r+0x168>
 8004e5e:	4638      	mov	r0, r7
 8004e60:	f7fb fb60 	bl	8000524 <__aeabi_i2d>
 8004e64:	4622      	mov	r2, r4
 8004e66:	462b      	mov	r3, r5
 8004e68:	f7fb fe2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e6c:	b900      	cbnz	r0, 8004e70 <_dtoa_r+0x168>
 8004e6e:	3f01      	subs	r7, #1
 8004e70:	2f16      	cmp	r7, #22
 8004e72:	d852      	bhi.n	8004f1a <_dtoa_r+0x212>
 8004e74:	4b5d      	ldr	r3, [pc, #372]	@ (8004fec <_dtoa_r+0x2e4>)
 8004e76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004e82:	f7fb fe2b 	bl	8000adc <__aeabi_dcmplt>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d049      	beq.n	8004f1e <_dtoa_r+0x216>
 8004e8a:	3f01      	subs	r7, #1
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8004e90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e92:	1b9b      	subs	r3, r3, r6
 8004e94:	1e5a      	subs	r2, r3, #1
 8004e96:	bf45      	ittet	mi
 8004e98:	f1c3 0301 	rsbmi	r3, r3, #1
 8004e9c:	9300      	strmi	r3, [sp, #0]
 8004e9e:	2300      	movpl	r3, #0
 8004ea0:	2300      	movmi	r3, #0
 8004ea2:	9206      	str	r2, [sp, #24]
 8004ea4:	bf54      	ite	pl
 8004ea6:	9300      	strpl	r3, [sp, #0]
 8004ea8:	9306      	strmi	r3, [sp, #24]
 8004eaa:	2f00      	cmp	r7, #0
 8004eac:	db39      	blt.n	8004f22 <_dtoa_r+0x21a>
 8004eae:	9b06      	ldr	r3, [sp, #24]
 8004eb0:	970d      	str	r7, [sp, #52]	@ 0x34
 8004eb2:	443b      	add	r3, r7
 8004eb4:	9306      	str	r3, [sp, #24]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9308      	str	r3, [sp, #32]
 8004eba:	9b07      	ldr	r3, [sp, #28]
 8004ebc:	2b09      	cmp	r3, #9
 8004ebe:	d863      	bhi.n	8004f88 <_dtoa_r+0x280>
 8004ec0:	2b05      	cmp	r3, #5
 8004ec2:	bfc4      	itt	gt
 8004ec4:	3b04      	subgt	r3, #4
 8004ec6:	9307      	strgt	r3, [sp, #28]
 8004ec8:	9b07      	ldr	r3, [sp, #28]
 8004eca:	f1a3 0302 	sub.w	r3, r3, #2
 8004ece:	bfcc      	ite	gt
 8004ed0:	2400      	movgt	r4, #0
 8004ed2:	2401      	movle	r4, #1
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d863      	bhi.n	8004fa0 <_dtoa_r+0x298>
 8004ed8:	e8df f003 	tbb	[pc, r3]
 8004edc:	2b375452 	.word	0x2b375452
 8004ee0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004ee4:	441e      	add	r6, r3
 8004ee6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	bfc1      	itttt	gt
 8004eee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004ef2:	409f      	lslgt	r7, r3
 8004ef4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004ef8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004efc:	bfd6      	itet	le
 8004efe:	f1c3 0320 	rsble	r3, r3, #32
 8004f02:	ea47 0003 	orrgt.w	r0, r7, r3
 8004f06:	fa04 f003 	lslle.w	r0, r4, r3
 8004f0a:	f7fb fafb 	bl	8000504 <__aeabi_ui2d>
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004f14:	3e01      	subs	r6, #1
 8004f16:	9212      	str	r2, [sp, #72]	@ 0x48
 8004f18:	e776      	b.n	8004e08 <_dtoa_r+0x100>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e7b7      	b.n	8004e8e <_dtoa_r+0x186>
 8004f1e:	9010      	str	r0, [sp, #64]	@ 0x40
 8004f20:	e7b6      	b.n	8004e90 <_dtoa_r+0x188>
 8004f22:	9b00      	ldr	r3, [sp, #0]
 8004f24:	1bdb      	subs	r3, r3, r7
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	427b      	negs	r3, r7
 8004f2a:	9308      	str	r3, [sp, #32]
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	930d      	str	r3, [sp, #52]	@ 0x34
 8004f30:	e7c3      	b.n	8004eba <_dtoa_r+0x1b2>
 8004f32:	2301      	movs	r3, #1
 8004f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f38:	eb07 0b03 	add.w	fp, r7, r3
 8004f3c:	f10b 0301 	add.w	r3, fp, #1
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	9303      	str	r3, [sp, #12]
 8004f44:	bfb8      	it	lt
 8004f46:	2301      	movlt	r3, #1
 8004f48:	e006      	b.n	8004f58 <_dtoa_r+0x250>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	dd28      	ble.n	8004fa6 <_dtoa_r+0x29e>
 8004f54:	469b      	mov	fp, r3
 8004f56:	9303      	str	r3, [sp, #12]
 8004f58:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	2204      	movs	r2, #4
 8004f60:	f102 0514 	add.w	r5, r2, #20
 8004f64:	429d      	cmp	r5, r3
 8004f66:	d926      	bls.n	8004fb6 <_dtoa_r+0x2ae>
 8004f68:	6041      	str	r1, [r0, #4]
 8004f6a:	4648      	mov	r0, r9
 8004f6c:	f000 fd9c 	bl	8005aa8 <_Balloc>
 8004f70:	4682      	mov	sl, r0
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d142      	bne.n	8004ffc <_dtoa_r+0x2f4>
 8004f76:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff0 <_dtoa_r+0x2e8>)
 8004f78:	4602      	mov	r2, r0
 8004f7a:	f240 11af 	movw	r1, #431	@ 0x1af
 8004f7e:	e6da      	b.n	8004d36 <_dtoa_r+0x2e>
 8004f80:	2300      	movs	r3, #0
 8004f82:	e7e3      	b.n	8004f4c <_dtoa_r+0x244>
 8004f84:	2300      	movs	r3, #0
 8004f86:	e7d5      	b.n	8004f34 <_dtoa_r+0x22c>
 8004f88:	2401      	movs	r4, #1
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	9307      	str	r3, [sp, #28]
 8004f8e:	9409      	str	r4, [sp, #36]	@ 0x24
 8004f90:	f04f 3bff 	mov.w	fp, #4294967295
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8cd b00c 	str.w	fp, [sp, #12]
 8004f9a:	2312      	movs	r3, #18
 8004f9c:	920c      	str	r2, [sp, #48]	@ 0x30
 8004f9e:	e7db      	b.n	8004f58 <_dtoa_r+0x250>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fa4:	e7f4      	b.n	8004f90 <_dtoa_r+0x288>
 8004fa6:	f04f 0b01 	mov.w	fp, #1
 8004faa:	f8cd b00c 	str.w	fp, [sp, #12]
 8004fae:	465b      	mov	r3, fp
 8004fb0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004fb4:	e7d0      	b.n	8004f58 <_dtoa_r+0x250>
 8004fb6:	3101      	adds	r1, #1
 8004fb8:	0052      	lsls	r2, r2, #1
 8004fba:	e7d1      	b.n	8004f60 <_dtoa_r+0x258>
 8004fbc:	f3af 8000 	nop.w
 8004fc0:	636f4361 	.word	0x636f4361
 8004fc4:	3fd287a7 	.word	0x3fd287a7
 8004fc8:	8b60c8b3 	.word	0x8b60c8b3
 8004fcc:	3fc68a28 	.word	0x3fc68a28
 8004fd0:	509f79fb 	.word	0x509f79fb
 8004fd4:	3fd34413 	.word	0x3fd34413
 8004fd8:	08009256 	.word	0x08009256
 8004fdc:	0800926d 	.word	0x0800926d
 8004fe0:	7ff00000 	.word	0x7ff00000
 8004fe4:	08009221 	.word	0x08009221
 8004fe8:	3ff80000 	.word	0x3ff80000
 8004fec:	08009420 	.word	0x08009420
 8004ff0:	080092c5 	.word	0x080092c5
 8004ff4:	08009252 	.word	0x08009252
 8004ff8:	08009220 	.word	0x08009220
 8004ffc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005000:	6018      	str	r0, [r3, #0]
 8005002:	9b03      	ldr	r3, [sp, #12]
 8005004:	2b0e      	cmp	r3, #14
 8005006:	f200 80a1 	bhi.w	800514c <_dtoa_r+0x444>
 800500a:	2c00      	cmp	r4, #0
 800500c:	f000 809e 	beq.w	800514c <_dtoa_r+0x444>
 8005010:	2f00      	cmp	r7, #0
 8005012:	dd33      	ble.n	800507c <_dtoa_r+0x374>
 8005014:	4b9c      	ldr	r3, [pc, #624]	@ (8005288 <_dtoa_r+0x580>)
 8005016:	f007 020f 	and.w	r2, r7, #15
 800501a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800501e:	ed93 7b00 	vldr	d7, [r3]
 8005022:	05f8      	lsls	r0, r7, #23
 8005024:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005028:	ea4f 1427 	mov.w	r4, r7, asr #4
 800502c:	d516      	bpl.n	800505c <_dtoa_r+0x354>
 800502e:	4b97      	ldr	r3, [pc, #604]	@ (800528c <_dtoa_r+0x584>)
 8005030:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005034:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005038:	f7fb fc08 	bl	800084c <__aeabi_ddiv>
 800503c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005040:	f004 040f 	and.w	r4, r4, #15
 8005044:	2603      	movs	r6, #3
 8005046:	4d91      	ldr	r5, [pc, #580]	@ (800528c <_dtoa_r+0x584>)
 8005048:	b954      	cbnz	r4, 8005060 <_dtoa_r+0x358>
 800504a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800504e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005052:	f7fb fbfb 	bl	800084c <__aeabi_ddiv>
 8005056:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800505a:	e028      	b.n	80050ae <_dtoa_r+0x3a6>
 800505c:	2602      	movs	r6, #2
 800505e:	e7f2      	b.n	8005046 <_dtoa_r+0x33e>
 8005060:	07e1      	lsls	r1, r4, #31
 8005062:	d508      	bpl.n	8005076 <_dtoa_r+0x36e>
 8005064:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005068:	e9d5 2300 	ldrd	r2, r3, [r5]
 800506c:	f7fb fac4 	bl	80005f8 <__aeabi_dmul>
 8005070:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005074:	3601      	adds	r6, #1
 8005076:	1064      	asrs	r4, r4, #1
 8005078:	3508      	adds	r5, #8
 800507a:	e7e5      	b.n	8005048 <_dtoa_r+0x340>
 800507c:	f000 80af 	beq.w	80051de <_dtoa_r+0x4d6>
 8005080:	427c      	negs	r4, r7
 8005082:	4b81      	ldr	r3, [pc, #516]	@ (8005288 <_dtoa_r+0x580>)
 8005084:	4d81      	ldr	r5, [pc, #516]	@ (800528c <_dtoa_r+0x584>)
 8005086:	f004 020f 	and.w	r2, r4, #15
 800508a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005096:	f7fb faaf 	bl	80005f8 <__aeabi_dmul>
 800509a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800509e:	1124      	asrs	r4, r4, #4
 80050a0:	2300      	movs	r3, #0
 80050a2:	2602      	movs	r6, #2
 80050a4:	2c00      	cmp	r4, #0
 80050a6:	f040 808f 	bne.w	80051c8 <_dtoa_r+0x4c0>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1d3      	bne.n	8005056 <_dtoa_r+0x34e>
 80050ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80050b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8094 	beq.w	80051e2 <_dtoa_r+0x4da>
 80050ba:	4b75      	ldr	r3, [pc, #468]	@ (8005290 <_dtoa_r+0x588>)
 80050bc:	2200      	movs	r2, #0
 80050be:	4620      	mov	r0, r4
 80050c0:	4629      	mov	r1, r5
 80050c2:	f7fb fd0b 	bl	8000adc <__aeabi_dcmplt>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	f000 808b 	beq.w	80051e2 <_dtoa_r+0x4da>
 80050cc:	9b03      	ldr	r3, [sp, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 8087 	beq.w	80051e2 <_dtoa_r+0x4da>
 80050d4:	f1bb 0f00 	cmp.w	fp, #0
 80050d8:	dd34      	ble.n	8005144 <_dtoa_r+0x43c>
 80050da:	4620      	mov	r0, r4
 80050dc:	4b6d      	ldr	r3, [pc, #436]	@ (8005294 <_dtoa_r+0x58c>)
 80050de:	2200      	movs	r2, #0
 80050e0:	4629      	mov	r1, r5
 80050e2:	f7fb fa89 	bl	80005f8 <__aeabi_dmul>
 80050e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050ea:	f107 38ff 	add.w	r8, r7, #4294967295
 80050ee:	3601      	adds	r6, #1
 80050f0:	465c      	mov	r4, fp
 80050f2:	4630      	mov	r0, r6
 80050f4:	f7fb fa16 	bl	8000524 <__aeabi_i2d>
 80050f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050fc:	f7fb fa7c 	bl	80005f8 <__aeabi_dmul>
 8005100:	4b65      	ldr	r3, [pc, #404]	@ (8005298 <_dtoa_r+0x590>)
 8005102:	2200      	movs	r2, #0
 8005104:	f7fb f8c2 	bl	800028c <__adddf3>
 8005108:	4605      	mov	r5, r0
 800510a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800510e:	2c00      	cmp	r4, #0
 8005110:	d16a      	bne.n	80051e8 <_dtoa_r+0x4e0>
 8005112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005116:	4b61      	ldr	r3, [pc, #388]	@ (800529c <_dtoa_r+0x594>)
 8005118:	2200      	movs	r2, #0
 800511a:	f7fb f8b5 	bl	8000288 <__aeabi_dsub>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005126:	462a      	mov	r2, r5
 8005128:	4633      	mov	r3, r6
 800512a:	f7fb fcf5 	bl	8000b18 <__aeabi_dcmpgt>
 800512e:	2800      	cmp	r0, #0
 8005130:	f040 8298 	bne.w	8005664 <_dtoa_r+0x95c>
 8005134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005138:	462a      	mov	r2, r5
 800513a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800513e:	f7fb fccd 	bl	8000adc <__aeabi_dcmplt>
 8005142:	bb38      	cbnz	r0, 8005194 <_dtoa_r+0x48c>
 8005144:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005148:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800514c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800514e:	2b00      	cmp	r3, #0
 8005150:	f2c0 8157 	blt.w	8005402 <_dtoa_r+0x6fa>
 8005154:	2f0e      	cmp	r7, #14
 8005156:	f300 8154 	bgt.w	8005402 <_dtoa_r+0x6fa>
 800515a:	4b4b      	ldr	r3, [pc, #300]	@ (8005288 <_dtoa_r+0x580>)
 800515c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005160:	ed93 7b00 	vldr	d7, [r3]
 8005164:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005166:	2b00      	cmp	r3, #0
 8005168:	ed8d 7b00 	vstr	d7, [sp]
 800516c:	f280 80e5 	bge.w	800533a <_dtoa_r+0x632>
 8005170:	9b03      	ldr	r3, [sp, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	f300 80e1 	bgt.w	800533a <_dtoa_r+0x632>
 8005178:	d10c      	bne.n	8005194 <_dtoa_r+0x48c>
 800517a:	4b48      	ldr	r3, [pc, #288]	@ (800529c <_dtoa_r+0x594>)
 800517c:	2200      	movs	r2, #0
 800517e:	ec51 0b17 	vmov	r0, r1, d7
 8005182:	f7fb fa39 	bl	80005f8 <__aeabi_dmul>
 8005186:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800518a:	f7fb fcbb 	bl	8000b04 <__aeabi_dcmpge>
 800518e:	2800      	cmp	r0, #0
 8005190:	f000 8266 	beq.w	8005660 <_dtoa_r+0x958>
 8005194:	2400      	movs	r4, #0
 8005196:	4625      	mov	r5, r4
 8005198:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800519a:	4656      	mov	r6, sl
 800519c:	ea6f 0803 	mvn.w	r8, r3
 80051a0:	2700      	movs	r7, #0
 80051a2:	4621      	mov	r1, r4
 80051a4:	4648      	mov	r0, r9
 80051a6:	f000 fcbf 	bl	8005b28 <_Bfree>
 80051aa:	2d00      	cmp	r5, #0
 80051ac:	f000 80bd 	beq.w	800532a <_dtoa_r+0x622>
 80051b0:	b12f      	cbz	r7, 80051be <_dtoa_r+0x4b6>
 80051b2:	42af      	cmp	r7, r5
 80051b4:	d003      	beq.n	80051be <_dtoa_r+0x4b6>
 80051b6:	4639      	mov	r1, r7
 80051b8:	4648      	mov	r0, r9
 80051ba:	f000 fcb5 	bl	8005b28 <_Bfree>
 80051be:	4629      	mov	r1, r5
 80051c0:	4648      	mov	r0, r9
 80051c2:	f000 fcb1 	bl	8005b28 <_Bfree>
 80051c6:	e0b0      	b.n	800532a <_dtoa_r+0x622>
 80051c8:	07e2      	lsls	r2, r4, #31
 80051ca:	d505      	bpl.n	80051d8 <_dtoa_r+0x4d0>
 80051cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051d0:	f7fb fa12 	bl	80005f8 <__aeabi_dmul>
 80051d4:	3601      	adds	r6, #1
 80051d6:	2301      	movs	r3, #1
 80051d8:	1064      	asrs	r4, r4, #1
 80051da:	3508      	adds	r5, #8
 80051dc:	e762      	b.n	80050a4 <_dtoa_r+0x39c>
 80051de:	2602      	movs	r6, #2
 80051e0:	e765      	b.n	80050ae <_dtoa_r+0x3a6>
 80051e2:	9c03      	ldr	r4, [sp, #12]
 80051e4:	46b8      	mov	r8, r7
 80051e6:	e784      	b.n	80050f2 <_dtoa_r+0x3ea>
 80051e8:	4b27      	ldr	r3, [pc, #156]	@ (8005288 <_dtoa_r+0x580>)
 80051ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80051ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80051f4:	4454      	add	r4, sl
 80051f6:	2900      	cmp	r1, #0
 80051f8:	d054      	beq.n	80052a4 <_dtoa_r+0x59c>
 80051fa:	4929      	ldr	r1, [pc, #164]	@ (80052a0 <_dtoa_r+0x598>)
 80051fc:	2000      	movs	r0, #0
 80051fe:	f7fb fb25 	bl	800084c <__aeabi_ddiv>
 8005202:	4633      	mov	r3, r6
 8005204:	462a      	mov	r2, r5
 8005206:	f7fb f83f 	bl	8000288 <__aeabi_dsub>
 800520a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800520e:	4656      	mov	r6, sl
 8005210:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005214:	f7fb fca0 	bl	8000b58 <__aeabi_d2iz>
 8005218:	4605      	mov	r5, r0
 800521a:	f7fb f983 	bl	8000524 <__aeabi_i2d>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005226:	f7fb f82f 	bl	8000288 <__aeabi_dsub>
 800522a:	3530      	adds	r5, #48	@ 0x30
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005234:	f806 5b01 	strb.w	r5, [r6], #1
 8005238:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800523c:	f7fb fc4e 	bl	8000adc <__aeabi_dcmplt>
 8005240:	2800      	cmp	r0, #0
 8005242:	d172      	bne.n	800532a <_dtoa_r+0x622>
 8005244:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005248:	4911      	ldr	r1, [pc, #68]	@ (8005290 <_dtoa_r+0x588>)
 800524a:	2000      	movs	r0, #0
 800524c:	f7fb f81c 	bl	8000288 <__aeabi_dsub>
 8005250:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005254:	f7fb fc42 	bl	8000adc <__aeabi_dcmplt>
 8005258:	2800      	cmp	r0, #0
 800525a:	f040 80b4 	bne.w	80053c6 <_dtoa_r+0x6be>
 800525e:	42a6      	cmp	r6, r4
 8005260:	f43f af70 	beq.w	8005144 <_dtoa_r+0x43c>
 8005264:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005268:	4b0a      	ldr	r3, [pc, #40]	@ (8005294 <_dtoa_r+0x58c>)
 800526a:	2200      	movs	r2, #0
 800526c:	f7fb f9c4 	bl	80005f8 <__aeabi_dmul>
 8005270:	4b08      	ldr	r3, [pc, #32]	@ (8005294 <_dtoa_r+0x58c>)
 8005272:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005276:	2200      	movs	r2, #0
 8005278:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800527c:	f7fb f9bc 	bl	80005f8 <__aeabi_dmul>
 8005280:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005284:	e7c4      	b.n	8005210 <_dtoa_r+0x508>
 8005286:	bf00      	nop
 8005288:	08009420 	.word	0x08009420
 800528c:	080093f8 	.word	0x080093f8
 8005290:	3ff00000 	.word	0x3ff00000
 8005294:	40240000 	.word	0x40240000
 8005298:	401c0000 	.word	0x401c0000
 800529c:	40140000 	.word	0x40140000
 80052a0:	3fe00000 	.word	0x3fe00000
 80052a4:	4631      	mov	r1, r6
 80052a6:	4628      	mov	r0, r5
 80052a8:	f7fb f9a6 	bl	80005f8 <__aeabi_dmul>
 80052ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80052b0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80052b2:	4656      	mov	r6, sl
 80052b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052b8:	f7fb fc4e 	bl	8000b58 <__aeabi_d2iz>
 80052bc:	4605      	mov	r5, r0
 80052be:	f7fb f931 	bl	8000524 <__aeabi_i2d>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052ca:	f7fa ffdd 	bl	8000288 <__aeabi_dsub>
 80052ce:	3530      	adds	r5, #48	@ 0x30
 80052d0:	f806 5b01 	strb.w	r5, [r6], #1
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	42a6      	cmp	r6, r4
 80052da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	d124      	bne.n	800532e <_dtoa_r+0x626>
 80052e4:	4baf      	ldr	r3, [pc, #700]	@ (80055a4 <_dtoa_r+0x89c>)
 80052e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80052ea:	f7fa ffcf 	bl	800028c <__adddf3>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052f6:	f7fb fc0f 	bl	8000b18 <__aeabi_dcmpgt>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d163      	bne.n	80053c6 <_dtoa_r+0x6be>
 80052fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005302:	49a8      	ldr	r1, [pc, #672]	@ (80055a4 <_dtoa_r+0x89c>)
 8005304:	2000      	movs	r0, #0
 8005306:	f7fa ffbf 	bl	8000288 <__aeabi_dsub>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005312:	f7fb fbe3 	bl	8000adc <__aeabi_dcmplt>
 8005316:	2800      	cmp	r0, #0
 8005318:	f43f af14 	beq.w	8005144 <_dtoa_r+0x43c>
 800531c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800531e:	1e73      	subs	r3, r6, #1
 8005320:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005322:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005326:	2b30      	cmp	r3, #48	@ 0x30
 8005328:	d0f8      	beq.n	800531c <_dtoa_r+0x614>
 800532a:	4647      	mov	r7, r8
 800532c:	e03b      	b.n	80053a6 <_dtoa_r+0x69e>
 800532e:	4b9e      	ldr	r3, [pc, #632]	@ (80055a8 <_dtoa_r+0x8a0>)
 8005330:	f7fb f962 	bl	80005f8 <__aeabi_dmul>
 8005334:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005338:	e7bc      	b.n	80052b4 <_dtoa_r+0x5ac>
 800533a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800533e:	4656      	mov	r6, sl
 8005340:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005344:	4620      	mov	r0, r4
 8005346:	4629      	mov	r1, r5
 8005348:	f7fb fa80 	bl	800084c <__aeabi_ddiv>
 800534c:	f7fb fc04 	bl	8000b58 <__aeabi_d2iz>
 8005350:	4680      	mov	r8, r0
 8005352:	f7fb f8e7 	bl	8000524 <__aeabi_i2d>
 8005356:	e9dd 2300 	ldrd	r2, r3, [sp]
 800535a:	f7fb f94d 	bl	80005f8 <__aeabi_dmul>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4620      	mov	r0, r4
 8005364:	4629      	mov	r1, r5
 8005366:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800536a:	f7fa ff8d 	bl	8000288 <__aeabi_dsub>
 800536e:	f806 4b01 	strb.w	r4, [r6], #1
 8005372:	9d03      	ldr	r5, [sp, #12]
 8005374:	eba6 040a 	sub.w	r4, r6, sl
 8005378:	42a5      	cmp	r5, r4
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	d133      	bne.n	80053e8 <_dtoa_r+0x6e0>
 8005380:	f7fa ff84 	bl	800028c <__adddf3>
 8005384:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005388:	4604      	mov	r4, r0
 800538a:	460d      	mov	r5, r1
 800538c:	f7fb fbc4 	bl	8000b18 <__aeabi_dcmpgt>
 8005390:	b9c0      	cbnz	r0, 80053c4 <_dtoa_r+0x6bc>
 8005392:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005396:	4620      	mov	r0, r4
 8005398:	4629      	mov	r1, r5
 800539a:	f7fb fb95 	bl	8000ac8 <__aeabi_dcmpeq>
 800539e:	b110      	cbz	r0, 80053a6 <_dtoa_r+0x69e>
 80053a0:	f018 0f01 	tst.w	r8, #1
 80053a4:	d10e      	bne.n	80053c4 <_dtoa_r+0x6bc>
 80053a6:	9902      	ldr	r1, [sp, #8]
 80053a8:	4648      	mov	r0, r9
 80053aa:	f000 fbbd 	bl	8005b28 <_Bfree>
 80053ae:	2300      	movs	r3, #0
 80053b0:	7033      	strb	r3, [r6, #0]
 80053b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80053b4:	3701      	adds	r7, #1
 80053b6:	601f      	str	r7, [r3, #0]
 80053b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 824b 	beq.w	8005856 <_dtoa_r+0xb4e>
 80053c0:	601e      	str	r6, [r3, #0]
 80053c2:	e248      	b.n	8005856 <_dtoa_r+0xb4e>
 80053c4:	46b8      	mov	r8, r7
 80053c6:	4633      	mov	r3, r6
 80053c8:	461e      	mov	r6, r3
 80053ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053ce:	2a39      	cmp	r2, #57	@ 0x39
 80053d0:	d106      	bne.n	80053e0 <_dtoa_r+0x6d8>
 80053d2:	459a      	cmp	sl, r3
 80053d4:	d1f8      	bne.n	80053c8 <_dtoa_r+0x6c0>
 80053d6:	2230      	movs	r2, #48	@ 0x30
 80053d8:	f108 0801 	add.w	r8, r8, #1
 80053dc:	f88a 2000 	strb.w	r2, [sl]
 80053e0:	781a      	ldrb	r2, [r3, #0]
 80053e2:	3201      	adds	r2, #1
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	e7a0      	b.n	800532a <_dtoa_r+0x622>
 80053e8:	4b6f      	ldr	r3, [pc, #444]	@ (80055a8 <_dtoa_r+0x8a0>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	f7fb f904 	bl	80005f8 <__aeabi_dmul>
 80053f0:	2200      	movs	r2, #0
 80053f2:	2300      	movs	r3, #0
 80053f4:	4604      	mov	r4, r0
 80053f6:	460d      	mov	r5, r1
 80053f8:	f7fb fb66 	bl	8000ac8 <__aeabi_dcmpeq>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	d09f      	beq.n	8005340 <_dtoa_r+0x638>
 8005400:	e7d1      	b.n	80053a6 <_dtoa_r+0x69e>
 8005402:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005404:	2a00      	cmp	r2, #0
 8005406:	f000 80ea 	beq.w	80055de <_dtoa_r+0x8d6>
 800540a:	9a07      	ldr	r2, [sp, #28]
 800540c:	2a01      	cmp	r2, #1
 800540e:	f300 80cd 	bgt.w	80055ac <_dtoa_r+0x8a4>
 8005412:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005414:	2a00      	cmp	r2, #0
 8005416:	f000 80c1 	beq.w	800559c <_dtoa_r+0x894>
 800541a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800541e:	9c08      	ldr	r4, [sp, #32]
 8005420:	9e00      	ldr	r6, [sp, #0]
 8005422:	9a00      	ldr	r2, [sp, #0]
 8005424:	441a      	add	r2, r3
 8005426:	9200      	str	r2, [sp, #0]
 8005428:	9a06      	ldr	r2, [sp, #24]
 800542a:	2101      	movs	r1, #1
 800542c:	441a      	add	r2, r3
 800542e:	4648      	mov	r0, r9
 8005430:	9206      	str	r2, [sp, #24]
 8005432:	f000 fc77 	bl	8005d24 <__i2b>
 8005436:	4605      	mov	r5, r0
 8005438:	b166      	cbz	r6, 8005454 <_dtoa_r+0x74c>
 800543a:	9b06      	ldr	r3, [sp, #24]
 800543c:	2b00      	cmp	r3, #0
 800543e:	dd09      	ble.n	8005454 <_dtoa_r+0x74c>
 8005440:	42b3      	cmp	r3, r6
 8005442:	9a00      	ldr	r2, [sp, #0]
 8005444:	bfa8      	it	ge
 8005446:	4633      	movge	r3, r6
 8005448:	1ad2      	subs	r2, r2, r3
 800544a:	9200      	str	r2, [sp, #0]
 800544c:	9a06      	ldr	r2, [sp, #24]
 800544e:	1af6      	subs	r6, r6, r3
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	9306      	str	r3, [sp, #24]
 8005454:	9b08      	ldr	r3, [sp, #32]
 8005456:	b30b      	cbz	r3, 800549c <_dtoa_r+0x794>
 8005458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 80c6 	beq.w	80055ec <_dtoa_r+0x8e4>
 8005460:	2c00      	cmp	r4, #0
 8005462:	f000 80c0 	beq.w	80055e6 <_dtoa_r+0x8de>
 8005466:	4629      	mov	r1, r5
 8005468:	4622      	mov	r2, r4
 800546a:	4648      	mov	r0, r9
 800546c:	f000 fd12 	bl	8005e94 <__pow5mult>
 8005470:	9a02      	ldr	r2, [sp, #8]
 8005472:	4601      	mov	r1, r0
 8005474:	4605      	mov	r5, r0
 8005476:	4648      	mov	r0, r9
 8005478:	f000 fc6a 	bl	8005d50 <__multiply>
 800547c:	9902      	ldr	r1, [sp, #8]
 800547e:	4680      	mov	r8, r0
 8005480:	4648      	mov	r0, r9
 8005482:	f000 fb51 	bl	8005b28 <_Bfree>
 8005486:	9b08      	ldr	r3, [sp, #32]
 8005488:	1b1b      	subs	r3, r3, r4
 800548a:	9308      	str	r3, [sp, #32]
 800548c:	f000 80b1 	beq.w	80055f2 <_dtoa_r+0x8ea>
 8005490:	9a08      	ldr	r2, [sp, #32]
 8005492:	4641      	mov	r1, r8
 8005494:	4648      	mov	r0, r9
 8005496:	f000 fcfd 	bl	8005e94 <__pow5mult>
 800549a:	9002      	str	r0, [sp, #8]
 800549c:	2101      	movs	r1, #1
 800549e:	4648      	mov	r0, r9
 80054a0:	f000 fc40 	bl	8005d24 <__i2b>
 80054a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054a6:	4604      	mov	r4, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 81d8 	beq.w	800585e <_dtoa_r+0xb56>
 80054ae:	461a      	mov	r2, r3
 80054b0:	4601      	mov	r1, r0
 80054b2:	4648      	mov	r0, r9
 80054b4:	f000 fcee 	bl	8005e94 <__pow5mult>
 80054b8:	9b07      	ldr	r3, [sp, #28]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	4604      	mov	r4, r0
 80054be:	f300 809f 	bgt.w	8005600 <_dtoa_r+0x8f8>
 80054c2:	9b04      	ldr	r3, [sp, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 8097 	bne.w	80055f8 <_dtoa_r+0x8f0>
 80054ca:	9b05      	ldr	r3, [sp, #20]
 80054cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f040 8093 	bne.w	80055fc <_dtoa_r+0x8f4>
 80054d6:	9b05      	ldr	r3, [sp, #20]
 80054d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054dc:	0d1b      	lsrs	r3, r3, #20
 80054de:	051b      	lsls	r3, r3, #20
 80054e0:	b133      	cbz	r3, 80054f0 <_dtoa_r+0x7e8>
 80054e2:	9b00      	ldr	r3, [sp, #0]
 80054e4:	3301      	adds	r3, #1
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	9b06      	ldr	r3, [sp, #24]
 80054ea:	3301      	adds	r3, #1
 80054ec:	9306      	str	r3, [sp, #24]
 80054ee:	2301      	movs	r3, #1
 80054f0:	9308      	str	r3, [sp, #32]
 80054f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 81b8 	beq.w	800586a <_dtoa_r+0xb62>
 80054fa:	6923      	ldr	r3, [r4, #16]
 80054fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005500:	6918      	ldr	r0, [r3, #16]
 8005502:	f000 fbc3 	bl	8005c8c <__hi0bits>
 8005506:	f1c0 0020 	rsb	r0, r0, #32
 800550a:	9b06      	ldr	r3, [sp, #24]
 800550c:	4418      	add	r0, r3
 800550e:	f010 001f 	ands.w	r0, r0, #31
 8005512:	f000 8082 	beq.w	800561a <_dtoa_r+0x912>
 8005516:	f1c0 0320 	rsb	r3, r0, #32
 800551a:	2b04      	cmp	r3, #4
 800551c:	dd73      	ble.n	8005606 <_dtoa_r+0x8fe>
 800551e:	9b00      	ldr	r3, [sp, #0]
 8005520:	f1c0 001c 	rsb	r0, r0, #28
 8005524:	4403      	add	r3, r0
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	9b06      	ldr	r3, [sp, #24]
 800552a:	4403      	add	r3, r0
 800552c:	4406      	add	r6, r0
 800552e:	9306      	str	r3, [sp, #24]
 8005530:	9b00      	ldr	r3, [sp, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	dd05      	ble.n	8005542 <_dtoa_r+0x83a>
 8005536:	9902      	ldr	r1, [sp, #8]
 8005538:	461a      	mov	r2, r3
 800553a:	4648      	mov	r0, r9
 800553c:	f000 fd04 	bl	8005f48 <__lshift>
 8005540:	9002      	str	r0, [sp, #8]
 8005542:	9b06      	ldr	r3, [sp, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	dd05      	ble.n	8005554 <_dtoa_r+0x84c>
 8005548:	4621      	mov	r1, r4
 800554a:	461a      	mov	r2, r3
 800554c:	4648      	mov	r0, r9
 800554e:	f000 fcfb 	bl	8005f48 <__lshift>
 8005552:	4604      	mov	r4, r0
 8005554:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d061      	beq.n	800561e <_dtoa_r+0x916>
 800555a:	9802      	ldr	r0, [sp, #8]
 800555c:	4621      	mov	r1, r4
 800555e:	f000 fd5f 	bl	8006020 <__mcmp>
 8005562:	2800      	cmp	r0, #0
 8005564:	da5b      	bge.n	800561e <_dtoa_r+0x916>
 8005566:	2300      	movs	r3, #0
 8005568:	9902      	ldr	r1, [sp, #8]
 800556a:	220a      	movs	r2, #10
 800556c:	4648      	mov	r0, r9
 800556e:	f000 fafd 	bl	8005b6c <__multadd>
 8005572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005574:	9002      	str	r0, [sp, #8]
 8005576:	f107 38ff 	add.w	r8, r7, #4294967295
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 8177 	beq.w	800586e <_dtoa_r+0xb66>
 8005580:	4629      	mov	r1, r5
 8005582:	2300      	movs	r3, #0
 8005584:	220a      	movs	r2, #10
 8005586:	4648      	mov	r0, r9
 8005588:	f000 faf0 	bl	8005b6c <__multadd>
 800558c:	f1bb 0f00 	cmp.w	fp, #0
 8005590:	4605      	mov	r5, r0
 8005592:	dc6f      	bgt.n	8005674 <_dtoa_r+0x96c>
 8005594:	9b07      	ldr	r3, [sp, #28]
 8005596:	2b02      	cmp	r3, #2
 8005598:	dc49      	bgt.n	800562e <_dtoa_r+0x926>
 800559a:	e06b      	b.n	8005674 <_dtoa_r+0x96c>
 800559c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800559e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80055a2:	e73c      	b.n	800541e <_dtoa_r+0x716>
 80055a4:	3fe00000 	.word	0x3fe00000
 80055a8:	40240000 	.word	0x40240000
 80055ac:	9b03      	ldr	r3, [sp, #12]
 80055ae:	1e5c      	subs	r4, r3, #1
 80055b0:	9b08      	ldr	r3, [sp, #32]
 80055b2:	42a3      	cmp	r3, r4
 80055b4:	db09      	blt.n	80055ca <_dtoa_r+0x8c2>
 80055b6:	1b1c      	subs	r4, r3, r4
 80055b8:	9b03      	ldr	r3, [sp, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f6bf af30 	bge.w	8005420 <_dtoa_r+0x718>
 80055c0:	9b00      	ldr	r3, [sp, #0]
 80055c2:	9a03      	ldr	r2, [sp, #12]
 80055c4:	1a9e      	subs	r6, r3, r2
 80055c6:	2300      	movs	r3, #0
 80055c8:	e72b      	b.n	8005422 <_dtoa_r+0x71a>
 80055ca:	9b08      	ldr	r3, [sp, #32]
 80055cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80055ce:	9408      	str	r4, [sp, #32]
 80055d0:	1ae3      	subs	r3, r4, r3
 80055d2:	441a      	add	r2, r3
 80055d4:	9e00      	ldr	r6, [sp, #0]
 80055d6:	9b03      	ldr	r3, [sp, #12]
 80055d8:	920d      	str	r2, [sp, #52]	@ 0x34
 80055da:	2400      	movs	r4, #0
 80055dc:	e721      	b.n	8005422 <_dtoa_r+0x71a>
 80055de:	9c08      	ldr	r4, [sp, #32]
 80055e0:	9e00      	ldr	r6, [sp, #0]
 80055e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80055e4:	e728      	b.n	8005438 <_dtoa_r+0x730>
 80055e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80055ea:	e751      	b.n	8005490 <_dtoa_r+0x788>
 80055ec:	9a08      	ldr	r2, [sp, #32]
 80055ee:	9902      	ldr	r1, [sp, #8]
 80055f0:	e750      	b.n	8005494 <_dtoa_r+0x78c>
 80055f2:	f8cd 8008 	str.w	r8, [sp, #8]
 80055f6:	e751      	b.n	800549c <_dtoa_r+0x794>
 80055f8:	2300      	movs	r3, #0
 80055fa:	e779      	b.n	80054f0 <_dtoa_r+0x7e8>
 80055fc:	9b04      	ldr	r3, [sp, #16]
 80055fe:	e777      	b.n	80054f0 <_dtoa_r+0x7e8>
 8005600:	2300      	movs	r3, #0
 8005602:	9308      	str	r3, [sp, #32]
 8005604:	e779      	b.n	80054fa <_dtoa_r+0x7f2>
 8005606:	d093      	beq.n	8005530 <_dtoa_r+0x828>
 8005608:	9a00      	ldr	r2, [sp, #0]
 800560a:	331c      	adds	r3, #28
 800560c:	441a      	add	r2, r3
 800560e:	9200      	str	r2, [sp, #0]
 8005610:	9a06      	ldr	r2, [sp, #24]
 8005612:	441a      	add	r2, r3
 8005614:	441e      	add	r6, r3
 8005616:	9206      	str	r2, [sp, #24]
 8005618:	e78a      	b.n	8005530 <_dtoa_r+0x828>
 800561a:	4603      	mov	r3, r0
 800561c:	e7f4      	b.n	8005608 <_dtoa_r+0x900>
 800561e:	9b03      	ldr	r3, [sp, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	46b8      	mov	r8, r7
 8005624:	dc20      	bgt.n	8005668 <_dtoa_r+0x960>
 8005626:	469b      	mov	fp, r3
 8005628:	9b07      	ldr	r3, [sp, #28]
 800562a:	2b02      	cmp	r3, #2
 800562c:	dd1e      	ble.n	800566c <_dtoa_r+0x964>
 800562e:	f1bb 0f00 	cmp.w	fp, #0
 8005632:	f47f adb1 	bne.w	8005198 <_dtoa_r+0x490>
 8005636:	4621      	mov	r1, r4
 8005638:	465b      	mov	r3, fp
 800563a:	2205      	movs	r2, #5
 800563c:	4648      	mov	r0, r9
 800563e:	f000 fa95 	bl	8005b6c <__multadd>
 8005642:	4601      	mov	r1, r0
 8005644:	4604      	mov	r4, r0
 8005646:	9802      	ldr	r0, [sp, #8]
 8005648:	f000 fcea 	bl	8006020 <__mcmp>
 800564c:	2800      	cmp	r0, #0
 800564e:	f77f ada3 	ble.w	8005198 <_dtoa_r+0x490>
 8005652:	4656      	mov	r6, sl
 8005654:	2331      	movs	r3, #49	@ 0x31
 8005656:	f806 3b01 	strb.w	r3, [r6], #1
 800565a:	f108 0801 	add.w	r8, r8, #1
 800565e:	e59f      	b.n	80051a0 <_dtoa_r+0x498>
 8005660:	9c03      	ldr	r4, [sp, #12]
 8005662:	46b8      	mov	r8, r7
 8005664:	4625      	mov	r5, r4
 8005666:	e7f4      	b.n	8005652 <_dtoa_r+0x94a>
 8005668:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800566c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8101 	beq.w	8005876 <_dtoa_r+0xb6e>
 8005674:	2e00      	cmp	r6, #0
 8005676:	dd05      	ble.n	8005684 <_dtoa_r+0x97c>
 8005678:	4629      	mov	r1, r5
 800567a:	4632      	mov	r2, r6
 800567c:	4648      	mov	r0, r9
 800567e:	f000 fc63 	bl	8005f48 <__lshift>
 8005682:	4605      	mov	r5, r0
 8005684:	9b08      	ldr	r3, [sp, #32]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d05c      	beq.n	8005744 <_dtoa_r+0xa3c>
 800568a:	6869      	ldr	r1, [r5, #4]
 800568c:	4648      	mov	r0, r9
 800568e:	f000 fa0b 	bl	8005aa8 <_Balloc>
 8005692:	4606      	mov	r6, r0
 8005694:	b928      	cbnz	r0, 80056a2 <_dtoa_r+0x99a>
 8005696:	4b82      	ldr	r3, [pc, #520]	@ (80058a0 <_dtoa_r+0xb98>)
 8005698:	4602      	mov	r2, r0
 800569a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800569e:	f7ff bb4a 	b.w	8004d36 <_dtoa_r+0x2e>
 80056a2:	692a      	ldr	r2, [r5, #16]
 80056a4:	3202      	adds	r2, #2
 80056a6:	0092      	lsls	r2, r2, #2
 80056a8:	f105 010c 	add.w	r1, r5, #12
 80056ac:	300c      	adds	r0, #12
 80056ae:	f001 ff69 	bl	8007584 <memcpy>
 80056b2:	2201      	movs	r2, #1
 80056b4:	4631      	mov	r1, r6
 80056b6:	4648      	mov	r0, r9
 80056b8:	f000 fc46 	bl	8005f48 <__lshift>
 80056bc:	f10a 0301 	add.w	r3, sl, #1
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	eb0a 030b 	add.w	r3, sl, fp
 80056c6:	9308      	str	r3, [sp, #32]
 80056c8:	9b04      	ldr	r3, [sp, #16]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	462f      	mov	r7, r5
 80056d0:	9306      	str	r3, [sp, #24]
 80056d2:	4605      	mov	r5, r0
 80056d4:	9b00      	ldr	r3, [sp, #0]
 80056d6:	9802      	ldr	r0, [sp, #8]
 80056d8:	4621      	mov	r1, r4
 80056da:	f103 3bff 	add.w	fp, r3, #4294967295
 80056de:	f7ff fa8b 	bl	8004bf8 <quorem>
 80056e2:	4603      	mov	r3, r0
 80056e4:	3330      	adds	r3, #48	@ 0x30
 80056e6:	9003      	str	r0, [sp, #12]
 80056e8:	4639      	mov	r1, r7
 80056ea:	9802      	ldr	r0, [sp, #8]
 80056ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80056ee:	f000 fc97 	bl	8006020 <__mcmp>
 80056f2:	462a      	mov	r2, r5
 80056f4:	9004      	str	r0, [sp, #16]
 80056f6:	4621      	mov	r1, r4
 80056f8:	4648      	mov	r0, r9
 80056fa:	f000 fcad 	bl	8006058 <__mdiff>
 80056fe:	68c2      	ldr	r2, [r0, #12]
 8005700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005702:	4606      	mov	r6, r0
 8005704:	bb02      	cbnz	r2, 8005748 <_dtoa_r+0xa40>
 8005706:	4601      	mov	r1, r0
 8005708:	9802      	ldr	r0, [sp, #8]
 800570a:	f000 fc89 	bl	8006020 <__mcmp>
 800570e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005710:	4602      	mov	r2, r0
 8005712:	4631      	mov	r1, r6
 8005714:	4648      	mov	r0, r9
 8005716:	920c      	str	r2, [sp, #48]	@ 0x30
 8005718:	9309      	str	r3, [sp, #36]	@ 0x24
 800571a:	f000 fa05 	bl	8005b28 <_Bfree>
 800571e:	9b07      	ldr	r3, [sp, #28]
 8005720:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005722:	9e00      	ldr	r6, [sp, #0]
 8005724:	ea42 0103 	orr.w	r1, r2, r3
 8005728:	9b06      	ldr	r3, [sp, #24]
 800572a:	4319      	orrs	r1, r3
 800572c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800572e:	d10d      	bne.n	800574c <_dtoa_r+0xa44>
 8005730:	2b39      	cmp	r3, #57	@ 0x39
 8005732:	d027      	beq.n	8005784 <_dtoa_r+0xa7c>
 8005734:	9a04      	ldr	r2, [sp, #16]
 8005736:	2a00      	cmp	r2, #0
 8005738:	dd01      	ble.n	800573e <_dtoa_r+0xa36>
 800573a:	9b03      	ldr	r3, [sp, #12]
 800573c:	3331      	adds	r3, #49	@ 0x31
 800573e:	f88b 3000 	strb.w	r3, [fp]
 8005742:	e52e      	b.n	80051a2 <_dtoa_r+0x49a>
 8005744:	4628      	mov	r0, r5
 8005746:	e7b9      	b.n	80056bc <_dtoa_r+0x9b4>
 8005748:	2201      	movs	r2, #1
 800574a:	e7e2      	b.n	8005712 <_dtoa_r+0xa0a>
 800574c:	9904      	ldr	r1, [sp, #16]
 800574e:	2900      	cmp	r1, #0
 8005750:	db04      	blt.n	800575c <_dtoa_r+0xa54>
 8005752:	9807      	ldr	r0, [sp, #28]
 8005754:	4301      	orrs	r1, r0
 8005756:	9806      	ldr	r0, [sp, #24]
 8005758:	4301      	orrs	r1, r0
 800575a:	d120      	bne.n	800579e <_dtoa_r+0xa96>
 800575c:	2a00      	cmp	r2, #0
 800575e:	ddee      	ble.n	800573e <_dtoa_r+0xa36>
 8005760:	9902      	ldr	r1, [sp, #8]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2201      	movs	r2, #1
 8005766:	4648      	mov	r0, r9
 8005768:	f000 fbee 	bl	8005f48 <__lshift>
 800576c:	4621      	mov	r1, r4
 800576e:	9002      	str	r0, [sp, #8]
 8005770:	f000 fc56 	bl	8006020 <__mcmp>
 8005774:	2800      	cmp	r0, #0
 8005776:	9b00      	ldr	r3, [sp, #0]
 8005778:	dc02      	bgt.n	8005780 <_dtoa_r+0xa78>
 800577a:	d1e0      	bne.n	800573e <_dtoa_r+0xa36>
 800577c:	07da      	lsls	r2, r3, #31
 800577e:	d5de      	bpl.n	800573e <_dtoa_r+0xa36>
 8005780:	2b39      	cmp	r3, #57	@ 0x39
 8005782:	d1da      	bne.n	800573a <_dtoa_r+0xa32>
 8005784:	2339      	movs	r3, #57	@ 0x39
 8005786:	f88b 3000 	strb.w	r3, [fp]
 800578a:	4633      	mov	r3, r6
 800578c:	461e      	mov	r6, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005794:	2a39      	cmp	r2, #57	@ 0x39
 8005796:	d04e      	beq.n	8005836 <_dtoa_r+0xb2e>
 8005798:	3201      	adds	r2, #1
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	e501      	b.n	80051a2 <_dtoa_r+0x49a>
 800579e:	2a00      	cmp	r2, #0
 80057a0:	dd03      	ble.n	80057aa <_dtoa_r+0xaa2>
 80057a2:	2b39      	cmp	r3, #57	@ 0x39
 80057a4:	d0ee      	beq.n	8005784 <_dtoa_r+0xa7c>
 80057a6:	3301      	adds	r3, #1
 80057a8:	e7c9      	b.n	800573e <_dtoa_r+0xa36>
 80057aa:	9a00      	ldr	r2, [sp, #0]
 80057ac:	9908      	ldr	r1, [sp, #32]
 80057ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80057b2:	428a      	cmp	r2, r1
 80057b4:	d028      	beq.n	8005808 <_dtoa_r+0xb00>
 80057b6:	9902      	ldr	r1, [sp, #8]
 80057b8:	2300      	movs	r3, #0
 80057ba:	220a      	movs	r2, #10
 80057bc:	4648      	mov	r0, r9
 80057be:	f000 f9d5 	bl	8005b6c <__multadd>
 80057c2:	42af      	cmp	r7, r5
 80057c4:	9002      	str	r0, [sp, #8]
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	f04f 020a 	mov.w	r2, #10
 80057ce:	4639      	mov	r1, r7
 80057d0:	4648      	mov	r0, r9
 80057d2:	d107      	bne.n	80057e4 <_dtoa_r+0xadc>
 80057d4:	f000 f9ca 	bl	8005b6c <__multadd>
 80057d8:	4607      	mov	r7, r0
 80057da:	4605      	mov	r5, r0
 80057dc:	9b00      	ldr	r3, [sp, #0]
 80057de:	3301      	adds	r3, #1
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	e777      	b.n	80056d4 <_dtoa_r+0x9cc>
 80057e4:	f000 f9c2 	bl	8005b6c <__multadd>
 80057e8:	4629      	mov	r1, r5
 80057ea:	4607      	mov	r7, r0
 80057ec:	2300      	movs	r3, #0
 80057ee:	220a      	movs	r2, #10
 80057f0:	4648      	mov	r0, r9
 80057f2:	f000 f9bb 	bl	8005b6c <__multadd>
 80057f6:	4605      	mov	r5, r0
 80057f8:	e7f0      	b.n	80057dc <_dtoa_r+0xad4>
 80057fa:	f1bb 0f00 	cmp.w	fp, #0
 80057fe:	bfcc      	ite	gt
 8005800:	465e      	movgt	r6, fp
 8005802:	2601      	movle	r6, #1
 8005804:	4456      	add	r6, sl
 8005806:	2700      	movs	r7, #0
 8005808:	9902      	ldr	r1, [sp, #8]
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	2201      	movs	r2, #1
 800580e:	4648      	mov	r0, r9
 8005810:	f000 fb9a 	bl	8005f48 <__lshift>
 8005814:	4621      	mov	r1, r4
 8005816:	9002      	str	r0, [sp, #8]
 8005818:	f000 fc02 	bl	8006020 <__mcmp>
 800581c:	2800      	cmp	r0, #0
 800581e:	dcb4      	bgt.n	800578a <_dtoa_r+0xa82>
 8005820:	d102      	bne.n	8005828 <_dtoa_r+0xb20>
 8005822:	9b00      	ldr	r3, [sp, #0]
 8005824:	07db      	lsls	r3, r3, #31
 8005826:	d4b0      	bmi.n	800578a <_dtoa_r+0xa82>
 8005828:	4633      	mov	r3, r6
 800582a:	461e      	mov	r6, r3
 800582c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005830:	2a30      	cmp	r2, #48	@ 0x30
 8005832:	d0fa      	beq.n	800582a <_dtoa_r+0xb22>
 8005834:	e4b5      	b.n	80051a2 <_dtoa_r+0x49a>
 8005836:	459a      	cmp	sl, r3
 8005838:	d1a8      	bne.n	800578c <_dtoa_r+0xa84>
 800583a:	2331      	movs	r3, #49	@ 0x31
 800583c:	f108 0801 	add.w	r8, r8, #1
 8005840:	f88a 3000 	strb.w	r3, [sl]
 8005844:	e4ad      	b.n	80051a2 <_dtoa_r+0x49a>
 8005846:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005848:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80058a4 <_dtoa_r+0xb9c>
 800584c:	b11b      	cbz	r3, 8005856 <_dtoa_r+0xb4e>
 800584e:	f10a 0308 	add.w	r3, sl, #8
 8005852:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	4650      	mov	r0, sl
 8005858:	b017      	add	sp, #92	@ 0x5c
 800585a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585e:	9b07      	ldr	r3, [sp, #28]
 8005860:	2b01      	cmp	r3, #1
 8005862:	f77f ae2e 	ble.w	80054c2 <_dtoa_r+0x7ba>
 8005866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005868:	9308      	str	r3, [sp, #32]
 800586a:	2001      	movs	r0, #1
 800586c:	e64d      	b.n	800550a <_dtoa_r+0x802>
 800586e:	f1bb 0f00 	cmp.w	fp, #0
 8005872:	f77f aed9 	ble.w	8005628 <_dtoa_r+0x920>
 8005876:	4656      	mov	r6, sl
 8005878:	9802      	ldr	r0, [sp, #8]
 800587a:	4621      	mov	r1, r4
 800587c:	f7ff f9bc 	bl	8004bf8 <quorem>
 8005880:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005884:	f806 3b01 	strb.w	r3, [r6], #1
 8005888:	eba6 020a 	sub.w	r2, r6, sl
 800588c:	4593      	cmp	fp, r2
 800588e:	ddb4      	ble.n	80057fa <_dtoa_r+0xaf2>
 8005890:	9902      	ldr	r1, [sp, #8]
 8005892:	2300      	movs	r3, #0
 8005894:	220a      	movs	r2, #10
 8005896:	4648      	mov	r0, r9
 8005898:	f000 f968 	bl	8005b6c <__multadd>
 800589c:	9002      	str	r0, [sp, #8]
 800589e:	e7eb      	b.n	8005878 <_dtoa_r+0xb70>
 80058a0:	080092c5 	.word	0x080092c5
 80058a4:	08009249 	.word	0x08009249

080058a8 <_free_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4605      	mov	r5, r0
 80058ac:	2900      	cmp	r1, #0
 80058ae:	d041      	beq.n	8005934 <_free_r+0x8c>
 80058b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058b4:	1f0c      	subs	r4, r1, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	bfb8      	it	lt
 80058ba:	18e4      	addlt	r4, r4, r3
 80058bc:	f000 f8e8 	bl	8005a90 <__malloc_lock>
 80058c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005938 <_free_r+0x90>)
 80058c2:	6813      	ldr	r3, [r2, #0]
 80058c4:	b933      	cbnz	r3, 80058d4 <_free_r+0x2c>
 80058c6:	6063      	str	r3, [r4, #4]
 80058c8:	6014      	str	r4, [r2, #0]
 80058ca:	4628      	mov	r0, r5
 80058cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058d0:	f000 b8e4 	b.w	8005a9c <__malloc_unlock>
 80058d4:	42a3      	cmp	r3, r4
 80058d6:	d908      	bls.n	80058ea <_free_r+0x42>
 80058d8:	6820      	ldr	r0, [r4, #0]
 80058da:	1821      	adds	r1, r4, r0
 80058dc:	428b      	cmp	r3, r1
 80058de:	bf01      	itttt	eq
 80058e0:	6819      	ldreq	r1, [r3, #0]
 80058e2:	685b      	ldreq	r3, [r3, #4]
 80058e4:	1809      	addeq	r1, r1, r0
 80058e6:	6021      	streq	r1, [r4, #0]
 80058e8:	e7ed      	b.n	80058c6 <_free_r+0x1e>
 80058ea:	461a      	mov	r2, r3
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	b10b      	cbz	r3, 80058f4 <_free_r+0x4c>
 80058f0:	42a3      	cmp	r3, r4
 80058f2:	d9fa      	bls.n	80058ea <_free_r+0x42>
 80058f4:	6811      	ldr	r1, [r2, #0]
 80058f6:	1850      	adds	r0, r2, r1
 80058f8:	42a0      	cmp	r0, r4
 80058fa:	d10b      	bne.n	8005914 <_free_r+0x6c>
 80058fc:	6820      	ldr	r0, [r4, #0]
 80058fe:	4401      	add	r1, r0
 8005900:	1850      	adds	r0, r2, r1
 8005902:	4283      	cmp	r3, r0
 8005904:	6011      	str	r1, [r2, #0]
 8005906:	d1e0      	bne.n	80058ca <_free_r+0x22>
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	6053      	str	r3, [r2, #4]
 800590e:	4408      	add	r0, r1
 8005910:	6010      	str	r0, [r2, #0]
 8005912:	e7da      	b.n	80058ca <_free_r+0x22>
 8005914:	d902      	bls.n	800591c <_free_r+0x74>
 8005916:	230c      	movs	r3, #12
 8005918:	602b      	str	r3, [r5, #0]
 800591a:	e7d6      	b.n	80058ca <_free_r+0x22>
 800591c:	6820      	ldr	r0, [r4, #0]
 800591e:	1821      	adds	r1, r4, r0
 8005920:	428b      	cmp	r3, r1
 8005922:	bf04      	itt	eq
 8005924:	6819      	ldreq	r1, [r3, #0]
 8005926:	685b      	ldreq	r3, [r3, #4]
 8005928:	6063      	str	r3, [r4, #4]
 800592a:	bf04      	itt	eq
 800592c:	1809      	addeq	r1, r1, r0
 800592e:	6021      	streq	r1, [r4, #0]
 8005930:	6054      	str	r4, [r2, #4]
 8005932:	e7ca      	b.n	80058ca <_free_r+0x22>
 8005934:	bd38      	pop	{r3, r4, r5, pc}
 8005936:	bf00      	nop
 8005938:	20000458 	.word	0x20000458

0800593c <malloc>:
 800593c:	4b02      	ldr	r3, [pc, #8]	@ (8005948 <malloc+0xc>)
 800593e:	4601      	mov	r1, r0
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	f000 b825 	b.w	8005990 <_malloc_r>
 8005946:	bf00      	nop
 8005948:	20000018 	.word	0x20000018

0800594c <sbrk_aligned>:
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	4e0f      	ldr	r6, [pc, #60]	@ (800598c <sbrk_aligned+0x40>)
 8005950:	460c      	mov	r4, r1
 8005952:	6831      	ldr	r1, [r6, #0]
 8005954:	4605      	mov	r5, r0
 8005956:	b911      	cbnz	r1, 800595e <sbrk_aligned+0x12>
 8005958:	f001 fe04 	bl	8007564 <_sbrk_r>
 800595c:	6030      	str	r0, [r6, #0]
 800595e:	4621      	mov	r1, r4
 8005960:	4628      	mov	r0, r5
 8005962:	f001 fdff 	bl	8007564 <_sbrk_r>
 8005966:	1c43      	adds	r3, r0, #1
 8005968:	d103      	bne.n	8005972 <sbrk_aligned+0x26>
 800596a:	f04f 34ff 	mov.w	r4, #4294967295
 800596e:	4620      	mov	r0, r4
 8005970:	bd70      	pop	{r4, r5, r6, pc}
 8005972:	1cc4      	adds	r4, r0, #3
 8005974:	f024 0403 	bic.w	r4, r4, #3
 8005978:	42a0      	cmp	r0, r4
 800597a:	d0f8      	beq.n	800596e <sbrk_aligned+0x22>
 800597c:	1a21      	subs	r1, r4, r0
 800597e:	4628      	mov	r0, r5
 8005980:	f001 fdf0 	bl	8007564 <_sbrk_r>
 8005984:	3001      	adds	r0, #1
 8005986:	d1f2      	bne.n	800596e <sbrk_aligned+0x22>
 8005988:	e7ef      	b.n	800596a <sbrk_aligned+0x1e>
 800598a:	bf00      	nop
 800598c:	20000454 	.word	0x20000454

08005990 <_malloc_r>:
 8005990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005994:	1ccd      	adds	r5, r1, #3
 8005996:	f025 0503 	bic.w	r5, r5, #3
 800599a:	3508      	adds	r5, #8
 800599c:	2d0c      	cmp	r5, #12
 800599e:	bf38      	it	cc
 80059a0:	250c      	movcc	r5, #12
 80059a2:	2d00      	cmp	r5, #0
 80059a4:	4606      	mov	r6, r0
 80059a6:	db01      	blt.n	80059ac <_malloc_r+0x1c>
 80059a8:	42a9      	cmp	r1, r5
 80059aa:	d904      	bls.n	80059b6 <_malloc_r+0x26>
 80059ac:	230c      	movs	r3, #12
 80059ae:	6033      	str	r3, [r6, #0]
 80059b0:	2000      	movs	r0, #0
 80059b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a8c <_malloc_r+0xfc>
 80059ba:	f000 f869 	bl	8005a90 <__malloc_lock>
 80059be:	f8d8 3000 	ldr.w	r3, [r8]
 80059c2:	461c      	mov	r4, r3
 80059c4:	bb44      	cbnz	r4, 8005a18 <_malloc_r+0x88>
 80059c6:	4629      	mov	r1, r5
 80059c8:	4630      	mov	r0, r6
 80059ca:	f7ff ffbf 	bl	800594c <sbrk_aligned>
 80059ce:	1c43      	adds	r3, r0, #1
 80059d0:	4604      	mov	r4, r0
 80059d2:	d158      	bne.n	8005a86 <_malloc_r+0xf6>
 80059d4:	f8d8 4000 	ldr.w	r4, [r8]
 80059d8:	4627      	mov	r7, r4
 80059da:	2f00      	cmp	r7, #0
 80059dc:	d143      	bne.n	8005a66 <_malloc_r+0xd6>
 80059de:	2c00      	cmp	r4, #0
 80059e0:	d04b      	beq.n	8005a7a <_malloc_r+0xea>
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	4639      	mov	r1, r7
 80059e6:	4630      	mov	r0, r6
 80059e8:	eb04 0903 	add.w	r9, r4, r3
 80059ec:	f001 fdba 	bl	8007564 <_sbrk_r>
 80059f0:	4581      	cmp	r9, r0
 80059f2:	d142      	bne.n	8005a7a <_malloc_r+0xea>
 80059f4:	6821      	ldr	r1, [r4, #0]
 80059f6:	1a6d      	subs	r5, r5, r1
 80059f8:	4629      	mov	r1, r5
 80059fa:	4630      	mov	r0, r6
 80059fc:	f7ff ffa6 	bl	800594c <sbrk_aligned>
 8005a00:	3001      	adds	r0, #1
 8005a02:	d03a      	beq.n	8005a7a <_malloc_r+0xea>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	442b      	add	r3, r5
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	bb62      	cbnz	r2, 8005a6c <_malloc_r+0xdc>
 8005a12:	f8c8 7000 	str.w	r7, [r8]
 8005a16:	e00f      	b.n	8005a38 <_malloc_r+0xa8>
 8005a18:	6822      	ldr	r2, [r4, #0]
 8005a1a:	1b52      	subs	r2, r2, r5
 8005a1c:	d420      	bmi.n	8005a60 <_malloc_r+0xd0>
 8005a1e:	2a0b      	cmp	r2, #11
 8005a20:	d917      	bls.n	8005a52 <_malloc_r+0xc2>
 8005a22:	1961      	adds	r1, r4, r5
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	6025      	str	r5, [r4, #0]
 8005a28:	bf18      	it	ne
 8005a2a:	6059      	strne	r1, [r3, #4]
 8005a2c:	6863      	ldr	r3, [r4, #4]
 8005a2e:	bf08      	it	eq
 8005a30:	f8c8 1000 	streq.w	r1, [r8]
 8005a34:	5162      	str	r2, [r4, r5]
 8005a36:	604b      	str	r3, [r1, #4]
 8005a38:	4630      	mov	r0, r6
 8005a3a:	f000 f82f 	bl	8005a9c <__malloc_unlock>
 8005a3e:	f104 000b 	add.w	r0, r4, #11
 8005a42:	1d23      	adds	r3, r4, #4
 8005a44:	f020 0007 	bic.w	r0, r0, #7
 8005a48:	1ac2      	subs	r2, r0, r3
 8005a4a:	bf1c      	itt	ne
 8005a4c:	1a1b      	subne	r3, r3, r0
 8005a4e:	50a3      	strne	r3, [r4, r2]
 8005a50:	e7af      	b.n	80059b2 <_malloc_r+0x22>
 8005a52:	6862      	ldr	r2, [r4, #4]
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	bf0c      	ite	eq
 8005a58:	f8c8 2000 	streq.w	r2, [r8]
 8005a5c:	605a      	strne	r2, [r3, #4]
 8005a5e:	e7eb      	b.n	8005a38 <_malloc_r+0xa8>
 8005a60:	4623      	mov	r3, r4
 8005a62:	6864      	ldr	r4, [r4, #4]
 8005a64:	e7ae      	b.n	80059c4 <_malloc_r+0x34>
 8005a66:	463c      	mov	r4, r7
 8005a68:	687f      	ldr	r7, [r7, #4]
 8005a6a:	e7b6      	b.n	80059da <_malloc_r+0x4a>
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	42a3      	cmp	r3, r4
 8005a72:	d1fb      	bne.n	8005a6c <_malloc_r+0xdc>
 8005a74:	2300      	movs	r3, #0
 8005a76:	6053      	str	r3, [r2, #4]
 8005a78:	e7de      	b.n	8005a38 <_malloc_r+0xa8>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	6033      	str	r3, [r6, #0]
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f000 f80c 	bl	8005a9c <__malloc_unlock>
 8005a84:	e794      	b.n	80059b0 <_malloc_r+0x20>
 8005a86:	6005      	str	r5, [r0, #0]
 8005a88:	e7d6      	b.n	8005a38 <_malloc_r+0xa8>
 8005a8a:	bf00      	nop
 8005a8c:	20000458 	.word	0x20000458

08005a90 <__malloc_lock>:
 8005a90:	4801      	ldr	r0, [pc, #4]	@ (8005a98 <__malloc_lock+0x8>)
 8005a92:	f7ff b8a8 	b.w	8004be6 <__retarget_lock_acquire_recursive>
 8005a96:	bf00      	nop
 8005a98:	20000450 	.word	0x20000450

08005a9c <__malloc_unlock>:
 8005a9c:	4801      	ldr	r0, [pc, #4]	@ (8005aa4 <__malloc_unlock+0x8>)
 8005a9e:	f7ff b8a3 	b.w	8004be8 <__retarget_lock_release_recursive>
 8005aa2:	bf00      	nop
 8005aa4:	20000450 	.word	0x20000450

08005aa8 <_Balloc>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	69c6      	ldr	r6, [r0, #28]
 8005aac:	4604      	mov	r4, r0
 8005aae:	460d      	mov	r5, r1
 8005ab0:	b976      	cbnz	r6, 8005ad0 <_Balloc+0x28>
 8005ab2:	2010      	movs	r0, #16
 8005ab4:	f7ff ff42 	bl	800593c <malloc>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	61e0      	str	r0, [r4, #28]
 8005abc:	b920      	cbnz	r0, 8005ac8 <_Balloc+0x20>
 8005abe:	4b18      	ldr	r3, [pc, #96]	@ (8005b20 <_Balloc+0x78>)
 8005ac0:	4818      	ldr	r0, [pc, #96]	@ (8005b24 <_Balloc+0x7c>)
 8005ac2:	216b      	movs	r1, #107	@ 0x6b
 8005ac4:	f001 fd74 	bl	80075b0 <__assert_func>
 8005ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005acc:	6006      	str	r6, [r0, #0]
 8005ace:	60c6      	str	r6, [r0, #12]
 8005ad0:	69e6      	ldr	r6, [r4, #28]
 8005ad2:	68f3      	ldr	r3, [r6, #12]
 8005ad4:	b183      	cbz	r3, 8005af8 <_Balloc+0x50>
 8005ad6:	69e3      	ldr	r3, [r4, #28]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ade:	b9b8      	cbnz	r0, 8005b10 <_Balloc+0x68>
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	fa01 f605 	lsl.w	r6, r1, r5
 8005ae6:	1d72      	adds	r2, r6, #5
 8005ae8:	0092      	lsls	r2, r2, #2
 8005aea:	4620      	mov	r0, r4
 8005aec:	f001 fd7e 	bl	80075ec <_calloc_r>
 8005af0:	b160      	cbz	r0, 8005b0c <_Balloc+0x64>
 8005af2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005af6:	e00e      	b.n	8005b16 <_Balloc+0x6e>
 8005af8:	2221      	movs	r2, #33	@ 0x21
 8005afa:	2104      	movs	r1, #4
 8005afc:	4620      	mov	r0, r4
 8005afe:	f001 fd75 	bl	80075ec <_calloc_r>
 8005b02:	69e3      	ldr	r3, [r4, #28]
 8005b04:	60f0      	str	r0, [r6, #12]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e4      	bne.n	8005ad6 <_Balloc+0x2e>
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	6802      	ldr	r2, [r0, #0]
 8005b12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b16:	2300      	movs	r3, #0
 8005b18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b1c:	e7f7      	b.n	8005b0e <_Balloc+0x66>
 8005b1e:	bf00      	nop
 8005b20:	08009256 	.word	0x08009256
 8005b24:	080092d6 	.word	0x080092d6

08005b28 <_Bfree>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	69c6      	ldr	r6, [r0, #28]
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	460c      	mov	r4, r1
 8005b30:	b976      	cbnz	r6, 8005b50 <_Bfree+0x28>
 8005b32:	2010      	movs	r0, #16
 8005b34:	f7ff ff02 	bl	800593c <malloc>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	61e8      	str	r0, [r5, #28]
 8005b3c:	b920      	cbnz	r0, 8005b48 <_Bfree+0x20>
 8005b3e:	4b09      	ldr	r3, [pc, #36]	@ (8005b64 <_Bfree+0x3c>)
 8005b40:	4809      	ldr	r0, [pc, #36]	@ (8005b68 <_Bfree+0x40>)
 8005b42:	218f      	movs	r1, #143	@ 0x8f
 8005b44:	f001 fd34 	bl	80075b0 <__assert_func>
 8005b48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b4c:	6006      	str	r6, [r0, #0]
 8005b4e:	60c6      	str	r6, [r0, #12]
 8005b50:	b13c      	cbz	r4, 8005b62 <_Bfree+0x3a>
 8005b52:	69eb      	ldr	r3, [r5, #28]
 8005b54:	6862      	ldr	r2, [r4, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b5c:	6021      	str	r1, [r4, #0]
 8005b5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b62:	bd70      	pop	{r4, r5, r6, pc}
 8005b64:	08009256 	.word	0x08009256
 8005b68:	080092d6 	.word	0x080092d6

08005b6c <__multadd>:
 8005b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b70:	690d      	ldr	r5, [r1, #16]
 8005b72:	4607      	mov	r7, r0
 8005b74:	460c      	mov	r4, r1
 8005b76:	461e      	mov	r6, r3
 8005b78:	f101 0c14 	add.w	ip, r1, #20
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f8dc 3000 	ldr.w	r3, [ip]
 8005b82:	b299      	uxth	r1, r3
 8005b84:	fb02 6101 	mla	r1, r2, r1, r6
 8005b88:	0c1e      	lsrs	r6, r3, #16
 8005b8a:	0c0b      	lsrs	r3, r1, #16
 8005b8c:	fb02 3306 	mla	r3, r2, r6, r3
 8005b90:	b289      	uxth	r1, r1
 8005b92:	3001      	adds	r0, #1
 8005b94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b98:	4285      	cmp	r5, r0
 8005b9a:	f84c 1b04 	str.w	r1, [ip], #4
 8005b9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ba2:	dcec      	bgt.n	8005b7e <__multadd+0x12>
 8005ba4:	b30e      	cbz	r6, 8005bea <__multadd+0x7e>
 8005ba6:	68a3      	ldr	r3, [r4, #8]
 8005ba8:	42ab      	cmp	r3, r5
 8005baa:	dc19      	bgt.n	8005be0 <__multadd+0x74>
 8005bac:	6861      	ldr	r1, [r4, #4]
 8005bae:	4638      	mov	r0, r7
 8005bb0:	3101      	adds	r1, #1
 8005bb2:	f7ff ff79 	bl	8005aa8 <_Balloc>
 8005bb6:	4680      	mov	r8, r0
 8005bb8:	b928      	cbnz	r0, 8005bc6 <__multadd+0x5a>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf0 <__multadd+0x84>)
 8005bbe:	480d      	ldr	r0, [pc, #52]	@ (8005bf4 <__multadd+0x88>)
 8005bc0:	21ba      	movs	r1, #186	@ 0xba
 8005bc2:	f001 fcf5 	bl	80075b0 <__assert_func>
 8005bc6:	6922      	ldr	r2, [r4, #16]
 8005bc8:	3202      	adds	r2, #2
 8005bca:	f104 010c 	add.w	r1, r4, #12
 8005bce:	0092      	lsls	r2, r2, #2
 8005bd0:	300c      	adds	r0, #12
 8005bd2:	f001 fcd7 	bl	8007584 <memcpy>
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	4638      	mov	r0, r7
 8005bda:	f7ff ffa5 	bl	8005b28 <_Bfree>
 8005bde:	4644      	mov	r4, r8
 8005be0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005be4:	3501      	adds	r5, #1
 8005be6:	615e      	str	r6, [r3, #20]
 8005be8:	6125      	str	r5, [r4, #16]
 8005bea:	4620      	mov	r0, r4
 8005bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf0:	080092c5 	.word	0x080092c5
 8005bf4:	080092d6 	.word	0x080092d6

08005bf8 <__s2b>:
 8005bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	4615      	mov	r5, r2
 8005c00:	461f      	mov	r7, r3
 8005c02:	2209      	movs	r2, #9
 8005c04:	3308      	adds	r3, #8
 8005c06:	4606      	mov	r6, r0
 8005c08:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	2201      	movs	r2, #1
 8005c10:	429a      	cmp	r2, r3
 8005c12:	db09      	blt.n	8005c28 <__s2b+0x30>
 8005c14:	4630      	mov	r0, r6
 8005c16:	f7ff ff47 	bl	8005aa8 <_Balloc>
 8005c1a:	b940      	cbnz	r0, 8005c2e <__s2b+0x36>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	4b19      	ldr	r3, [pc, #100]	@ (8005c84 <__s2b+0x8c>)
 8005c20:	4819      	ldr	r0, [pc, #100]	@ (8005c88 <__s2b+0x90>)
 8005c22:	21d3      	movs	r1, #211	@ 0xd3
 8005c24:	f001 fcc4 	bl	80075b0 <__assert_func>
 8005c28:	0052      	lsls	r2, r2, #1
 8005c2a:	3101      	adds	r1, #1
 8005c2c:	e7f0      	b.n	8005c10 <__s2b+0x18>
 8005c2e:	9b08      	ldr	r3, [sp, #32]
 8005c30:	6143      	str	r3, [r0, #20]
 8005c32:	2d09      	cmp	r5, #9
 8005c34:	f04f 0301 	mov.w	r3, #1
 8005c38:	6103      	str	r3, [r0, #16]
 8005c3a:	dd16      	ble.n	8005c6a <__s2b+0x72>
 8005c3c:	f104 0909 	add.w	r9, r4, #9
 8005c40:	46c8      	mov	r8, r9
 8005c42:	442c      	add	r4, r5
 8005c44:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005c48:	4601      	mov	r1, r0
 8005c4a:	3b30      	subs	r3, #48	@ 0x30
 8005c4c:	220a      	movs	r2, #10
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f7ff ff8c 	bl	8005b6c <__multadd>
 8005c54:	45a0      	cmp	r8, r4
 8005c56:	d1f5      	bne.n	8005c44 <__s2b+0x4c>
 8005c58:	f1a5 0408 	sub.w	r4, r5, #8
 8005c5c:	444c      	add	r4, r9
 8005c5e:	1b2d      	subs	r5, r5, r4
 8005c60:	1963      	adds	r3, r4, r5
 8005c62:	42bb      	cmp	r3, r7
 8005c64:	db04      	blt.n	8005c70 <__s2b+0x78>
 8005c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c6a:	340a      	adds	r4, #10
 8005c6c:	2509      	movs	r5, #9
 8005c6e:	e7f6      	b.n	8005c5e <__s2b+0x66>
 8005c70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c74:	4601      	mov	r1, r0
 8005c76:	3b30      	subs	r3, #48	@ 0x30
 8005c78:	220a      	movs	r2, #10
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f7ff ff76 	bl	8005b6c <__multadd>
 8005c80:	e7ee      	b.n	8005c60 <__s2b+0x68>
 8005c82:	bf00      	nop
 8005c84:	080092c5 	.word	0x080092c5
 8005c88:	080092d6 	.word	0x080092d6

08005c8c <__hi0bits>:
 8005c8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005c90:	4603      	mov	r3, r0
 8005c92:	bf36      	itet	cc
 8005c94:	0403      	lslcc	r3, r0, #16
 8005c96:	2000      	movcs	r0, #0
 8005c98:	2010      	movcc	r0, #16
 8005c9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c9e:	bf3c      	itt	cc
 8005ca0:	021b      	lslcc	r3, r3, #8
 8005ca2:	3008      	addcc	r0, #8
 8005ca4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ca8:	bf3c      	itt	cc
 8005caa:	011b      	lslcc	r3, r3, #4
 8005cac:	3004      	addcc	r0, #4
 8005cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cb2:	bf3c      	itt	cc
 8005cb4:	009b      	lslcc	r3, r3, #2
 8005cb6:	3002      	addcc	r0, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	db05      	blt.n	8005cc8 <__hi0bits+0x3c>
 8005cbc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005cc0:	f100 0001 	add.w	r0, r0, #1
 8005cc4:	bf08      	it	eq
 8005cc6:	2020      	moveq	r0, #32
 8005cc8:	4770      	bx	lr

08005cca <__lo0bits>:
 8005cca:	6803      	ldr	r3, [r0, #0]
 8005ccc:	4602      	mov	r2, r0
 8005cce:	f013 0007 	ands.w	r0, r3, #7
 8005cd2:	d00b      	beq.n	8005cec <__lo0bits+0x22>
 8005cd4:	07d9      	lsls	r1, r3, #31
 8005cd6:	d421      	bmi.n	8005d1c <__lo0bits+0x52>
 8005cd8:	0798      	lsls	r0, r3, #30
 8005cda:	bf49      	itett	mi
 8005cdc:	085b      	lsrmi	r3, r3, #1
 8005cde:	089b      	lsrpl	r3, r3, #2
 8005ce0:	2001      	movmi	r0, #1
 8005ce2:	6013      	strmi	r3, [r2, #0]
 8005ce4:	bf5c      	itt	pl
 8005ce6:	6013      	strpl	r3, [r2, #0]
 8005ce8:	2002      	movpl	r0, #2
 8005cea:	4770      	bx	lr
 8005cec:	b299      	uxth	r1, r3
 8005cee:	b909      	cbnz	r1, 8005cf4 <__lo0bits+0x2a>
 8005cf0:	0c1b      	lsrs	r3, r3, #16
 8005cf2:	2010      	movs	r0, #16
 8005cf4:	b2d9      	uxtb	r1, r3
 8005cf6:	b909      	cbnz	r1, 8005cfc <__lo0bits+0x32>
 8005cf8:	3008      	adds	r0, #8
 8005cfa:	0a1b      	lsrs	r3, r3, #8
 8005cfc:	0719      	lsls	r1, r3, #28
 8005cfe:	bf04      	itt	eq
 8005d00:	091b      	lsreq	r3, r3, #4
 8005d02:	3004      	addeq	r0, #4
 8005d04:	0799      	lsls	r1, r3, #30
 8005d06:	bf04      	itt	eq
 8005d08:	089b      	lsreq	r3, r3, #2
 8005d0a:	3002      	addeq	r0, #2
 8005d0c:	07d9      	lsls	r1, r3, #31
 8005d0e:	d403      	bmi.n	8005d18 <__lo0bits+0x4e>
 8005d10:	085b      	lsrs	r3, r3, #1
 8005d12:	f100 0001 	add.w	r0, r0, #1
 8005d16:	d003      	beq.n	8005d20 <__lo0bits+0x56>
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	4770      	bx	lr
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	4770      	bx	lr
 8005d20:	2020      	movs	r0, #32
 8005d22:	4770      	bx	lr

08005d24 <__i2b>:
 8005d24:	b510      	push	{r4, lr}
 8005d26:	460c      	mov	r4, r1
 8005d28:	2101      	movs	r1, #1
 8005d2a:	f7ff febd 	bl	8005aa8 <_Balloc>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	b928      	cbnz	r0, 8005d3e <__i2b+0x1a>
 8005d32:	4b05      	ldr	r3, [pc, #20]	@ (8005d48 <__i2b+0x24>)
 8005d34:	4805      	ldr	r0, [pc, #20]	@ (8005d4c <__i2b+0x28>)
 8005d36:	f240 1145 	movw	r1, #325	@ 0x145
 8005d3a:	f001 fc39 	bl	80075b0 <__assert_func>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	6144      	str	r4, [r0, #20]
 8005d42:	6103      	str	r3, [r0, #16]
 8005d44:	bd10      	pop	{r4, pc}
 8005d46:	bf00      	nop
 8005d48:	080092c5 	.word	0x080092c5
 8005d4c:	080092d6 	.word	0x080092d6

08005d50 <__multiply>:
 8005d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d54:	4617      	mov	r7, r2
 8005d56:	690a      	ldr	r2, [r1, #16]
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	bfa8      	it	ge
 8005d5e:	463b      	movge	r3, r7
 8005d60:	4689      	mov	r9, r1
 8005d62:	bfa4      	itt	ge
 8005d64:	460f      	movge	r7, r1
 8005d66:	4699      	movge	r9, r3
 8005d68:	693d      	ldr	r5, [r7, #16]
 8005d6a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	eb05 060a 	add.w	r6, r5, sl
 8005d76:	42b3      	cmp	r3, r6
 8005d78:	b085      	sub	sp, #20
 8005d7a:	bfb8      	it	lt
 8005d7c:	3101      	addlt	r1, #1
 8005d7e:	f7ff fe93 	bl	8005aa8 <_Balloc>
 8005d82:	b930      	cbnz	r0, 8005d92 <__multiply+0x42>
 8005d84:	4602      	mov	r2, r0
 8005d86:	4b41      	ldr	r3, [pc, #260]	@ (8005e8c <__multiply+0x13c>)
 8005d88:	4841      	ldr	r0, [pc, #260]	@ (8005e90 <__multiply+0x140>)
 8005d8a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005d8e:	f001 fc0f 	bl	80075b0 <__assert_func>
 8005d92:	f100 0414 	add.w	r4, r0, #20
 8005d96:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005d9a:	4623      	mov	r3, r4
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	4573      	cmp	r3, lr
 8005da0:	d320      	bcc.n	8005de4 <__multiply+0x94>
 8005da2:	f107 0814 	add.w	r8, r7, #20
 8005da6:	f109 0114 	add.w	r1, r9, #20
 8005daa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005dae:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005db2:	9302      	str	r3, [sp, #8]
 8005db4:	1beb      	subs	r3, r5, r7
 8005db6:	3b15      	subs	r3, #21
 8005db8:	f023 0303 	bic.w	r3, r3, #3
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	3715      	adds	r7, #21
 8005dc0:	42bd      	cmp	r5, r7
 8005dc2:	bf38      	it	cc
 8005dc4:	2304      	movcc	r3, #4
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	9b02      	ldr	r3, [sp, #8]
 8005dca:	9103      	str	r1, [sp, #12]
 8005dcc:	428b      	cmp	r3, r1
 8005dce:	d80c      	bhi.n	8005dea <__multiply+0x9a>
 8005dd0:	2e00      	cmp	r6, #0
 8005dd2:	dd03      	ble.n	8005ddc <__multiply+0x8c>
 8005dd4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d055      	beq.n	8005e88 <__multiply+0x138>
 8005ddc:	6106      	str	r6, [r0, #16]
 8005dde:	b005      	add	sp, #20
 8005de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de4:	f843 2b04 	str.w	r2, [r3], #4
 8005de8:	e7d9      	b.n	8005d9e <__multiply+0x4e>
 8005dea:	f8b1 a000 	ldrh.w	sl, [r1]
 8005dee:	f1ba 0f00 	cmp.w	sl, #0
 8005df2:	d01f      	beq.n	8005e34 <__multiply+0xe4>
 8005df4:	46c4      	mov	ip, r8
 8005df6:	46a1      	mov	r9, r4
 8005df8:	2700      	movs	r7, #0
 8005dfa:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005dfe:	f8d9 3000 	ldr.w	r3, [r9]
 8005e02:	fa1f fb82 	uxth.w	fp, r2
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	fb0a 330b 	mla	r3, sl, fp, r3
 8005e0c:	443b      	add	r3, r7
 8005e0e:	f8d9 7000 	ldr.w	r7, [r9]
 8005e12:	0c12      	lsrs	r2, r2, #16
 8005e14:	0c3f      	lsrs	r7, r7, #16
 8005e16:	fb0a 7202 	mla	r2, sl, r2, r7
 8005e1a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e24:	4565      	cmp	r5, ip
 8005e26:	f849 3b04 	str.w	r3, [r9], #4
 8005e2a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005e2e:	d8e4      	bhi.n	8005dfa <__multiply+0xaa>
 8005e30:	9b01      	ldr	r3, [sp, #4]
 8005e32:	50e7      	str	r7, [r4, r3]
 8005e34:	9b03      	ldr	r3, [sp, #12]
 8005e36:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005e3a:	3104      	adds	r1, #4
 8005e3c:	f1b9 0f00 	cmp.w	r9, #0
 8005e40:	d020      	beq.n	8005e84 <__multiply+0x134>
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	4647      	mov	r7, r8
 8005e46:	46a4      	mov	ip, r4
 8005e48:	f04f 0a00 	mov.w	sl, #0
 8005e4c:	f8b7 b000 	ldrh.w	fp, [r7]
 8005e50:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005e54:	fb09 220b 	mla	r2, r9, fp, r2
 8005e58:	4452      	add	r2, sl
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e60:	f84c 3b04 	str.w	r3, [ip], #4
 8005e64:	f857 3b04 	ldr.w	r3, [r7], #4
 8005e68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e6c:	f8bc 3000 	ldrh.w	r3, [ip]
 8005e70:	fb09 330a 	mla	r3, r9, sl, r3
 8005e74:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005e78:	42bd      	cmp	r5, r7
 8005e7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e7e:	d8e5      	bhi.n	8005e4c <__multiply+0xfc>
 8005e80:	9a01      	ldr	r2, [sp, #4]
 8005e82:	50a3      	str	r3, [r4, r2]
 8005e84:	3404      	adds	r4, #4
 8005e86:	e79f      	b.n	8005dc8 <__multiply+0x78>
 8005e88:	3e01      	subs	r6, #1
 8005e8a:	e7a1      	b.n	8005dd0 <__multiply+0x80>
 8005e8c:	080092c5 	.word	0x080092c5
 8005e90:	080092d6 	.word	0x080092d6

08005e94 <__pow5mult>:
 8005e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e98:	4615      	mov	r5, r2
 8005e9a:	f012 0203 	ands.w	r2, r2, #3
 8005e9e:	4607      	mov	r7, r0
 8005ea0:	460e      	mov	r6, r1
 8005ea2:	d007      	beq.n	8005eb4 <__pow5mult+0x20>
 8005ea4:	4c25      	ldr	r4, [pc, #148]	@ (8005f3c <__pow5mult+0xa8>)
 8005ea6:	3a01      	subs	r2, #1
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005eae:	f7ff fe5d 	bl	8005b6c <__multadd>
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	10ad      	asrs	r5, r5, #2
 8005eb6:	d03d      	beq.n	8005f34 <__pow5mult+0xa0>
 8005eb8:	69fc      	ldr	r4, [r7, #28]
 8005eba:	b97c      	cbnz	r4, 8005edc <__pow5mult+0x48>
 8005ebc:	2010      	movs	r0, #16
 8005ebe:	f7ff fd3d 	bl	800593c <malloc>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	61f8      	str	r0, [r7, #28]
 8005ec6:	b928      	cbnz	r0, 8005ed4 <__pow5mult+0x40>
 8005ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f40 <__pow5mult+0xac>)
 8005eca:	481e      	ldr	r0, [pc, #120]	@ (8005f44 <__pow5mult+0xb0>)
 8005ecc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005ed0:	f001 fb6e 	bl	80075b0 <__assert_func>
 8005ed4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ed8:	6004      	str	r4, [r0, #0]
 8005eda:	60c4      	str	r4, [r0, #12]
 8005edc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005ee0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ee4:	b94c      	cbnz	r4, 8005efa <__pow5mult+0x66>
 8005ee6:	f240 2171 	movw	r1, #625	@ 0x271
 8005eea:	4638      	mov	r0, r7
 8005eec:	f7ff ff1a 	bl	8005d24 <__i2b>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	6003      	str	r3, [r0, #0]
 8005efa:	f04f 0900 	mov.w	r9, #0
 8005efe:	07eb      	lsls	r3, r5, #31
 8005f00:	d50a      	bpl.n	8005f18 <__pow5mult+0x84>
 8005f02:	4631      	mov	r1, r6
 8005f04:	4622      	mov	r2, r4
 8005f06:	4638      	mov	r0, r7
 8005f08:	f7ff ff22 	bl	8005d50 <__multiply>
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4680      	mov	r8, r0
 8005f10:	4638      	mov	r0, r7
 8005f12:	f7ff fe09 	bl	8005b28 <_Bfree>
 8005f16:	4646      	mov	r6, r8
 8005f18:	106d      	asrs	r5, r5, #1
 8005f1a:	d00b      	beq.n	8005f34 <__pow5mult+0xa0>
 8005f1c:	6820      	ldr	r0, [r4, #0]
 8005f1e:	b938      	cbnz	r0, 8005f30 <__pow5mult+0x9c>
 8005f20:	4622      	mov	r2, r4
 8005f22:	4621      	mov	r1, r4
 8005f24:	4638      	mov	r0, r7
 8005f26:	f7ff ff13 	bl	8005d50 <__multiply>
 8005f2a:	6020      	str	r0, [r4, #0]
 8005f2c:	f8c0 9000 	str.w	r9, [r0]
 8005f30:	4604      	mov	r4, r0
 8005f32:	e7e4      	b.n	8005efe <__pow5mult+0x6a>
 8005f34:	4630      	mov	r0, r6
 8005f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f3a:	bf00      	nop
 8005f3c:	080093e8 	.word	0x080093e8
 8005f40:	08009256 	.word	0x08009256
 8005f44:	080092d6 	.word	0x080092d6

08005f48 <__lshift>:
 8005f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	6849      	ldr	r1, [r1, #4]
 8005f50:	6923      	ldr	r3, [r4, #16]
 8005f52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f56:	68a3      	ldr	r3, [r4, #8]
 8005f58:	4607      	mov	r7, r0
 8005f5a:	4691      	mov	r9, r2
 8005f5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f60:	f108 0601 	add.w	r6, r8, #1
 8005f64:	42b3      	cmp	r3, r6
 8005f66:	db0b      	blt.n	8005f80 <__lshift+0x38>
 8005f68:	4638      	mov	r0, r7
 8005f6a:	f7ff fd9d 	bl	8005aa8 <_Balloc>
 8005f6e:	4605      	mov	r5, r0
 8005f70:	b948      	cbnz	r0, 8005f86 <__lshift+0x3e>
 8005f72:	4602      	mov	r2, r0
 8005f74:	4b28      	ldr	r3, [pc, #160]	@ (8006018 <__lshift+0xd0>)
 8005f76:	4829      	ldr	r0, [pc, #164]	@ (800601c <__lshift+0xd4>)
 8005f78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005f7c:	f001 fb18 	bl	80075b0 <__assert_func>
 8005f80:	3101      	adds	r1, #1
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	e7ee      	b.n	8005f64 <__lshift+0x1c>
 8005f86:	2300      	movs	r3, #0
 8005f88:	f100 0114 	add.w	r1, r0, #20
 8005f8c:	f100 0210 	add.w	r2, r0, #16
 8005f90:	4618      	mov	r0, r3
 8005f92:	4553      	cmp	r3, sl
 8005f94:	db33      	blt.n	8005ffe <__lshift+0xb6>
 8005f96:	6920      	ldr	r0, [r4, #16]
 8005f98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f9c:	f104 0314 	add.w	r3, r4, #20
 8005fa0:	f019 091f 	ands.w	r9, r9, #31
 8005fa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005fa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005fac:	d02b      	beq.n	8006006 <__lshift+0xbe>
 8005fae:	f1c9 0e20 	rsb	lr, r9, #32
 8005fb2:	468a      	mov	sl, r1
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	fa00 f009 	lsl.w	r0, r0, r9
 8005fbc:	4310      	orrs	r0, r2
 8005fbe:	f84a 0b04 	str.w	r0, [sl], #4
 8005fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fc6:	459c      	cmp	ip, r3
 8005fc8:	fa22 f20e 	lsr.w	r2, r2, lr
 8005fcc:	d8f3      	bhi.n	8005fb6 <__lshift+0x6e>
 8005fce:	ebac 0304 	sub.w	r3, ip, r4
 8005fd2:	3b15      	subs	r3, #21
 8005fd4:	f023 0303 	bic.w	r3, r3, #3
 8005fd8:	3304      	adds	r3, #4
 8005fda:	f104 0015 	add.w	r0, r4, #21
 8005fde:	4560      	cmp	r0, ip
 8005fe0:	bf88      	it	hi
 8005fe2:	2304      	movhi	r3, #4
 8005fe4:	50ca      	str	r2, [r1, r3]
 8005fe6:	b10a      	cbz	r2, 8005fec <__lshift+0xa4>
 8005fe8:	f108 0602 	add.w	r6, r8, #2
 8005fec:	3e01      	subs	r6, #1
 8005fee:	4638      	mov	r0, r7
 8005ff0:	612e      	str	r6, [r5, #16]
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	f7ff fd98 	bl	8005b28 <_Bfree>
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006002:	3301      	adds	r3, #1
 8006004:	e7c5      	b.n	8005f92 <__lshift+0x4a>
 8006006:	3904      	subs	r1, #4
 8006008:	f853 2b04 	ldr.w	r2, [r3], #4
 800600c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006010:	459c      	cmp	ip, r3
 8006012:	d8f9      	bhi.n	8006008 <__lshift+0xc0>
 8006014:	e7ea      	b.n	8005fec <__lshift+0xa4>
 8006016:	bf00      	nop
 8006018:	080092c5 	.word	0x080092c5
 800601c:	080092d6 	.word	0x080092d6

08006020 <__mcmp>:
 8006020:	690a      	ldr	r2, [r1, #16]
 8006022:	4603      	mov	r3, r0
 8006024:	6900      	ldr	r0, [r0, #16]
 8006026:	1a80      	subs	r0, r0, r2
 8006028:	b530      	push	{r4, r5, lr}
 800602a:	d10e      	bne.n	800604a <__mcmp+0x2a>
 800602c:	3314      	adds	r3, #20
 800602e:	3114      	adds	r1, #20
 8006030:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006034:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006038:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800603c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006040:	4295      	cmp	r5, r2
 8006042:	d003      	beq.n	800604c <__mcmp+0x2c>
 8006044:	d205      	bcs.n	8006052 <__mcmp+0x32>
 8006046:	f04f 30ff 	mov.w	r0, #4294967295
 800604a:	bd30      	pop	{r4, r5, pc}
 800604c:	42a3      	cmp	r3, r4
 800604e:	d3f3      	bcc.n	8006038 <__mcmp+0x18>
 8006050:	e7fb      	b.n	800604a <__mcmp+0x2a>
 8006052:	2001      	movs	r0, #1
 8006054:	e7f9      	b.n	800604a <__mcmp+0x2a>
	...

08006058 <__mdiff>:
 8006058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	4689      	mov	r9, r1
 800605e:	4606      	mov	r6, r0
 8006060:	4611      	mov	r1, r2
 8006062:	4648      	mov	r0, r9
 8006064:	4614      	mov	r4, r2
 8006066:	f7ff ffdb 	bl	8006020 <__mcmp>
 800606a:	1e05      	subs	r5, r0, #0
 800606c:	d112      	bne.n	8006094 <__mdiff+0x3c>
 800606e:	4629      	mov	r1, r5
 8006070:	4630      	mov	r0, r6
 8006072:	f7ff fd19 	bl	8005aa8 <_Balloc>
 8006076:	4602      	mov	r2, r0
 8006078:	b928      	cbnz	r0, 8006086 <__mdiff+0x2e>
 800607a:	4b3f      	ldr	r3, [pc, #252]	@ (8006178 <__mdiff+0x120>)
 800607c:	f240 2137 	movw	r1, #567	@ 0x237
 8006080:	483e      	ldr	r0, [pc, #248]	@ (800617c <__mdiff+0x124>)
 8006082:	f001 fa95 	bl	80075b0 <__assert_func>
 8006086:	2301      	movs	r3, #1
 8006088:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800608c:	4610      	mov	r0, r2
 800608e:	b003      	add	sp, #12
 8006090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006094:	bfbc      	itt	lt
 8006096:	464b      	movlt	r3, r9
 8006098:	46a1      	movlt	r9, r4
 800609a:	4630      	mov	r0, r6
 800609c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80060a0:	bfba      	itte	lt
 80060a2:	461c      	movlt	r4, r3
 80060a4:	2501      	movlt	r5, #1
 80060a6:	2500      	movge	r5, #0
 80060a8:	f7ff fcfe 	bl	8005aa8 <_Balloc>
 80060ac:	4602      	mov	r2, r0
 80060ae:	b918      	cbnz	r0, 80060b8 <__mdiff+0x60>
 80060b0:	4b31      	ldr	r3, [pc, #196]	@ (8006178 <__mdiff+0x120>)
 80060b2:	f240 2145 	movw	r1, #581	@ 0x245
 80060b6:	e7e3      	b.n	8006080 <__mdiff+0x28>
 80060b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80060bc:	6926      	ldr	r6, [r4, #16]
 80060be:	60c5      	str	r5, [r0, #12]
 80060c0:	f109 0310 	add.w	r3, r9, #16
 80060c4:	f109 0514 	add.w	r5, r9, #20
 80060c8:	f104 0e14 	add.w	lr, r4, #20
 80060cc:	f100 0b14 	add.w	fp, r0, #20
 80060d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80060d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80060d8:	9301      	str	r3, [sp, #4]
 80060da:	46d9      	mov	r9, fp
 80060dc:	f04f 0c00 	mov.w	ip, #0
 80060e0:	9b01      	ldr	r3, [sp, #4]
 80060e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80060e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	fa1f f38a 	uxth.w	r3, sl
 80060f0:	4619      	mov	r1, r3
 80060f2:	b283      	uxth	r3, r0
 80060f4:	1acb      	subs	r3, r1, r3
 80060f6:	0c00      	lsrs	r0, r0, #16
 80060f8:	4463      	add	r3, ip
 80060fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80060fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006102:	b29b      	uxth	r3, r3
 8006104:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006108:	4576      	cmp	r6, lr
 800610a:	f849 3b04 	str.w	r3, [r9], #4
 800610e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006112:	d8e5      	bhi.n	80060e0 <__mdiff+0x88>
 8006114:	1b33      	subs	r3, r6, r4
 8006116:	3b15      	subs	r3, #21
 8006118:	f023 0303 	bic.w	r3, r3, #3
 800611c:	3415      	adds	r4, #21
 800611e:	3304      	adds	r3, #4
 8006120:	42a6      	cmp	r6, r4
 8006122:	bf38      	it	cc
 8006124:	2304      	movcc	r3, #4
 8006126:	441d      	add	r5, r3
 8006128:	445b      	add	r3, fp
 800612a:	461e      	mov	r6, r3
 800612c:	462c      	mov	r4, r5
 800612e:	4544      	cmp	r4, r8
 8006130:	d30e      	bcc.n	8006150 <__mdiff+0xf8>
 8006132:	f108 0103 	add.w	r1, r8, #3
 8006136:	1b49      	subs	r1, r1, r5
 8006138:	f021 0103 	bic.w	r1, r1, #3
 800613c:	3d03      	subs	r5, #3
 800613e:	45a8      	cmp	r8, r5
 8006140:	bf38      	it	cc
 8006142:	2100      	movcc	r1, #0
 8006144:	440b      	add	r3, r1
 8006146:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800614a:	b191      	cbz	r1, 8006172 <__mdiff+0x11a>
 800614c:	6117      	str	r7, [r2, #16]
 800614e:	e79d      	b.n	800608c <__mdiff+0x34>
 8006150:	f854 1b04 	ldr.w	r1, [r4], #4
 8006154:	46e6      	mov	lr, ip
 8006156:	0c08      	lsrs	r0, r1, #16
 8006158:	fa1c fc81 	uxtah	ip, ip, r1
 800615c:	4471      	add	r1, lr
 800615e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006162:	b289      	uxth	r1, r1
 8006164:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006168:	f846 1b04 	str.w	r1, [r6], #4
 800616c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006170:	e7dd      	b.n	800612e <__mdiff+0xd6>
 8006172:	3f01      	subs	r7, #1
 8006174:	e7e7      	b.n	8006146 <__mdiff+0xee>
 8006176:	bf00      	nop
 8006178:	080092c5 	.word	0x080092c5
 800617c:	080092d6 	.word	0x080092d6

08006180 <__ulp>:
 8006180:	b082      	sub	sp, #8
 8006182:	ed8d 0b00 	vstr	d0, [sp]
 8006186:	9a01      	ldr	r2, [sp, #4]
 8006188:	4b0f      	ldr	r3, [pc, #60]	@ (80061c8 <__ulp+0x48>)
 800618a:	4013      	ands	r3, r2
 800618c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006190:	2b00      	cmp	r3, #0
 8006192:	dc08      	bgt.n	80061a6 <__ulp+0x26>
 8006194:	425b      	negs	r3, r3
 8006196:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800619a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800619e:	da04      	bge.n	80061aa <__ulp+0x2a>
 80061a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80061a4:	4113      	asrs	r3, r2
 80061a6:	2200      	movs	r2, #0
 80061a8:	e008      	b.n	80061bc <__ulp+0x3c>
 80061aa:	f1a2 0314 	sub.w	r3, r2, #20
 80061ae:	2b1e      	cmp	r3, #30
 80061b0:	bfda      	itte	le
 80061b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80061b6:	40da      	lsrle	r2, r3
 80061b8:	2201      	movgt	r2, #1
 80061ba:	2300      	movs	r3, #0
 80061bc:	4619      	mov	r1, r3
 80061be:	4610      	mov	r0, r2
 80061c0:	ec41 0b10 	vmov	d0, r0, r1
 80061c4:	b002      	add	sp, #8
 80061c6:	4770      	bx	lr
 80061c8:	7ff00000 	.word	0x7ff00000

080061cc <__b2d>:
 80061cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d0:	6906      	ldr	r6, [r0, #16]
 80061d2:	f100 0814 	add.w	r8, r0, #20
 80061d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80061da:	1f37      	subs	r7, r6, #4
 80061dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80061e0:	4610      	mov	r0, r2
 80061e2:	f7ff fd53 	bl	8005c8c <__hi0bits>
 80061e6:	f1c0 0320 	rsb	r3, r0, #32
 80061ea:	280a      	cmp	r0, #10
 80061ec:	600b      	str	r3, [r1, #0]
 80061ee:	491b      	ldr	r1, [pc, #108]	@ (800625c <__b2d+0x90>)
 80061f0:	dc15      	bgt.n	800621e <__b2d+0x52>
 80061f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80061f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80061fa:	45b8      	cmp	r8, r7
 80061fc:	ea43 0501 	orr.w	r5, r3, r1
 8006200:	bf34      	ite	cc
 8006202:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006206:	2300      	movcs	r3, #0
 8006208:	3015      	adds	r0, #21
 800620a:	fa02 f000 	lsl.w	r0, r2, r0
 800620e:	fa23 f30c 	lsr.w	r3, r3, ip
 8006212:	4303      	orrs	r3, r0
 8006214:	461c      	mov	r4, r3
 8006216:	ec45 4b10 	vmov	d0, r4, r5
 800621a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800621e:	45b8      	cmp	r8, r7
 8006220:	bf3a      	itte	cc
 8006222:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006226:	f1a6 0708 	subcc.w	r7, r6, #8
 800622a:	2300      	movcs	r3, #0
 800622c:	380b      	subs	r0, #11
 800622e:	d012      	beq.n	8006256 <__b2d+0x8a>
 8006230:	f1c0 0120 	rsb	r1, r0, #32
 8006234:	fa23 f401 	lsr.w	r4, r3, r1
 8006238:	4082      	lsls	r2, r0
 800623a:	4322      	orrs	r2, r4
 800623c:	4547      	cmp	r7, r8
 800623e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006242:	bf8c      	ite	hi
 8006244:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006248:	2200      	movls	r2, #0
 800624a:	4083      	lsls	r3, r0
 800624c:	40ca      	lsrs	r2, r1
 800624e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006252:	4313      	orrs	r3, r2
 8006254:	e7de      	b.n	8006214 <__b2d+0x48>
 8006256:	ea42 0501 	orr.w	r5, r2, r1
 800625a:	e7db      	b.n	8006214 <__b2d+0x48>
 800625c:	3ff00000 	.word	0x3ff00000

08006260 <__d2b>:
 8006260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006264:	460f      	mov	r7, r1
 8006266:	2101      	movs	r1, #1
 8006268:	ec59 8b10 	vmov	r8, r9, d0
 800626c:	4616      	mov	r6, r2
 800626e:	f7ff fc1b 	bl	8005aa8 <_Balloc>
 8006272:	4604      	mov	r4, r0
 8006274:	b930      	cbnz	r0, 8006284 <__d2b+0x24>
 8006276:	4602      	mov	r2, r0
 8006278:	4b23      	ldr	r3, [pc, #140]	@ (8006308 <__d2b+0xa8>)
 800627a:	4824      	ldr	r0, [pc, #144]	@ (800630c <__d2b+0xac>)
 800627c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006280:	f001 f996 	bl	80075b0 <__assert_func>
 8006284:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006288:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800628c:	b10d      	cbz	r5, 8006292 <__d2b+0x32>
 800628e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	f1b8 0300 	subs.w	r3, r8, #0
 8006298:	d023      	beq.n	80062e2 <__d2b+0x82>
 800629a:	4668      	mov	r0, sp
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	f7ff fd14 	bl	8005cca <__lo0bits>
 80062a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80062a6:	b1d0      	cbz	r0, 80062de <__d2b+0x7e>
 80062a8:	f1c0 0320 	rsb	r3, r0, #32
 80062ac:	fa02 f303 	lsl.w	r3, r2, r3
 80062b0:	430b      	orrs	r3, r1
 80062b2:	40c2      	lsrs	r2, r0
 80062b4:	6163      	str	r3, [r4, #20]
 80062b6:	9201      	str	r2, [sp, #4]
 80062b8:	9b01      	ldr	r3, [sp, #4]
 80062ba:	61a3      	str	r3, [r4, #24]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	bf0c      	ite	eq
 80062c0:	2201      	moveq	r2, #1
 80062c2:	2202      	movne	r2, #2
 80062c4:	6122      	str	r2, [r4, #16]
 80062c6:	b1a5      	cbz	r5, 80062f2 <__d2b+0x92>
 80062c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80062cc:	4405      	add	r5, r0
 80062ce:	603d      	str	r5, [r7, #0]
 80062d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80062d4:	6030      	str	r0, [r6, #0]
 80062d6:	4620      	mov	r0, r4
 80062d8:	b003      	add	sp, #12
 80062da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062de:	6161      	str	r1, [r4, #20]
 80062e0:	e7ea      	b.n	80062b8 <__d2b+0x58>
 80062e2:	a801      	add	r0, sp, #4
 80062e4:	f7ff fcf1 	bl	8005cca <__lo0bits>
 80062e8:	9b01      	ldr	r3, [sp, #4]
 80062ea:	6163      	str	r3, [r4, #20]
 80062ec:	3020      	adds	r0, #32
 80062ee:	2201      	movs	r2, #1
 80062f0:	e7e8      	b.n	80062c4 <__d2b+0x64>
 80062f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80062f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80062fa:	6038      	str	r0, [r7, #0]
 80062fc:	6918      	ldr	r0, [r3, #16]
 80062fe:	f7ff fcc5 	bl	8005c8c <__hi0bits>
 8006302:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006306:	e7e5      	b.n	80062d4 <__d2b+0x74>
 8006308:	080092c5 	.word	0x080092c5
 800630c:	080092d6 	.word	0x080092d6

08006310 <__ratio>:
 8006310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006314:	b085      	sub	sp, #20
 8006316:	e9cd 1000 	strd	r1, r0, [sp]
 800631a:	a902      	add	r1, sp, #8
 800631c:	f7ff ff56 	bl	80061cc <__b2d>
 8006320:	9800      	ldr	r0, [sp, #0]
 8006322:	a903      	add	r1, sp, #12
 8006324:	ec55 4b10 	vmov	r4, r5, d0
 8006328:	f7ff ff50 	bl	80061cc <__b2d>
 800632c:	9b01      	ldr	r3, [sp, #4]
 800632e:	6919      	ldr	r1, [r3, #16]
 8006330:	9b00      	ldr	r3, [sp, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	1ac9      	subs	r1, r1, r3
 8006336:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800633a:	1a9b      	subs	r3, r3, r2
 800633c:	ec5b ab10 	vmov	sl, fp, d0
 8006340:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006344:	2b00      	cmp	r3, #0
 8006346:	bfce      	itee	gt
 8006348:	462a      	movgt	r2, r5
 800634a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800634e:	465a      	movle	r2, fp
 8006350:	462f      	mov	r7, r5
 8006352:	46d9      	mov	r9, fp
 8006354:	bfcc      	ite	gt
 8006356:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800635a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800635e:	464b      	mov	r3, r9
 8006360:	4652      	mov	r2, sl
 8006362:	4620      	mov	r0, r4
 8006364:	4639      	mov	r1, r7
 8006366:	f7fa fa71 	bl	800084c <__aeabi_ddiv>
 800636a:	ec41 0b10 	vmov	d0, r0, r1
 800636e:	b005      	add	sp, #20
 8006370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006374 <__copybits>:
 8006374:	3901      	subs	r1, #1
 8006376:	b570      	push	{r4, r5, r6, lr}
 8006378:	1149      	asrs	r1, r1, #5
 800637a:	6914      	ldr	r4, [r2, #16]
 800637c:	3101      	adds	r1, #1
 800637e:	f102 0314 	add.w	r3, r2, #20
 8006382:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006386:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800638a:	1f05      	subs	r5, r0, #4
 800638c:	42a3      	cmp	r3, r4
 800638e:	d30c      	bcc.n	80063aa <__copybits+0x36>
 8006390:	1aa3      	subs	r3, r4, r2
 8006392:	3b11      	subs	r3, #17
 8006394:	f023 0303 	bic.w	r3, r3, #3
 8006398:	3211      	adds	r2, #17
 800639a:	42a2      	cmp	r2, r4
 800639c:	bf88      	it	hi
 800639e:	2300      	movhi	r3, #0
 80063a0:	4418      	add	r0, r3
 80063a2:	2300      	movs	r3, #0
 80063a4:	4288      	cmp	r0, r1
 80063a6:	d305      	bcc.n	80063b4 <__copybits+0x40>
 80063a8:	bd70      	pop	{r4, r5, r6, pc}
 80063aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80063ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80063b2:	e7eb      	b.n	800638c <__copybits+0x18>
 80063b4:	f840 3b04 	str.w	r3, [r0], #4
 80063b8:	e7f4      	b.n	80063a4 <__copybits+0x30>

080063ba <__any_on>:
 80063ba:	f100 0214 	add.w	r2, r0, #20
 80063be:	6900      	ldr	r0, [r0, #16]
 80063c0:	114b      	asrs	r3, r1, #5
 80063c2:	4298      	cmp	r0, r3
 80063c4:	b510      	push	{r4, lr}
 80063c6:	db11      	blt.n	80063ec <__any_on+0x32>
 80063c8:	dd0a      	ble.n	80063e0 <__any_on+0x26>
 80063ca:	f011 011f 	ands.w	r1, r1, #31
 80063ce:	d007      	beq.n	80063e0 <__any_on+0x26>
 80063d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80063d4:	fa24 f001 	lsr.w	r0, r4, r1
 80063d8:	fa00 f101 	lsl.w	r1, r0, r1
 80063dc:	428c      	cmp	r4, r1
 80063de:	d10b      	bne.n	80063f8 <__any_on+0x3e>
 80063e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d803      	bhi.n	80063f0 <__any_on+0x36>
 80063e8:	2000      	movs	r0, #0
 80063ea:	bd10      	pop	{r4, pc}
 80063ec:	4603      	mov	r3, r0
 80063ee:	e7f7      	b.n	80063e0 <__any_on+0x26>
 80063f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063f4:	2900      	cmp	r1, #0
 80063f6:	d0f5      	beq.n	80063e4 <__any_on+0x2a>
 80063f8:	2001      	movs	r0, #1
 80063fa:	e7f6      	b.n	80063ea <__any_on+0x30>

080063fc <sulp>:
 80063fc:	b570      	push	{r4, r5, r6, lr}
 80063fe:	4604      	mov	r4, r0
 8006400:	460d      	mov	r5, r1
 8006402:	ec45 4b10 	vmov	d0, r4, r5
 8006406:	4616      	mov	r6, r2
 8006408:	f7ff feba 	bl	8006180 <__ulp>
 800640c:	ec51 0b10 	vmov	r0, r1, d0
 8006410:	b17e      	cbz	r6, 8006432 <sulp+0x36>
 8006412:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006416:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800641a:	2b00      	cmp	r3, #0
 800641c:	dd09      	ble.n	8006432 <sulp+0x36>
 800641e:	051b      	lsls	r3, r3, #20
 8006420:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006424:	2400      	movs	r4, #0
 8006426:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800642a:	4622      	mov	r2, r4
 800642c:	462b      	mov	r3, r5
 800642e:	f7fa f8e3 	bl	80005f8 <__aeabi_dmul>
 8006432:	ec41 0b10 	vmov	d0, r0, r1
 8006436:	bd70      	pop	{r4, r5, r6, pc}

08006438 <_strtod_l>:
 8006438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643c:	b09f      	sub	sp, #124	@ 0x7c
 800643e:	460c      	mov	r4, r1
 8006440:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006442:	2200      	movs	r2, #0
 8006444:	921a      	str	r2, [sp, #104]	@ 0x68
 8006446:	9005      	str	r0, [sp, #20]
 8006448:	f04f 0a00 	mov.w	sl, #0
 800644c:	f04f 0b00 	mov.w	fp, #0
 8006450:	460a      	mov	r2, r1
 8006452:	9219      	str	r2, [sp, #100]	@ 0x64
 8006454:	7811      	ldrb	r1, [r2, #0]
 8006456:	292b      	cmp	r1, #43	@ 0x2b
 8006458:	d04a      	beq.n	80064f0 <_strtod_l+0xb8>
 800645a:	d838      	bhi.n	80064ce <_strtod_l+0x96>
 800645c:	290d      	cmp	r1, #13
 800645e:	d832      	bhi.n	80064c6 <_strtod_l+0x8e>
 8006460:	2908      	cmp	r1, #8
 8006462:	d832      	bhi.n	80064ca <_strtod_l+0x92>
 8006464:	2900      	cmp	r1, #0
 8006466:	d03b      	beq.n	80064e0 <_strtod_l+0xa8>
 8006468:	2200      	movs	r2, #0
 800646a:	920e      	str	r2, [sp, #56]	@ 0x38
 800646c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800646e:	782a      	ldrb	r2, [r5, #0]
 8006470:	2a30      	cmp	r2, #48	@ 0x30
 8006472:	f040 80b2 	bne.w	80065da <_strtod_l+0x1a2>
 8006476:	786a      	ldrb	r2, [r5, #1]
 8006478:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800647c:	2a58      	cmp	r2, #88	@ 0x58
 800647e:	d16e      	bne.n	800655e <_strtod_l+0x126>
 8006480:	9302      	str	r3, [sp, #8]
 8006482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006484:	9301      	str	r3, [sp, #4]
 8006486:	ab1a      	add	r3, sp, #104	@ 0x68
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	4a8f      	ldr	r2, [pc, #572]	@ (80066c8 <_strtod_l+0x290>)
 800648c:	9805      	ldr	r0, [sp, #20]
 800648e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006490:	a919      	add	r1, sp, #100	@ 0x64
 8006492:	f001 f927 	bl	80076e4 <__gethex>
 8006496:	f010 060f 	ands.w	r6, r0, #15
 800649a:	4604      	mov	r4, r0
 800649c:	d005      	beq.n	80064aa <_strtod_l+0x72>
 800649e:	2e06      	cmp	r6, #6
 80064a0:	d128      	bne.n	80064f4 <_strtod_l+0xbc>
 80064a2:	3501      	adds	r5, #1
 80064a4:	2300      	movs	r3, #0
 80064a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80064a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80064aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f040 858e 	bne.w	8006fce <_strtod_l+0xb96>
 80064b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064b4:	b1cb      	cbz	r3, 80064ea <_strtod_l+0xb2>
 80064b6:	4652      	mov	r2, sl
 80064b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80064bc:	ec43 2b10 	vmov	d0, r2, r3
 80064c0:	b01f      	add	sp, #124	@ 0x7c
 80064c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c6:	2920      	cmp	r1, #32
 80064c8:	d1ce      	bne.n	8006468 <_strtod_l+0x30>
 80064ca:	3201      	adds	r2, #1
 80064cc:	e7c1      	b.n	8006452 <_strtod_l+0x1a>
 80064ce:	292d      	cmp	r1, #45	@ 0x2d
 80064d0:	d1ca      	bne.n	8006468 <_strtod_l+0x30>
 80064d2:	2101      	movs	r1, #1
 80064d4:	910e      	str	r1, [sp, #56]	@ 0x38
 80064d6:	1c51      	adds	r1, r2, #1
 80064d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80064da:	7852      	ldrb	r2, [r2, #1]
 80064dc:	2a00      	cmp	r2, #0
 80064de:	d1c5      	bne.n	800646c <_strtod_l+0x34>
 80064e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80064e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f040 8570 	bne.w	8006fca <_strtod_l+0xb92>
 80064ea:	4652      	mov	r2, sl
 80064ec:	465b      	mov	r3, fp
 80064ee:	e7e5      	b.n	80064bc <_strtod_l+0x84>
 80064f0:	2100      	movs	r1, #0
 80064f2:	e7ef      	b.n	80064d4 <_strtod_l+0x9c>
 80064f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80064f6:	b13a      	cbz	r2, 8006508 <_strtod_l+0xd0>
 80064f8:	2135      	movs	r1, #53	@ 0x35
 80064fa:	a81c      	add	r0, sp, #112	@ 0x70
 80064fc:	f7ff ff3a 	bl	8006374 <__copybits>
 8006500:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006502:	9805      	ldr	r0, [sp, #20]
 8006504:	f7ff fb10 	bl	8005b28 <_Bfree>
 8006508:	3e01      	subs	r6, #1
 800650a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800650c:	2e04      	cmp	r6, #4
 800650e:	d806      	bhi.n	800651e <_strtod_l+0xe6>
 8006510:	e8df f006 	tbb	[pc, r6]
 8006514:	201d0314 	.word	0x201d0314
 8006518:	14          	.byte	0x14
 8006519:	00          	.byte	0x00
 800651a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800651e:	05e1      	lsls	r1, r4, #23
 8006520:	bf48      	it	mi
 8006522:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006526:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800652a:	0d1b      	lsrs	r3, r3, #20
 800652c:	051b      	lsls	r3, r3, #20
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1bb      	bne.n	80064aa <_strtod_l+0x72>
 8006532:	f7fe fb2d 	bl	8004b90 <__errno>
 8006536:	2322      	movs	r3, #34	@ 0x22
 8006538:	6003      	str	r3, [r0, #0]
 800653a:	e7b6      	b.n	80064aa <_strtod_l+0x72>
 800653c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006540:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006544:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006548:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800654c:	e7e7      	b.n	800651e <_strtod_l+0xe6>
 800654e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80066d0 <_strtod_l+0x298>
 8006552:	e7e4      	b.n	800651e <_strtod_l+0xe6>
 8006554:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006558:	f04f 3aff 	mov.w	sl, #4294967295
 800655c:	e7df      	b.n	800651e <_strtod_l+0xe6>
 800655e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	9219      	str	r2, [sp, #100]	@ 0x64
 8006564:	785b      	ldrb	r3, [r3, #1]
 8006566:	2b30      	cmp	r3, #48	@ 0x30
 8006568:	d0f9      	beq.n	800655e <_strtod_l+0x126>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d09d      	beq.n	80064aa <_strtod_l+0x72>
 800656e:	2301      	movs	r3, #1
 8006570:	2700      	movs	r7, #0
 8006572:	9308      	str	r3, [sp, #32]
 8006574:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006576:	930c      	str	r3, [sp, #48]	@ 0x30
 8006578:	970b      	str	r7, [sp, #44]	@ 0x2c
 800657a:	46b9      	mov	r9, r7
 800657c:	220a      	movs	r2, #10
 800657e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006580:	7805      	ldrb	r5, [r0, #0]
 8006582:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006586:	b2d9      	uxtb	r1, r3
 8006588:	2909      	cmp	r1, #9
 800658a:	d928      	bls.n	80065de <_strtod_l+0x1a6>
 800658c:	494f      	ldr	r1, [pc, #316]	@ (80066cc <_strtod_l+0x294>)
 800658e:	2201      	movs	r2, #1
 8006590:	f000 ffd6 	bl	8007540 <strncmp>
 8006594:	2800      	cmp	r0, #0
 8006596:	d032      	beq.n	80065fe <_strtod_l+0x1c6>
 8006598:	2000      	movs	r0, #0
 800659a:	462a      	mov	r2, r5
 800659c:	900a      	str	r0, [sp, #40]	@ 0x28
 800659e:	464d      	mov	r5, r9
 80065a0:	4603      	mov	r3, r0
 80065a2:	2a65      	cmp	r2, #101	@ 0x65
 80065a4:	d001      	beq.n	80065aa <_strtod_l+0x172>
 80065a6:	2a45      	cmp	r2, #69	@ 0x45
 80065a8:	d114      	bne.n	80065d4 <_strtod_l+0x19c>
 80065aa:	b91d      	cbnz	r5, 80065b4 <_strtod_l+0x17c>
 80065ac:	9a08      	ldr	r2, [sp, #32]
 80065ae:	4302      	orrs	r2, r0
 80065b0:	d096      	beq.n	80064e0 <_strtod_l+0xa8>
 80065b2:	2500      	movs	r5, #0
 80065b4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80065b6:	1c62      	adds	r2, r4, #1
 80065b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80065ba:	7862      	ldrb	r2, [r4, #1]
 80065bc:	2a2b      	cmp	r2, #43	@ 0x2b
 80065be:	d07a      	beq.n	80066b6 <_strtod_l+0x27e>
 80065c0:	2a2d      	cmp	r2, #45	@ 0x2d
 80065c2:	d07e      	beq.n	80066c2 <_strtod_l+0x28a>
 80065c4:	f04f 0c00 	mov.w	ip, #0
 80065c8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80065cc:	2909      	cmp	r1, #9
 80065ce:	f240 8085 	bls.w	80066dc <_strtod_l+0x2a4>
 80065d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80065d4:	f04f 0800 	mov.w	r8, #0
 80065d8:	e0a5      	b.n	8006726 <_strtod_l+0x2ee>
 80065da:	2300      	movs	r3, #0
 80065dc:	e7c8      	b.n	8006570 <_strtod_l+0x138>
 80065de:	f1b9 0f08 	cmp.w	r9, #8
 80065e2:	bfd8      	it	le
 80065e4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80065e6:	f100 0001 	add.w	r0, r0, #1
 80065ea:	bfda      	itte	le
 80065ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80065f0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80065f2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80065f6:	f109 0901 	add.w	r9, r9, #1
 80065fa:	9019      	str	r0, [sp, #100]	@ 0x64
 80065fc:	e7bf      	b.n	800657e <_strtod_l+0x146>
 80065fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	9219      	str	r2, [sp, #100]	@ 0x64
 8006604:	785a      	ldrb	r2, [r3, #1]
 8006606:	f1b9 0f00 	cmp.w	r9, #0
 800660a:	d03b      	beq.n	8006684 <_strtod_l+0x24c>
 800660c:	900a      	str	r0, [sp, #40]	@ 0x28
 800660e:	464d      	mov	r5, r9
 8006610:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006614:	2b09      	cmp	r3, #9
 8006616:	d912      	bls.n	800663e <_strtod_l+0x206>
 8006618:	2301      	movs	r3, #1
 800661a:	e7c2      	b.n	80065a2 <_strtod_l+0x16a>
 800661c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	9219      	str	r2, [sp, #100]	@ 0x64
 8006622:	785a      	ldrb	r2, [r3, #1]
 8006624:	3001      	adds	r0, #1
 8006626:	2a30      	cmp	r2, #48	@ 0x30
 8006628:	d0f8      	beq.n	800661c <_strtod_l+0x1e4>
 800662a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800662e:	2b08      	cmp	r3, #8
 8006630:	f200 84d2 	bhi.w	8006fd8 <_strtod_l+0xba0>
 8006634:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006636:	900a      	str	r0, [sp, #40]	@ 0x28
 8006638:	2000      	movs	r0, #0
 800663a:	930c      	str	r3, [sp, #48]	@ 0x30
 800663c:	4605      	mov	r5, r0
 800663e:	3a30      	subs	r2, #48	@ 0x30
 8006640:	f100 0301 	add.w	r3, r0, #1
 8006644:	d018      	beq.n	8006678 <_strtod_l+0x240>
 8006646:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006648:	4419      	add	r1, r3
 800664a:	910a      	str	r1, [sp, #40]	@ 0x28
 800664c:	462e      	mov	r6, r5
 800664e:	f04f 0e0a 	mov.w	lr, #10
 8006652:	1c71      	adds	r1, r6, #1
 8006654:	eba1 0c05 	sub.w	ip, r1, r5
 8006658:	4563      	cmp	r3, ip
 800665a:	dc15      	bgt.n	8006688 <_strtod_l+0x250>
 800665c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006660:	182b      	adds	r3, r5, r0
 8006662:	2b08      	cmp	r3, #8
 8006664:	f105 0501 	add.w	r5, r5, #1
 8006668:	4405      	add	r5, r0
 800666a:	dc1a      	bgt.n	80066a2 <_strtod_l+0x26a>
 800666c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800666e:	230a      	movs	r3, #10
 8006670:	fb03 2301 	mla	r3, r3, r1, r2
 8006674:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006676:	2300      	movs	r3, #0
 8006678:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800667a:	1c51      	adds	r1, r2, #1
 800667c:	9119      	str	r1, [sp, #100]	@ 0x64
 800667e:	7852      	ldrb	r2, [r2, #1]
 8006680:	4618      	mov	r0, r3
 8006682:	e7c5      	b.n	8006610 <_strtod_l+0x1d8>
 8006684:	4648      	mov	r0, r9
 8006686:	e7ce      	b.n	8006626 <_strtod_l+0x1ee>
 8006688:	2e08      	cmp	r6, #8
 800668a:	dc05      	bgt.n	8006698 <_strtod_l+0x260>
 800668c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800668e:	fb0e f606 	mul.w	r6, lr, r6
 8006692:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006694:	460e      	mov	r6, r1
 8006696:	e7dc      	b.n	8006652 <_strtod_l+0x21a>
 8006698:	2910      	cmp	r1, #16
 800669a:	bfd8      	it	le
 800669c:	fb0e f707 	mulle.w	r7, lr, r7
 80066a0:	e7f8      	b.n	8006694 <_strtod_l+0x25c>
 80066a2:	2b0f      	cmp	r3, #15
 80066a4:	bfdc      	itt	le
 80066a6:	230a      	movle	r3, #10
 80066a8:	fb03 2707 	mlale	r7, r3, r7, r2
 80066ac:	e7e3      	b.n	8006676 <_strtod_l+0x23e>
 80066ae:	2300      	movs	r3, #0
 80066b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80066b2:	2301      	movs	r3, #1
 80066b4:	e77a      	b.n	80065ac <_strtod_l+0x174>
 80066b6:	f04f 0c00 	mov.w	ip, #0
 80066ba:	1ca2      	adds	r2, r4, #2
 80066bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80066be:	78a2      	ldrb	r2, [r4, #2]
 80066c0:	e782      	b.n	80065c8 <_strtod_l+0x190>
 80066c2:	f04f 0c01 	mov.w	ip, #1
 80066c6:	e7f8      	b.n	80066ba <_strtod_l+0x282>
 80066c8:	080094fc 	.word	0x080094fc
 80066cc:	0800932f 	.word	0x0800932f
 80066d0:	7ff00000 	.word	0x7ff00000
 80066d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80066d6:	1c51      	adds	r1, r2, #1
 80066d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80066da:	7852      	ldrb	r2, [r2, #1]
 80066dc:	2a30      	cmp	r2, #48	@ 0x30
 80066de:	d0f9      	beq.n	80066d4 <_strtod_l+0x29c>
 80066e0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80066e4:	2908      	cmp	r1, #8
 80066e6:	f63f af75 	bhi.w	80065d4 <_strtod_l+0x19c>
 80066ea:	3a30      	subs	r2, #48	@ 0x30
 80066ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80066ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80066f0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80066f2:	f04f 080a 	mov.w	r8, #10
 80066f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80066f8:	1c56      	adds	r6, r2, #1
 80066fa:	9619      	str	r6, [sp, #100]	@ 0x64
 80066fc:	7852      	ldrb	r2, [r2, #1]
 80066fe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006702:	f1be 0f09 	cmp.w	lr, #9
 8006706:	d939      	bls.n	800677c <_strtod_l+0x344>
 8006708:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800670a:	1a76      	subs	r6, r6, r1
 800670c:	2e08      	cmp	r6, #8
 800670e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006712:	dc03      	bgt.n	800671c <_strtod_l+0x2e4>
 8006714:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006716:	4588      	cmp	r8, r1
 8006718:	bfa8      	it	ge
 800671a:	4688      	movge	r8, r1
 800671c:	f1bc 0f00 	cmp.w	ip, #0
 8006720:	d001      	beq.n	8006726 <_strtod_l+0x2ee>
 8006722:	f1c8 0800 	rsb	r8, r8, #0
 8006726:	2d00      	cmp	r5, #0
 8006728:	d14e      	bne.n	80067c8 <_strtod_l+0x390>
 800672a:	9908      	ldr	r1, [sp, #32]
 800672c:	4308      	orrs	r0, r1
 800672e:	f47f aebc 	bne.w	80064aa <_strtod_l+0x72>
 8006732:	2b00      	cmp	r3, #0
 8006734:	f47f aed4 	bne.w	80064e0 <_strtod_l+0xa8>
 8006738:	2a69      	cmp	r2, #105	@ 0x69
 800673a:	d028      	beq.n	800678e <_strtod_l+0x356>
 800673c:	dc25      	bgt.n	800678a <_strtod_l+0x352>
 800673e:	2a49      	cmp	r2, #73	@ 0x49
 8006740:	d025      	beq.n	800678e <_strtod_l+0x356>
 8006742:	2a4e      	cmp	r2, #78	@ 0x4e
 8006744:	f47f aecc 	bne.w	80064e0 <_strtod_l+0xa8>
 8006748:	499a      	ldr	r1, [pc, #616]	@ (80069b4 <_strtod_l+0x57c>)
 800674a:	a819      	add	r0, sp, #100	@ 0x64
 800674c:	f001 f9ec 	bl	8007b28 <__match>
 8006750:	2800      	cmp	r0, #0
 8006752:	f43f aec5 	beq.w	80064e0 <_strtod_l+0xa8>
 8006756:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b28      	cmp	r3, #40	@ 0x28
 800675c:	d12e      	bne.n	80067bc <_strtod_l+0x384>
 800675e:	4996      	ldr	r1, [pc, #600]	@ (80069b8 <_strtod_l+0x580>)
 8006760:	aa1c      	add	r2, sp, #112	@ 0x70
 8006762:	a819      	add	r0, sp, #100	@ 0x64
 8006764:	f001 f9f4 	bl	8007b50 <__hexnan>
 8006768:	2805      	cmp	r0, #5
 800676a:	d127      	bne.n	80067bc <_strtod_l+0x384>
 800676c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800676e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006772:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006776:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800677a:	e696      	b.n	80064aa <_strtod_l+0x72>
 800677c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800677e:	fb08 2101 	mla	r1, r8, r1, r2
 8006782:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006786:	9209      	str	r2, [sp, #36]	@ 0x24
 8006788:	e7b5      	b.n	80066f6 <_strtod_l+0x2be>
 800678a:	2a6e      	cmp	r2, #110	@ 0x6e
 800678c:	e7da      	b.n	8006744 <_strtod_l+0x30c>
 800678e:	498b      	ldr	r1, [pc, #556]	@ (80069bc <_strtod_l+0x584>)
 8006790:	a819      	add	r0, sp, #100	@ 0x64
 8006792:	f001 f9c9 	bl	8007b28 <__match>
 8006796:	2800      	cmp	r0, #0
 8006798:	f43f aea2 	beq.w	80064e0 <_strtod_l+0xa8>
 800679c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800679e:	4988      	ldr	r1, [pc, #544]	@ (80069c0 <_strtod_l+0x588>)
 80067a0:	3b01      	subs	r3, #1
 80067a2:	a819      	add	r0, sp, #100	@ 0x64
 80067a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80067a6:	f001 f9bf 	bl	8007b28 <__match>
 80067aa:	b910      	cbnz	r0, 80067b2 <_strtod_l+0x37a>
 80067ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067ae:	3301      	adds	r3, #1
 80067b0:	9319      	str	r3, [sp, #100]	@ 0x64
 80067b2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80069d0 <_strtod_l+0x598>
 80067b6:	f04f 0a00 	mov.w	sl, #0
 80067ba:	e676      	b.n	80064aa <_strtod_l+0x72>
 80067bc:	4881      	ldr	r0, [pc, #516]	@ (80069c4 <_strtod_l+0x58c>)
 80067be:	f000 feef 	bl	80075a0 <nan>
 80067c2:	ec5b ab10 	vmov	sl, fp, d0
 80067c6:	e670      	b.n	80064aa <_strtod_l+0x72>
 80067c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80067cc:	eba8 0303 	sub.w	r3, r8, r3
 80067d0:	f1b9 0f00 	cmp.w	r9, #0
 80067d4:	bf08      	it	eq
 80067d6:	46a9      	moveq	r9, r5
 80067d8:	2d10      	cmp	r5, #16
 80067da:	9309      	str	r3, [sp, #36]	@ 0x24
 80067dc:	462c      	mov	r4, r5
 80067de:	bfa8      	it	ge
 80067e0:	2410      	movge	r4, #16
 80067e2:	f7f9 fe8f 	bl	8000504 <__aeabi_ui2d>
 80067e6:	2d09      	cmp	r5, #9
 80067e8:	4682      	mov	sl, r0
 80067ea:	468b      	mov	fp, r1
 80067ec:	dc13      	bgt.n	8006816 <_strtod_l+0x3de>
 80067ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f43f ae5a 	beq.w	80064aa <_strtod_l+0x72>
 80067f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f8:	dd78      	ble.n	80068ec <_strtod_l+0x4b4>
 80067fa:	2b16      	cmp	r3, #22
 80067fc:	dc5f      	bgt.n	80068be <_strtod_l+0x486>
 80067fe:	4972      	ldr	r1, [pc, #456]	@ (80069c8 <_strtod_l+0x590>)
 8006800:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006804:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006808:	4652      	mov	r2, sl
 800680a:	465b      	mov	r3, fp
 800680c:	f7f9 fef4 	bl	80005f8 <__aeabi_dmul>
 8006810:	4682      	mov	sl, r0
 8006812:	468b      	mov	fp, r1
 8006814:	e649      	b.n	80064aa <_strtod_l+0x72>
 8006816:	4b6c      	ldr	r3, [pc, #432]	@ (80069c8 <_strtod_l+0x590>)
 8006818:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800681c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006820:	f7f9 feea 	bl	80005f8 <__aeabi_dmul>
 8006824:	4682      	mov	sl, r0
 8006826:	4638      	mov	r0, r7
 8006828:	468b      	mov	fp, r1
 800682a:	f7f9 fe6b 	bl	8000504 <__aeabi_ui2d>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4650      	mov	r0, sl
 8006834:	4659      	mov	r1, fp
 8006836:	f7f9 fd29 	bl	800028c <__adddf3>
 800683a:	2d0f      	cmp	r5, #15
 800683c:	4682      	mov	sl, r0
 800683e:	468b      	mov	fp, r1
 8006840:	ddd5      	ble.n	80067ee <_strtod_l+0x3b6>
 8006842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006844:	1b2c      	subs	r4, r5, r4
 8006846:	441c      	add	r4, r3
 8006848:	2c00      	cmp	r4, #0
 800684a:	f340 8093 	ble.w	8006974 <_strtod_l+0x53c>
 800684e:	f014 030f 	ands.w	r3, r4, #15
 8006852:	d00a      	beq.n	800686a <_strtod_l+0x432>
 8006854:	495c      	ldr	r1, [pc, #368]	@ (80069c8 <_strtod_l+0x590>)
 8006856:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800685a:	4652      	mov	r2, sl
 800685c:	465b      	mov	r3, fp
 800685e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006862:	f7f9 fec9 	bl	80005f8 <__aeabi_dmul>
 8006866:	4682      	mov	sl, r0
 8006868:	468b      	mov	fp, r1
 800686a:	f034 040f 	bics.w	r4, r4, #15
 800686e:	d073      	beq.n	8006958 <_strtod_l+0x520>
 8006870:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006874:	dd49      	ble.n	800690a <_strtod_l+0x4d2>
 8006876:	2400      	movs	r4, #0
 8006878:	46a0      	mov	r8, r4
 800687a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800687c:	46a1      	mov	r9, r4
 800687e:	9a05      	ldr	r2, [sp, #20]
 8006880:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80069d0 <_strtod_l+0x598>
 8006884:	2322      	movs	r3, #34	@ 0x22
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	f04f 0a00 	mov.w	sl, #0
 800688c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800688e:	2b00      	cmp	r3, #0
 8006890:	f43f ae0b 	beq.w	80064aa <_strtod_l+0x72>
 8006894:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006896:	9805      	ldr	r0, [sp, #20]
 8006898:	f7ff f946 	bl	8005b28 <_Bfree>
 800689c:	9805      	ldr	r0, [sp, #20]
 800689e:	4649      	mov	r1, r9
 80068a0:	f7ff f942 	bl	8005b28 <_Bfree>
 80068a4:	9805      	ldr	r0, [sp, #20]
 80068a6:	4641      	mov	r1, r8
 80068a8:	f7ff f93e 	bl	8005b28 <_Bfree>
 80068ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068ae:	9805      	ldr	r0, [sp, #20]
 80068b0:	f7ff f93a 	bl	8005b28 <_Bfree>
 80068b4:	9805      	ldr	r0, [sp, #20]
 80068b6:	4621      	mov	r1, r4
 80068b8:	f7ff f936 	bl	8005b28 <_Bfree>
 80068bc:	e5f5      	b.n	80064aa <_strtod_l+0x72>
 80068be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80068c4:	4293      	cmp	r3, r2
 80068c6:	dbbc      	blt.n	8006842 <_strtod_l+0x40a>
 80068c8:	4c3f      	ldr	r4, [pc, #252]	@ (80069c8 <_strtod_l+0x590>)
 80068ca:	f1c5 050f 	rsb	r5, r5, #15
 80068ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80068d2:	4652      	mov	r2, sl
 80068d4:	465b      	mov	r3, fp
 80068d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068da:	f7f9 fe8d 	bl	80005f8 <__aeabi_dmul>
 80068de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e0:	1b5d      	subs	r5, r3, r5
 80068e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80068e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80068ea:	e78f      	b.n	800680c <_strtod_l+0x3d4>
 80068ec:	3316      	adds	r3, #22
 80068ee:	dba8      	blt.n	8006842 <_strtod_l+0x40a>
 80068f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068f2:	eba3 0808 	sub.w	r8, r3, r8
 80068f6:	4b34      	ldr	r3, [pc, #208]	@ (80069c8 <_strtod_l+0x590>)
 80068f8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80068fc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006900:	4650      	mov	r0, sl
 8006902:	4659      	mov	r1, fp
 8006904:	f7f9 ffa2 	bl	800084c <__aeabi_ddiv>
 8006908:	e782      	b.n	8006810 <_strtod_l+0x3d8>
 800690a:	2300      	movs	r3, #0
 800690c:	4f2f      	ldr	r7, [pc, #188]	@ (80069cc <_strtod_l+0x594>)
 800690e:	1124      	asrs	r4, r4, #4
 8006910:	4650      	mov	r0, sl
 8006912:	4659      	mov	r1, fp
 8006914:	461e      	mov	r6, r3
 8006916:	2c01      	cmp	r4, #1
 8006918:	dc21      	bgt.n	800695e <_strtod_l+0x526>
 800691a:	b10b      	cbz	r3, 8006920 <_strtod_l+0x4e8>
 800691c:	4682      	mov	sl, r0
 800691e:	468b      	mov	fp, r1
 8006920:	492a      	ldr	r1, [pc, #168]	@ (80069cc <_strtod_l+0x594>)
 8006922:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006926:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800692a:	4652      	mov	r2, sl
 800692c:	465b      	mov	r3, fp
 800692e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006932:	f7f9 fe61 	bl	80005f8 <__aeabi_dmul>
 8006936:	4b26      	ldr	r3, [pc, #152]	@ (80069d0 <_strtod_l+0x598>)
 8006938:	460a      	mov	r2, r1
 800693a:	400b      	ands	r3, r1
 800693c:	4925      	ldr	r1, [pc, #148]	@ (80069d4 <_strtod_l+0x59c>)
 800693e:	428b      	cmp	r3, r1
 8006940:	4682      	mov	sl, r0
 8006942:	d898      	bhi.n	8006876 <_strtod_l+0x43e>
 8006944:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006948:	428b      	cmp	r3, r1
 800694a:	bf86      	itte	hi
 800694c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80069d8 <_strtod_l+0x5a0>
 8006950:	f04f 3aff 	movhi.w	sl, #4294967295
 8006954:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006958:	2300      	movs	r3, #0
 800695a:	9308      	str	r3, [sp, #32]
 800695c:	e076      	b.n	8006a4c <_strtod_l+0x614>
 800695e:	07e2      	lsls	r2, r4, #31
 8006960:	d504      	bpl.n	800696c <_strtod_l+0x534>
 8006962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006966:	f7f9 fe47 	bl	80005f8 <__aeabi_dmul>
 800696a:	2301      	movs	r3, #1
 800696c:	3601      	adds	r6, #1
 800696e:	1064      	asrs	r4, r4, #1
 8006970:	3708      	adds	r7, #8
 8006972:	e7d0      	b.n	8006916 <_strtod_l+0x4de>
 8006974:	d0f0      	beq.n	8006958 <_strtod_l+0x520>
 8006976:	4264      	negs	r4, r4
 8006978:	f014 020f 	ands.w	r2, r4, #15
 800697c:	d00a      	beq.n	8006994 <_strtod_l+0x55c>
 800697e:	4b12      	ldr	r3, [pc, #72]	@ (80069c8 <_strtod_l+0x590>)
 8006980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006984:	4650      	mov	r0, sl
 8006986:	4659      	mov	r1, fp
 8006988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698c:	f7f9 ff5e 	bl	800084c <__aeabi_ddiv>
 8006990:	4682      	mov	sl, r0
 8006992:	468b      	mov	fp, r1
 8006994:	1124      	asrs	r4, r4, #4
 8006996:	d0df      	beq.n	8006958 <_strtod_l+0x520>
 8006998:	2c1f      	cmp	r4, #31
 800699a:	dd1f      	ble.n	80069dc <_strtod_l+0x5a4>
 800699c:	2400      	movs	r4, #0
 800699e:	46a0      	mov	r8, r4
 80069a0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80069a2:	46a1      	mov	r9, r4
 80069a4:	9a05      	ldr	r2, [sp, #20]
 80069a6:	2322      	movs	r3, #34	@ 0x22
 80069a8:	f04f 0a00 	mov.w	sl, #0
 80069ac:	f04f 0b00 	mov.w	fp, #0
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	e76b      	b.n	800688c <_strtod_l+0x454>
 80069b4:	0800921d 	.word	0x0800921d
 80069b8:	080094e8 	.word	0x080094e8
 80069bc:	08009215 	.word	0x08009215
 80069c0:	0800924c 	.word	0x0800924c
 80069c4:	08009385 	.word	0x08009385
 80069c8:	08009420 	.word	0x08009420
 80069cc:	080093f8 	.word	0x080093f8
 80069d0:	7ff00000 	.word	0x7ff00000
 80069d4:	7ca00000 	.word	0x7ca00000
 80069d8:	7fefffff 	.word	0x7fefffff
 80069dc:	f014 0310 	ands.w	r3, r4, #16
 80069e0:	bf18      	it	ne
 80069e2:	236a      	movne	r3, #106	@ 0x6a
 80069e4:	4ea9      	ldr	r6, [pc, #676]	@ (8006c8c <_strtod_l+0x854>)
 80069e6:	9308      	str	r3, [sp, #32]
 80069e8:	4650      	mov	r0, sl
 80069ea:	4659      	mov	r1, fp
 80069ec:	2300      	movs	r3, #0
 80069ee:	07e7      	lsls	r7, r4, #31
 80069f0:	d504      	bpl.n	80069fc <_strtod_l+0x5c4>
 80069f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069f6:	f7f9 fdff 	bl	80005f8 <__aeabi_dmul>
 80069fa:	2301      	movs	r3, #1
 80069fc:	1064      	asrs	r4, r4, #1
 80069fe:	f106 0608 	add.w	r6, r6, #8
 8006a02:	d1f4      	bne.n	80069ee <_strtod_l+0x5b6>
 8006a04:	b10b      	cbz	r3, 8006a0a <_strtod_l+0x5d2>
 8006a06:	4682      	mov	sl, r0
 8006a08:	468b      	mov	fp, r1
 8006a0a:	9b08      	ldr	r3, [sp, #32]
 8006a0c:	b1b3      	cbz	r3, 8006a3c <_strtod_l+0x604>
 8006a0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006a12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	4659      	mov	r1, fp
 8006a1a:	dd0f      	ble.n	8006a3c <_strtod_l+0x604>
 8006a1c:	2b1f      	cmp	r3, #31
 8006a1e:	dd56      	ble.n	8006ace <_strtod_l+0x696>
 8006a20:	2b34      	cmp	r3, #52	@ 0x34
 8006a22:	bfde      	ittt	le
 8006a24:	f04f 33ff 	movle.w	r3, #4294967295
 8006a28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006a2c:	4093      	lslle	r3, r2
 8006a2e:	f04f 0a00 	mov.w	sl, #0
 8006a32:	bfcc      	ite	gt
 8006a34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006a38:	ea03 0b01 	andle.w	fp, r3, r1
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2300      	movs	r3, #0
 8006a40:	4650      	mov	r0, sl
 8006a42:	4659      	mov	r1, fp
 8006a44:	f7fa f840 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d1a7      	bne.n	800699c <_strtod_l+0x564>
 8006a4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006a52:	9805      	ldr	r0, [sp, #20]
 8006a54:	462b      	mov	r3, r5
 8006a56:	464a      	mov	r2, r9
 8006a58:	f7ff f8ce 	bl	8005bf8 <__s2b>
 8006a5c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	f43f af09 	beq.w	8006876 <_strtod_l+0x43e>
 8006a64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a68:	2a00      	cmp	r2, #0
 8006a6a:	eba3 0308 	sub.w	r3, r3, r8
 8006a6e:	bfa8      	it	ge
 8006a70:	2300      	movge	r3, #0
 8006a72:	9312      	str	r3, [sp, #72]	@ 0x48
 8006a74:	2400      	movs	r4, #0
 8006a76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006a7a:	9316      	str	r3, [sp, #88]	@ 0x58
 8006a7c:	46a0      	mov	r8, r4
 8006a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a80:	9805      	ldr	r0, [sp, #20]
 8006a82:	6859      	ldr	r1, [r3, #4]
 8006a84:	f7ff f810 	bl	8005aa8 <_Balloc>
 8006a88:	4681      	mov	r9, r0
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	f43f aef7 	beq.w	800687e <_strtod_l+0x446>
 8006a90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	3202      	adds	r2, #2
 8006a96:	f103 010c 	add.w	r1, r3, #12
 8006a9a:	0092      	lsls	r2, r2, #2
 8006a9c:	300c      	adds	r0, #12
 8006a9e:	f000 fd71 	bl	8007584 <memcpy>
 8006aa2:	ec4b ab10 	vmov	d0, sl, fp
 8006aa6:	9805      	ldr	r0, [sp, #20]
 8006aa8:	aa1c      	add	r2, sp, #112	@ 0x70
 8006aaa:	a91b      	add	r1, sp, #108	@ 0x6c
 8006aac:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006ab0:	f7ff fbd6 	bl	8006260 <__d2b>
 8006ab4:	901a      	str	r0, [sp, #104]	@ 0x68
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	f43f aee1 	beq.w	800687e <_strtod_l+0x446>
 8006abc:	9805      	ldr	r0, [sp, #20]
 8006abe:	2101      	movs	r1, #1
 8006ac0:	f7ff f930 	bl	8005d24 <__i2b>
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	b948      	cbnz	r0, 8006adc <_strtod_l+0x6a4>
 8006ac8:	f04f 0800 	mov.w	r8, #0
 8006acc:	e6d7      	b.n	800687e <_strtod_l+0x446>
 8006ace:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad6:	ea03 0a0a 	and.w	sl, r3, sl
 8006ada:	e7af      	b.n	8006a3c <_strtod_l+0x604>
 8006adc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006ade:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006ae0:	2d00      	cmp	r5, #0
 8006ae2:	bfab      	itete	ge
 8006ae4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006ae6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006ae8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006aea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006aec:	bfac      	ite	ge
 8006aee:	18ef      	addge	r7, r5, r3
 8006af0:	1b5e      	sublt	r6, r3, r5
 8006af2:	9b08      	ldr	r3, [sp, #32]
 8006af4:	1aed      	subs	r5, r5, r3
 8006af6:	4415      	add	r5, r2
 8006af8:	4b65      	ldr	r3, [pc, #404]	@ (8006c90 <_strtod_l+0x858>)
 8006afa:	3d01      	subs	r5, #1
 8006afc:	429d      	cmp	r5, r3
 8006afe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006b02:	da50      	bge.n	8006ba6 <_strtod_l+0x76e>
 8006b04:	1b5b      	subs	r3, r3, r5
 8006b06:	2b1f      	cmp	r3, #31
 8006b08:	eba2 0203 	sub.w	r2, r2, r3
 8006b0c:	f04f 0101 	mov.w	r1, #1
 8006b10:	dc3d      	bgt.n	8006b8e <_strtod_l+0x756>
 8006b12:	fa01 f303 	lsl.w	r3, r1, r3
 8006b16:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b1c:	18bd      	adds	r5, r7, r2
 8006b1e:	9b08      	ldr	r3, [sp, #32]
 8006b20:	42af      	cmp	r7, r5
 8006b22:	4416      	add	r6, r2
 8006b24:	441e      	add	r6, r3
 8006b26:	463b      	mov	r3, r7
 8006b28:	bfa8      	it	ge
 8006b2a:	462b      	movge	r3, r5
 8006b2c:	42b3      	cmp	r3, r6
 8006b2e:	bfa8      	it	ge
 8006b30:	4633      	movge	r3, r6
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	bfc2      	ittt	gt
 8006b36:	1aed      	subgt	r5, r5, r3
 8006b38:	1af6      	subgt	r6, r6, r3
 8006b3a:	1aff      	subgt	r7, r7, r3
 8006b3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	dd16      	ble.n	8006b70 <_strtod_l+0x738>
 8006b42:	4641      	mov	r1, r8
 8006b44:	9805      	ldr	r0, [sp, #20]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f7ff f9a4 	bl	8005e94 <__pow5mult>
 8006b4c:	4680      	mov	r8, r0
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	d0ba      	beq.n	8006ac8 <_strtod_l+0x690>
 8006b52:	4601      	mov	r1, r0
 8006b54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006b56:	9805      	ldr	r0, [sp, #20]
 8006b58:	f7ff f8fa 	bl	8005d50 <__multiply>
 8006b5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	f43f ae8d 	beq.w	800687e <_strtod_l+0x446>
 8006b64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b66:	9805      	ldr	r0, [sp, #20]
 8006b68:	f7fe ffde 	bl	8005b28 <_Bfree>
 8006b6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b70:	2d00      	cmp	r5, #0
 8006b72:	dc1d      	bgt.n	8006bb0 <_strtod_l+0x778>
 8006b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	dd23      	ble.n	8006bc2 <_strtod_l+0x78a>
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006b7e:	9805      	ldr	r0, [sp, #20]
 8006b80:	f7ff f988 	bl	8005e94 <__pow5mult>
 8006b84:	4681      	mov	r9, r0
 8006b86:	b9e0      	cbnz	r0, 8006bc2 <_strtod_l+0x78a>
 8006b88:	f04f 0900 	mov.w	r9, #0
 8006b8c:	e677      	b.n	800687e <_strtod_l+0x446>
 8006b8e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006b92:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006b96:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006b9a:	35e2      	adds	r5, #226	@ 0xe2
 8006b9c:	fa01 f305 	lsl.w	r3, r1, r5
 8006ba0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ba2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006ba4:	e7ba      	b.n	8006b1c <_strtod_l+0x6e4>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006baa:	2301      	movs	r3, #1
 8006bac:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006bae:	e7b5      	b.n	8006b1c <_strtod_l+0x6e4>
 8006bb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006bb2:	9805      	ldr	r0, [sp, #20]
 8006bb4:	462a      	mov	r2, r5
 8006bb6:	f7ff f9c7 	bl	8005f48 <__lshift>
 8006bba:	901a      	str	r0, [sp, #104]	@ 0x68
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d1d9      	bne.n	8006b74 <_strtod_l+0x73c>
 8006bc0:	e65d      	b.n	800687e <_strtod_l+0x446>
 8006bc2:	2e00      	cmp	r6, #0
 8006bc4:	dd07      	ble.n	8006bd6 <_strtod_l+0x79e>
 8006bc6:	4649      	mov	r1, r9
 8006bc8:	9805      	ldr	r0, [sp, #20]
 8006bca:	4632      	mov	r2, r6
 8006bcc:	f7ff f9bc 	bl	8005f48 <__lshift>
 8006bd0:	4681      	mov	r9, r0
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d0d8      	beq.n	8006b88 <_strtod_l+0x750>
 8006bd6:	2f00      	cmp	r7, #0
 8006bd8:	dd08      	ble.n	8006bec <_strtod_l+0x7b4>
 8006bda:	4641      	mov	r1, r8
 8006bdc:	9805      	ldr	r0, [sp, #20]
 8006bde:	463a      	mov	r2, r7
 8006be0:	f7ff f9b2 	bl	8005f48 <__lshift>
 8006be4:	4680      	mov	r8, r0
 8006be6:	2800      	cmp	r0, #0
 8006be8:	f43f ae49 	beq.w	800687e <_strtod_l+0x446>
 8006bec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006bee:	9805      	ldr	r0, [sp, #20]
 8006bf0:	464a      	mov	r2, r9
 8006bf2:	f7ff fa31 	bl	8006058 <__mdiff>
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	f43f ae40 	beq.w	800687e <_strtod_l+0x446>
 8006bfe:	68c3      	ldr	r3, [r0, #12]
 8006c00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c02:	2300      	movs	r3, #0
 8006c04:	60c3      	str	r3, [r0, #12]
 8006c06:	4641      	mov	r1, r8
 8006c08:	f7ff fa0a 	bl	8006020 <__mcmp>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	da45      	bge.n	8006c9c <_strtod_l+0x864>
 8006c10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c12:	ea53 030a 	orrs.w	r3, r3, sl
 8006c16:	d16b      	bne.n	8006cf0 <_strtod_l+0x8b8>
 8006c18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d167      	bne.n	8006cf0 <_strtod_l+0x8b8>
 8006c20:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c24:	0d1b      	lsrs	r3, r3, #20
 8006c26:	051b      	lsls	r3, r3, #20
 8006c28:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006c2c:	d960      	bls.n	8006cf0 <_strtod_l+0x8b8>
 8006c2e:	6963      	ldr	r3, [r4, #20]
 8006c30:	b913      	cbnz	r3, 8006c38 <_strtod_l+0x800>
 8006c32:	6923      	ldr	r3, [r4, #16]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	dd5b      	ble.n	8006cf0 <_strtod_l+0x8b8>
 8006c38:	4621      	mov	r1, r4
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	9805      	ldr	r0, [sp, #20]
 8006c3e:	f7ff f983 	bl	8005f48 <__lshift>
 8006c42:	4641      	mov	r1, r8
 8006c44:	4604      	mov	r4, r0
 8006c46:	f7ff f9eb 	bl	8006020 <__mcmp>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	dd50      	ble.n	8006cf0 <_strtod_l+0x8b8>
 8006c4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c52:	9a08      	ldr	r2, [sp, #32]
 8006c54:	0d1b      	lsrs	r3, r3, #20
 8006c56:	051b      	lsls	r3, r3, #20
 8006c58:	2a00      	cmp	r2, #0
 8006c5a:	d06a      	beq.n	8006d32 <_strtod_l+0x8fa>
 8006c5c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006c60:	d867      	bhi.n	8006d32 <_strtod_l+0x8fa>
 8006c62:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006c66:	f67f ae9d 	bls.w	80069a4 <_strtod_l+0x56c>
 8006c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c94 <_strtod_l+0x85c>)
 8006c6c:	4650      	mov	r0, sl
 8006c6e:	4659      	mov	r1, fp
 8006c70:	2200      	movs	r2, #0
 8006c72:	f7f9 fcc1 	bl	80005f8 <__aeabi_dmul>
 8006c76:	4b08      	ldr	r3, [pc, #32]	@ (8006c98 <_strtod_l+0x860>)
 8006c78:	400b      	ands	r3, r1
 8006c7a:	4682      	mov	sl, r0
 8006c7c:	468b      	mov	fp, r1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f47f ae08 	bne.w	8006894 <_strtod_l+0x45c>
 8006c84:	9a05      	ldr	r2, [sp, #20]
 8006c86:	2322      	movs	r3, #34	@ 0x22
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	e603      	b.n	8006894 <_strtod_l+0x45c>
 8006c8c:	08009510 	.word	0x08009510
 8006c90:	fffffc02 	.word	0xfffffc02
 8006c94:	39500000 	.word	0x39500000
 8006c98:	7ff00000 	.word	0x7ff00000
 8006c9c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006ca0:	d165      	bne.n	8006d6e <_strtod_l+0x936>
 8006ca2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006ca4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ca8:	b35a      	cbz	r2, 8006d02 <_strtod_l+0x8ca>
 8006caa:	4a9f      	ldr	r2, [pc, #636]	@ (8006f28 <_strtod_l+0xaf0>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d12b      	bne.n	8006d08 <_strtod_l+0x8d0>
 8006cb0:	9b08      	ldr	r3, [sp, #32]
 8006cb2:	4651      	mov	r1, sl
 8006cb4:	b303      	cbz	r3, 8006cf8 <_strtod_l+0x8c0>
 8006cb6:	4b9d      	ldr	r3, [pc, #628]	@ (8006f2c <_strtod_l+0xaf4>)
 8006cb8:	465a      	mov	r2, fp
 8006cba:	4013      	ands	r3, r2
 8006cbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc4:	d81b      	bhi.n	8006cfe <_strtod_l+0x8c6>
 8006cc6:	0d1b      	lsrs	r3, r3, #20
 8006cc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd0:	4299      	cmp	r1, r3
 8006cd2:	d119      	bne.n	8006d08 <_strtod_l+0x8d0>
 8006cd4:	4b96      	ldr	r3, [pc, #600]	@ (8006f30 <_strtod_l+0xaf8>)
 8006cd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d102      	bne.n	8006ce2 <_strtod_l+0x8aa>
 8006cdc:	3101      	adds	r1, #1
 8006cde:	f43f adce 	beq.w	800687e <_strtod_l+0x446>
 8006ce2:	4b92      	ldr	r3, [pc, #584]	@ (8006f2c <_strtod_l+0xaf4>)
 8006ce4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ce6:	401a      	ands	r2, r3
 8006ce8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006cec:	f04f 0a00 	mov.w	sl, #0
 8006cf0:	9b08      	ldr	r3, [sp, #32]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1b9      	bne.n	8006c6a <_strtod_l+0x832>
 8006cf6:	e5cd      	b.n	8006894 <_strtod_l+0x45c>
 8006cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfc:	e7e8      	b.n	8006cd0 <_strtod_l+0x898>
 8006cfe:	4613      	mov	r3, r2
 8006d00:	e7e6      	b.n	8006cd0 <_strtod_l+0x898>
 8006d02:	ea53 030a 	orrs.w	r3, r3, sl
 8006d06:	d0a2      	beq.n	8006c4e <_strtod_l+0x816>
 8006d08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d0a:	b1db      	cbz	r3, 8006d44 <_strtod_l+0x90c>
 8006d0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d0e:	4213      	tst	r3, r2
 8006d10:	d0ee      	beq.n	8006cf0 <_strtod_l+0x8b8>
 8006d12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d14:	9a08      	ldr	r2, [sp, #32]
 8006d16:	4650      	mov	r0, sl
 8006d18:	4659      	mov	r1, fp
 8006d1a:	b1bb      	cbz	r3, 8006d4c <_strtod_l+0x914>
 8006d1c:	f7ff fb6e 	bl	80063fc <sulp>
 8006d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d24:	ec53 2b10 	vmov	r2, r3, d0
 8006d28:	f7f9 fab0 	bl	800028c <__adddf3>
 8006d2c:	4682      	mov	sl, r0
 8006d2e:	468b      	mov	fp, r1
 8006d30:	e7de      	b.n	8006cf0 <_strtod_l+0x8b8>
 8006d32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006d36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006d3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006d3e:	f04f 3aff 	mov.w	sl, #4294967295
 8006d42:	e7d5      	b.n	8006cf0 <_strtod_l+0x8b8>
 8006d44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d46:	ea13 0f0a 	tst.w	r3, sl
 8006d4a:	e7e1      	b.n	8006d10 <_strtod_l+0x8d8>
 8006d4c:	f7ff fb56 	bl	80063fc <sulp>
 8006d50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d54:	ec53 2b10 	vmov	r2, r3, d0
 8006d58:	f7f9 fa96 	bl	8000288 <__aeabi_dsub>
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2300      	movs	r3, #0
 8006d60:	4682      	mov	sl, r0
 8006d62:	468b      	mov	fp, r1
 8006d64:	f7f9 feb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d0c1      	beq.n	8006cf0 <_strtod_l+0x8b8>
 8006d6c:	e61a      	b.n	80069a4 <_strtod_l+0x56c>
 8006d6e:	4641      	mov	r1, r8
 8006d70:	4620      	mov	r0, r4
 8006d72:	f7ff facd 	bl	8006310 <__ratio>
 8006d76:	ec57 6b10 	vmov	r6, r7, d0
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006d80:	4630      	mov	r0, r6
 8006d82:	4639      	mov	r1, r7
 8006d84:	f7f9 feb4 	bl	8000af0 <__aeabi_dcmple>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d06f      	beq.n	8006e6c <_strtod_l+0xa34>
 8006d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d17a      	bne.n	8006e88 <_strtod_l+0xa50>
 8006d92:	f1ba 0f00 	cmp.w	sl, #0
 8006d96:	d158      	bne.n	8006e4a <_strtod_l+0xa12>
 8006d98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d15a      	bne.n	8006e58 <_strtod_l+0xa20>
 8006da2:	4b64      	ldr	r3, [pc, #400]	@ (8006f34 <_strtod_l+0xafc>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	4630      	mov	r0, r6
 8006da8:	4639      	mov	r1, r7
 8006daa:	f7f9 fe97 	bl	8000adc <__aeabi_dcmplt>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d159      	bne.n	8006e66 <_strtod_l+0xa2e>
 8006db2:	4630      	mov	r0, r6
 8006db4:	4639      	mov	r1, r7
 8006db6:	4b60      	ldr	r3, [pc, #384]	@ (8006f38 <_strtod_l+0xb00>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	f7f9 fc1d 	bl	80005f8 <__aeabi_dmul>
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	460f      	mov	r7, r1
 8006dc2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006dc6:	9606      	str	r6, [sp, #24]
 8006dc8:	9307      	str	r3, [sp, #28]
 8006dca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dce:	4d57      	ldr	r5, [pc, #348]	@ (8006f2c <_strtod_l+0xaf4>)
 8006dd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006dd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dd6:	401d      	ands	r5, r3
 8006dd8:	4b58      	ldr	r3, [pc, #352]	@ (8006f3c <_strtod_l+0xb04>)
 8006dda:	429d      	cmp	r5, r3
 8006ddc:	f040 80b2 	bne.w	8006f44 <_strtod_l+0xb0c>
 8006de0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006de2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006de6:	ec4b ab10 	vmov	d0, sl, fp
 8006dea:	f7ff f9c9 	bl	8006180 <__ulp>
 8006dee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006df2:	ec51 0b10 	vmov	r0, r1, d0
 8006df6:	f7f9 fbff 	bl	80005f8 <__aeabi_dmul>
 8006dfa:	4652      	mov	r2, sl
 8006dfc:	465b      	mov	r3, fp
 8006dfe:	f7f9 fa45 	bl	800028c <__adddf3>
 8006e02:	460b      	mov	r3, r1
 8006e04:	4949      	ldr	r1, [pc, #292]	@ (8006f2c <_strtod_l+0xaf4>)
 8006e06:	4a4e      	ldr	r2, [pc, #312]	@ (8006f40 <_strtod_l+0xb08>)
 8006e08:	4019      	ands	r1, r3
 8006e0a:	4291      	cmp	r1, r2
 8006e0c:	4682      	mov	sl, r0
 8006e0e:	d942      	bls.n	8006e96 <_strtod_l+0xa5e>
 8006e10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e12:	4b47      	ldr	r3, [pc, #284]	@ (8006f30 <_strtod_l+0xaf8>)
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d103      	bne.n	8006e20 <_strtod_l+0x9e8>
 8006e18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	f43f ad2f 	beq.w	800687e <_strtod_l+0x446>
 8006e20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006f30 <_strtod_l+0xaf8>
 8006e24:	f04f 3aff 	mov.w	sl, #4294967295
 8006e28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e2a:	9805      	ldr	r0, [sp, #20]
 8006e2c:	f7fe fe7c 	bl	8005b28 <_Bfree>
 8006e30:	9805      	ldr	r0, [sp, #20]
 8006e32:	4649      	mov	r1, r9
 8006e34:	f7fe fe78 	bl	8005b28 <_Bfree>
 8006e38:	9805      	ldr	r0, [sp, #20]
 8006e3a:	4641      	mov	r1, r8
 8006e3c:	f7fe fe74 	bl	8005b28 <_Bfree>
 8006e40:	9805      	ldr	r0, [sp, #20]
 8006e42:	4621      	mov	r1, r4
 8006e44:	f7fe fe70 	bl	8005b28 <_Bfree>
 8006e48:	e619      	b.n	8006a7e <_strtod_l+0x646>
 8006e4a:	f1ba 0f01 	cmp.w	sl, #1
 8006e4e:	d103      	bne.n	8006e58 <_strtod_l+0xa20>
 8006e50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f43f ada6 	beq.w	80069a4 <_strtod_l+0x56c>
 8006e58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006f08 <_strtod_l+0xad0>
 8006e5c:	4f35      	ldr	r7, [pc, #212]	@ (8006f34 <_strtod_l+0xafc>)
 8006e5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e62:	2600      	movs	r6, #0
 8006e64:	e7b1      	b.n	8006dca <_strtod_l+0x992>
 8006e66:	4f34      	ldr	r7, [pc, #208]	@ (8006f38 <_strtod_l+0xb00>)
 8006e68:	2600      	movs	r6, #0
 8006e6a:	e7aa      	b.n	8006dc2 <_strtod_l+0x98a>
 8006e6c:	4b32      	ldr	r3, [pc, #200]	@ (8006f38 <_strtod_l+0xb00>)
 8006e6e:	4630      	mov	r0, r6
 8006e70:	4639      	mov	r1, r7
 8006e72:	2200      	movs	r2, #0
 8006e74:	f7f9 fbc0 	bl	80005f8 <__aeabi_dmul>
 8006e78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	460f      	mov	r7, r1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d09f      	beq.n	8006dc2 <_strtod_l+0x98a>
 8006e82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006e86:	e7a0      	b.n	8006dca <_strtod_l+0x992>
 8006e88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006f10 <_strtod_l+0xad8>
 8006e8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e90:	ec57 6b17 	vmov	r6, r7, d7
 8006e94:	e799      	b.n	8006dca <_strtod_l+0x992>
 8006e96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006e9a:	9b08      	ldr	r3, [sp, #32]
 8006e9c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1c1      	bne.n	8006e28 <_strtod_l+0x9f0>
 8006ea4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ea8:	0d1b      	lsrs	r3, r3, #20
 8006eaa:	051b      	lsls	r3, r3, #20
 8006eac:	429d      	cmp	r5, r3
 8006eae:	d1bb      	bne.n	8006e28 <_strtod_l+0x9f0>
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	f7f9 ff00 	bl	8000cb8 <__aeabi_d2lz>
 8006eb8:	f7f9 fb70 	bl	800059c <__aeabi_l2d>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	4639      	mov	r1, r7
 8006ec4:	f7f9 f9e0 	bl	8000288 <__aeabi_dsub>
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4602      	mov	r2, r0
 8006ecc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006ed0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ed6:	ea46 060a 	orr.w	r6, r6, sl
 8006eda:	431e      	orrs	r6, r3
 8006edc:	d06f      	beq.n	8006fbe <_strtod_l+0xb86>
 8006ede:	a30e      	add	r3, pc, #56	@ (adr r3, 8006f18 <_strtod_l+0xae0>)
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	f7f9 fdfa 	bl	8000adc <__aeabi_dcmplt>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	f47f acd3 	bne.w	8006894 <_strtod_l+0x45c>
 8006eee:	a30c      	add	r3, pc, #48	@ (adr r3, 8006f20 <_strtod_l+0xae8>)
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ef8:	f7f9 fe0e 	bl	8000b18 <__aeabi_dcmpgt>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d093      	beq.n	8006e28 <_strtod_l+0x9f0>
 8006f00:	e4c8      	b.n	8006894 <_strtod_l+0x45c>
 8006f02:	bf00      	nop
 8006f04:	f3af 8000 	nop.w
 8006f08:	00000000 	.word	0x00000000
 8006f0c:	bff00000 	.word	0xbff00000
 8006f10:	00000000 	.word	0x00000000
 8006f14:	3ff00000 	.word	0x3ff00000
 8006f18:	94a03595 	.word	0x94a03595
 8006f1c:	3fdfffff 	.word	0x3fdfffff
 8006f20:	35afe535 	.word	0x35afe535
 8006f24:	3fe00000 	.word	0x3fe00000
 8006f28:	000fffff 	.word	0x000fffff
 8006f2c:	7ff00000 	.word	0x7ff00000
 8006f30:	7fefffff 	.word	0x7fefffff
 8006f34:	3ff00000 	.word	0x3ff00000
 8006f38:	3fe00000 	.word	0x3fe00000
 8006f3c:	7fe00000 	.word	0x7fe00000
 8006f40:	7c9fffff 	.word	0x7c9fffff
 8006f44:	9b08      	ldr	r3, [sp, #32]
 8006f46:	b323      	cbz	r3, 8006f92 <_strtod_l+0xb5a>
 8006f48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006f4c:	d821      	bhi.n	8006f92 <_strtod_l+0xb5a>
 8006f4e:	a328      	add	r3, pc, #160	@ (adr r3, 8006ff0 <_strtod_l+0xbb8>)
 8006f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f54:	4630      	mov	r0, r6
 8006f56:	4639      	mov	r1, r7
 8006f58:	f7f9 fdca 	bl	8000af0 <__aeabi_dcmple>
 8006f5c:	b1a0      	cbz	r0, 8006f88 <_strtod_l+0xb50>
 8006f5e:	4639      	mov	r1, r7
 8006f60:	4630      	mov	r0, r6
 8006f62:	f7f9 fe21 	bl	8000ba8 <__aeabi_d2uiz>
 8006f66:	2801      	cmp	r0, #1
 8006f68:	bf38      	it	cc
 8006f6a:	2001      	movcc	r0, #1
 8006f6c:	f7f9 faca 	bl	8000504 <__aeabi_ui2d>
 8006f70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f72:	4606      	mov	r6, r0
 8006f74:	460f      	mov	r7, r1
 8006f76:	b9fb      	cbnz	r3, 8006fb8 <_strtod_l+0xb80>
 8006f78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f7c:	9014      	str	r0, [sp, #80]	@ 0x50
 8006f7e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006f84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006f88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006f8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006f8e:	1b5b      	subs	r3, r3, r5
 8006f90:	9311      	str	r3, [sp, #68]	@ 0x44
 8006f92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006f96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006f9a:	f7ff f8f1 	bl	8006180 <__ulp>
 8006f9e:	4650      	mov	r0, sl
 8006fa0:	ec53 2b10 	vmov	r2, r3, d0
 8006fa4:	4659      	mov	r1, fp
 8006fa6:	f7f9 fb27 	bl	80005f8 <__aeabi_dmul>
 8006faa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006fae:	f7f9 f96d 	bl	800028c <__adddf3>
 8006fb2:	4682      	mov	sl, r0
 8006fb4:	468b      	mov	fp, r1
 8006fb6:	e770      	b.n	8006e9a <_strtod_l+0xa62>
 8006fb8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006fbc:	e7e0      	b.n	8006f80 <_strtod_l+0xb48>
 8006fbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8006ff8 <_strtod_l+0xbc0>)
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	f7f9 fd8a 	bl	8000adc <__aeabi_dcmplt>
 8006fc8:	e798      	b.n	8006efc <_strtod_l+0xac4>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	930e      	str	r3, [sp, #56]	@ 0x38
 8006fce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006fd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	f7ff ba6d 	b.w	80064b2 <_strtod_l+0x7a>
 8006fd8:	2a65      	cmp	r2, #101	@ 0x65
 8006fda:	f43f ab68 	beq.w	80066ae <_strtod_l+0x276>
 8006fde:	2a45      	cmp	r2, #69	@ 0x45
 8006fe0:	f43f ab65 	beq.w	80066ae <_strtod_l+0x276>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	f7ff bba0 	b.w	800672a <_strtod_l+0x2f2>
 8006fea:	bf00      	nop
 8006fec:	f3af 8000 	nop.w
 8006ff0:	ffc00000 	.word	0xffc00000
 8006ff4:	41dfffff 	.word	0x41dfffff
 8006ff8:	94a03595 	.word	0x94a03595
 8006ffc:	3fcfffff 	.word	0x3fcfffff

08007000 <_strtod_r>:
 8007000:	4b01      	ldr	r3, [pc, #4]	@ (8007008 <_strtod_r+0x8>)
 8007002:	f7ff ba19 	b.w	8006438 <_strtod_l>
 8007006:	bf00      	nop
 8007008:	20000068 	.word	0x20000068

0800700c <_strtol_l.isra.0>:
 800700c:	2b24      	cmp	r3, #36	@ 0x24
 800700e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007012:	4686      	mov	lr, r0
 8007014:	4690      	mov	r8, r2
 8007016:	d801      	bhi.n	800701c <_strtol_l.isra.0+0x10>
 8007018:	2b01      	cmp	r3, #1
 800701a:	d106      	bne.n	800702a <_strtol_l.isra.0+0x1e>
 800701c:	f7fd fdb8 	bl	8004b90 <__errno>
 8007020:	2316      	movs	r3, #22
 8007022:	6003      	str	r3, [r0, #0]
 8007024:	2000      	movs	r0, #0
 8007026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702a:	4834      	ldr	r0, [pc, #208]	@ (80070fc <_strtol_l.isra.0+0xf0>)
 800702c:	460d      	mov	r5, r1
 800702e:	462a      	mov	r2, r5
 8007030:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007034:	5d06      	ldrb	r6, [r0, r4]
 8007036:	f016 0608 	ands.w	r6, r6, #8
 800703a:	d1f8      	bne.n	800702e <_strtol_l.isra.0+0x22>
 800703c:	2c2d      	cmp	r4, #45	@ 0x2d
 800703e:	d110      	bne.n	8007062 <_strtol_l.isra.0+0x56>
 8007040:	782c      	ldrb	r4, [r5, #0]
 8007042:	2601      	movs	r6, #1
 8007044:	1c95      	adds	r5, r2, #2
 8007046:	f033 0210 	bics.w	r2, r3, #16
 800704a:	d115      	bne.n	8007078 <_strtol_l.isra.0+0x6c>
 800704c:	2c30      	cmp	r4, #48	@ 0x30
 800704e:	d10d      	bne.n	800706c <_strtol_l.isra.0+0x60>
 8007050:	782a      	ldrb	r2, [r5, #0]
 8007052:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007056:	2a58      	cmp	r2, #88	@ 0x58
 8007058:	d108      	bne.n	800706c <_strtol_l.isra.0+0x60>
 800705a:	786c      	ldrb	r4, [r5, #1]
 800705c:	3502      	adds	r5, #2
 800705e:	2310      	movs	r3, #16
 8007060:	e00a      	b.n	8007078 <_strtol_l.isra.0+0x6c>
 8007062:	2c2b      	cmp	r4, #43	@ 0x2b
 8007064:	bf04      	itt	eq
 8007066:	782c      	ldrbeq	r4, [r5, #0]
 8007068:	1c95      	addeq	r5, r2, #2
 800706a:	e7ec      	b.n	8007046 <_strtol_l.isra.0+0x3a>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1f6      	bne.n	800705e <_strtol_l.isra.0+0x52>
 8007070:	2c30      	cmp	r4, #48	@ 0x30
 8007072:	bf14      	ite	ne
 8007074:	230a      	movne	r3, #10
 8007076:	2308      	moveq	r3, #8
 8007078:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800707c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007080:	2200      	movs	r2, #0
 8007082:	fbbc f9f3 	udiv	r9, ip, r3
 8007086:	4610      	mov	r0, r2
 8007088:	fb03 ca19 	mls	sl, r3, r9, ip
 800708c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007090:	2f09      	cmp	r7, #9
 8007092:	d80f      	bhi.n	80070b4 <_strtol_l.isra.0+0xa8>
 8007094:	463c      	mov	r4, r7
 8007096:	42a3      	cmp	r3, r4
 8007098:	dd1b      	ble.n	80070d2 <_strtol_l.isra.0+0xc6>
 800709a:	1c57      	adds	r7, r2, #1
 800709c:	d007      	beq.n	80070ae <_strtol_l.isra.0+0xa2>
 800709e:	4581      	cmp	r9, r0
 80070a0:	d314      	bcc.n	80070cc <_strtol_l.isra.0+0xc0>
 80070a2:	d101      	bne.n	80070a8 <_strtol_l.isra.0+0x9c>
 80070a4:	45a2      	cmp	sl, r4
 80070a6:	db11      	blt.n	80070cc <_strtol_l.isra.0+0xc0>
 80070a8:	fb00 4003 	mla	r0, r0, r3, r4
 80070ac:	2201      	movs	r2, #1
 80070ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070b2:	e7eb      	b.n	800708c <_strtol_l.isra.0+0x80>
 80070b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80070b8:	2f19      	cmp	r7, #25
 80070ba:	d801      	bhi.n	80070c0 <_strtol_l.isra.0+0xb4>
 80070bc:	3c37      	subs	r4, #55	@ 0x37
 80070be:	e7ea      	b.n	8007096 <_strtol_l.isra.0+0x8a>
 80070c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80070c4:	2f19      	cmp	r7, #25
 80070c6:	d804      	bhi.n	80070d2 <_strtol_l.isra.0+0xc6>
 80070c8:	3c57      	subs	r4, #87	@ 0x57
 80070ca:	e7e4      	b.n	8007096 <_strtol_l.isra.0+0x8a>
 80070cc:	f04f 32ff 	mov.w	r2, #4294967295
 80070d0:	e7ed      	b.n	80070ae <_strtol_l.isra.0+0xa2>
 80070d2:	1c53      	adds	r3, r2, #1
 80070d4:	d108      	bne.n	80070e8 <_strtol_l.isra.0+0xdc>
 80070d6:	2322      	movs	r3, #34	@ 0x22
 80070d8:	f8ce 3000 	str.w	r3, [lr]
 80070dc:	4660      	mov	r0, ip
 80070de:	f1b8 0f00 	cmp.w	r8, #0
 80070e2:	d0a0      	beq.n	8007026 <_strtol_l.isra.0+0x1a>
 80070e4:	1e69      	subs	r1, r5, #1
 80070e6:	e006      	b.n	80070f6 <_strtol_l.isra.0+0xea>
 80070e8:	b106      	cbz	r6, 80070ec <_strtol_l.isra.0+0xe0>
 80070ea:	4240      	negs	r0, r0
 80070ec:	f1b8 0f00 	cmp.w	r8, #0
 80070f0:	d099      	beq.n	8007026 <_strtol_l.isra.0+0x1a>
 80070f2:	2a00      	cmp	r2, #0
 80070f4:	d1f6      	bne.n	80070e4 <_strtol_l.isra.0+0xd8>
 80070f6:	f8c8 1000 	str.w	r1, [r8]
 80070fa:	e794      	b.n	8007026 <_strtol_l.isra.0+0x1a>
 80070fc:	08009539 	.word	0x08009539

08007100 <_strtol_r>:
 8007100:	f7ff bf84 	b.w	800700c <_strtol_l.isra.0>

08007104 <__ssputs_r>:
 8007104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007108:	688e      	ldr	r6, [r1, #8]
 800710a:	461f      	mov	r7, r3
 800710c:	42be      	cmp	r6, r7
 800710e:	680b      	ldr	r3, [r1, #0]
 8007110:	4682      	mov	sl, r0
 8007112:	460c      	mov	r4, r1
 8007114:	4690      	mov	r8, r2
 8007116:	d82d      	bhi.n	8007174 <__ssputs_r+0x70>
 8007118:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800711c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007120:	d026      	beq.n	8007170 <__ssputs_r+0x6c>
 8007122:	6965      	ldr	r5, [r4, #20]
 8007124:	6909      	ldr	r1, [r1, #16]
 8007126:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800712a:	eba3 0901 	sub.w	r9, r3, r1
 800712e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007132:	1c7b      	adds	r3, r7, #1
 8007134:	444b      	add	r3, r9
 8007136:	106d      	asrs	r5, r5, #1
 8007138:	429d      	cmp	r5, r3
 800713a:	bf38      	it	cc
 800713c:	461d      	movcc	r5, r3
 800713e:	0553      	lsls	r3, r2, #21
 8007140:	d527      	bpl.n	8007192 <__ssputs_r+0x8e>
 8007142:	4629      	mov	r1, r5
 8007144:	f7fe fc24 	bl	8005990 <_malloc_r>
 8007148:	4606      	mov	r6, r0
 800714a:	b360      	cbz	r0, 80071a6 <__ssputs_r+0xa2>
 800714c:	6921      	ldr	r1, [r4, #16]
 800714e:	464a      	mov	r2, r9
 8007150:	f000 fa18 	bl	8007584 <memcpy>
 8007154:	89a3      	ldrh	r3, [r4, #12]
 8007156:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800715a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	6126      	str	r6, [r4, #16]
 8007162:	6165      	str	r5, [r4, #20]
 8007164:	444e      	add	r6, r9
 8007166:	eba5 0509 	sub.w	r5, r5, r9
 800716a:	6026      	str	r6, [r4, #0]
 800716c:	60a5      	str	r5, [r4, #8]
 800716e:	463e      	mov	r6, r7
 8007170:	42be      	cmp	r6, r7
 8007172:	d900      	bls.n	8007176 <__ssputs_r+0x72>
 8007174:	463e      	mov	r6, r7
 8007176:	6820      	ldr	r0, [r4, #0]
 8007178:	4632      	mov	r2, r6
 800717a:	4641      	mov	r1, r8
 800717c:	f000 f9c6 	bl	800750c <memmove>
 8007180:	68a3      	ldr	r3, [r4, #8]
 8007182:	1b9b      	subs	r3, r3, r6
 8007184:	60a3      	str	r3, [r4, #8]
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	4433      	add	r3, r6
 800718a:	6023      	str	r3, [r4, #0]
 800718c:	2000      	movs	r0, #0
 800718e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007192:	462a      	mov	r2, r5
 8007194:	f000 fd89 	bl	8007caa <_realloc_r>
 8007198:	4606      	mov	r6, r0
 800719a:	2800      	cmp	r0, #0
 800719c:	d1e0      	bne.n	8007160 <__ssputs_r+0x5c>
 800719e:	6921      	ldr	r1, [r4, #16]
 80071a0:	4650      	mov	r0, sl
 80071a2:	f7fe fb81 	bl	80058a8 <_free_r>
 80071a6:	230c      	movs	r3, #12
 80071a8:	f8ca 3000 	str.w	r3, [sl]
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071b2:	81a3      	strh	r3, [r4, #12]
 80071b4:	f04f 30ff 	mov.w	r0, #4294967295
 80071b8:	e7e9      	b.n	800718e <__ssputs_r+0x8a>
	...

080071bc <_svfiprintf_r>:
 80071bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c0:	4698      	mov	r8, r3
 80071c2:	898b      	ldrh	r3, [r1, #12]
 80071c4:	061b      	lsls	r3, r3, #24
 80071c6:	b09d      	sub	sp, #116	@ 0x74
 80071c8:	4607      	mov	r7, r0
 80071ca:	460d      	mov	r5, r1
 80071cc:	4614      	mov	r4, r2
 80071ce:	d510      	bpl.n	80071f2 <_svfiprintf_r+0x36>
 80071d0:	690b      	ldr	r3, [r1, #16]
 80071d2:	b973      	cbnz	r3, 80071f2 <_svfiprintf_r+0x36>
 80071d4:	2140      	movs	r1, #64	@ 0x40
 80071d6:	f7fe fbdb 	bl	8005990 <_malloc_r>
 80071da:	6028      	str	r0, [r5, #0]
 80071dc:	6128      	str	r0, [r5, #16]
 80071de:	b930      	cbnz	r0, 80071ee <_svfiprintf_r+0x32>
 80071e0:	230c      	movs	r3, #12
 80071e2:	603b      	str	r3, [r7, #0]
 80071e4:	f04f 30ff 	mov.w	r0, #4294967295
 80071e8:	b01d      	add	sp, #116	@ 0x74
 80071ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ee:	2340      	movs	r3, #64	@ 0x40
 80071f0:	616b      	str	r3, [r5, #20]
 80071f2:	2300      	movs	r3, #0
 80071f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071f6:	2320      	movs	r3, #32
 80071f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007200:	2330      	movs	r3, #48	@ 0x30
 8007202:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80073a0 <_svfiprintf_r+0x1e4>
 8007206:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800720a:	f04f 0901 	mov.w	r9, #1
 800720e:	4623      	mov	r3, r4
 8007210:	469a      	mov	sl, r3
 8007212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007216:	b10a      	cbz	r2, 800721c <_svfiprintf_r+0x60>
 8007218:	2a25      	cmp	r2, #37	@ 0x25
 800721a:	d1f9      	bne.n	8007210 <_svfiprintf_r+0x54>
 800721c:	ebba 0b04 	subs.w	fp, sl, r4
 8007220:	d00b      	beq.n	800723a <_svfiprintf_r+0x7e>
 8007222:	465b      	mov	r3, fp
 8007224:	4622      	mov	r2, r4
 8007226:	4629      	mov	r1, r5
 8007228:	4638      	mov	r0, r7
 800722a:	f7ff ff6b 	bl	8007104 <__ssputs_r>
 800722e:	3001      	adds	r0, #1
 8007230:	f000 80a7 	beq.w	8007382 <_svfiprintf_r+0x1c6>
 8007234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007236:	445a      	add	r2, fp
 8007238:	9209      	str	r2, [sp, #36]	@ 0x24
 800723a:	f89a 3000 	ldrb.w	r3, [sl]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 809f 	beq.w	8007382 <_svfiprintf_r+0x1c6>
 8007244:	2300      	movs	r3, #0
 8007246:	f04f 32ff 	mov.w	r2, #4294967295
 800724a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800724e:	f10a 0a01 	add.w	sl, sl, #1
 8007252:	9304      	str	r3, [sp, #16]
 8007254:	9307      	str	r3, [sp, #28]
 8007256:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800725a:	931a      	str	r3, [sp, #104]	@ 0x68
 800725c:	4654      	mov	r4, sl
 800725e:	2205      	movs	r2, #5
 8007260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007264:	484e      	ldr	r0, [pc, #312]	@ (80073a0 <_svfiprintf_r+0x1e4>)
 8007266:	f7f8 ffb3 	bl	80001d0 <memchr>
 800726a:	9a04      	ldr	r2, [sp, #16]
 800726c:	b9d8      	cbnz	r0, 80072a6 <_svfiprintf_r+0xea>
 800726e:	06d0      	lsls	r0, r2, #27
 8007270:	bf44      	itt	mi
 8007272:	2320      	movmi	r3, #32
 8007274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007278:	0711      	lsls	r1, r2, #28
 800727a:	bf44      	itt	mi
 800727c:	232b      	movmi	r3, #43	@ 0x2b
 800727e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007282:	f89a 3000 	ldrb.w	r3, [sl]
 8007286:	2b2a      	cmp	r3, #42	@ 0x2a
 8007288:	d015      	beq.n	80072b6 <_svfiprintf_r+0xfa>
 800728a:	9a07      	ldr	r2, [sp, #28]
 800728c:	4654      	mov	r4, sl
 800728e:	2000      	movs	r0, #0
 8007290:	f04f 0c0a 	mov.w	ip, #10
 8007294:	4621      	mov	r1, r4
 8007296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800729a:	3b30      	subs	r3, #48	@ 0x30
 800729c:	2b09      	cmp	r3, #9
 800729e:	d94b      	bls.n	8007338 <_svfiprintf_r+0x17c>
 80072a0:	b1b0      	cbz	r0, 80072d0 <_svfiprintf_r+0x114>
 80072a2:	9207      	str	r2, [sp, #28]
 80072a4:	e014      	b.n	80072d0 <_svfiprintf_r+0x114>
 80072a6:	eba0 0308 	sub.w	r3, r0, r8
 80072aa:	fa09 f303 	lsl.w	r3, r9, r3
 80072ae:	4313      	orrs	r3, r2
 80072b0:	9304      	str	r3, [sp, #16]
 80072b2:	46a2      	mov	sl, r4
 80072b4:	e7d2      	b.n	800725c <_svfiprintf_r+0xa0>
 80072b6:	9b03      	ldr	r3, [sp, #12]
 80072b8:	1d19      	adds	r1, r3, #4
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	9103      	str	r1, [sp, #12]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	bfbb      	ittet	lt
 80072c2:	425b      	neglt	r3, r3
 80072c4:	f042 0202 	orrlt.w	r2, r2, #2
 80072c8:	9307      	strge	r3, [sp, #28]
 80072ca:	9307      	strlt	r3, [sp, #28]
 80072cc:	bfb8      	it	lt
 80072ce:	9204      	strlt	r2, [sp, #16]
 80072d0:	7823      	ldrb	r3, [r4, #0]
 80072d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80072d4:	d10a      	bne.n	80072ec <_svfiprintf_r+0x130>
 80072d6:	7863      	ldrb	r3, [r4, #1]
 80072d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80072da:	d132      	bne.n	8007342 <_svfiprintf_r+0x186>
 80072dc:	9b03      	ldr	r3, [sp, #12]
 80072de:	1d1a      	adds	r2, r3, #4
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	9203      	str	r2, [sp, #12]
 80072e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072e8:	3402      	adds	r4, #2
 80072ea:	9305      	str	r3, [sp, #20]
 80072ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80073b0 <_svfiprintf_r+0x1f4>
 80072f0:	7821      	ldrb	r1, [r4, #0]
 80072f2:	2203      	movs	r2, #3
 80072f4:	4650      	mov	r0, sl
 80072f6:	f7f8 ff6b 	bl	80001d0 <memchr>
 80072fa:	b138      	cbz	r0, 800730c <_svfiprintf_r+0x150>
 80072fc:	9b04      	ldr	r3, [sp, #16]
 80072fe:	eba0 000a 	sub.w	r0, r0, sl
 8007302:	2240      	movs	r2, #64	@ 0x40
 8007304:	4082      	lsls	r2, r0
 8007306:	4313      	orrs	r3, r2
 8007308:	3401      	adds	r4, #1
 800730a:	9304      	str	r3, [sp, #16]
 800730c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007310:	4824      	ldr	r0, [pc, #144]	@ (80073a4 <_svfiprintf_r+0x1e8>)
 8007312:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007316:	2206      	movs	r2, #6
 8007318:	f7f8 ff5a 	bl	80001d0 <memchr>
 800731c:	2800      	cmp	r0, #0
 800731e:	d036      	beq.n	800738e <_svfiprintf_r+0x1d2>
 8007320:	4b21      	ldr	r3, [pc, #132]	@ (80073a8 <_svfiprintf_r+0x1ec>)
 8007322:	bb1b      	cbnz	r3, 800736c <_svfiprintf_r+0x1b0>
 8007324:	9b03      	ldr	r3, [sp, #12]
 8007326:	3307      	adds	r3, #7
 8007328:	f023 0307 	bic.w	r3, r3, #7
 800732c:	3308      	adds	r3, #8
 800732e:	9303      	str	r3, [sp, #12]
 8007330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007332:	4433      	add	r3, r6
 8007334:	9309      	str	r3, [sp, #36]	@ 0x24
 8007336:	e76a      	b.n	800720e <_svfiprintf_r+0x52>
 8007338:	fb0c 3202 	mla	r2, ip, r2, r3
 800733c:	460c      	mov	r4, r1
 800733e:	2001      	movs	r0, #1
 8007340:	e7a8      	b.n	8007294 <_svfiprintf_r+0xd8>
 8007342:	2300      	movs	r3, #0
 8007344:	3401      	adds	r4, #1
 8007346:	9305      	str	r3, [sp, #20]
 8007348:	4619      	mov	r1, r3
 800734a:	f04f 0c0a 	mov.w	ip, #10
 800734e:	4620      	mov	r0, r4
 8007350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007354:	3a30      	subs	r2, #48	@ 0x30
 8007356:	2a09      	cmp	r2, #9
 8007358:	d903      	bls.n	8007362 <_svfiprintf_r+0x1a6>
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0c6      	beq.n	80072ec <_svfiprintf_r+0x130>
 800735e:	9105      	str	r1, [sp, #20]
 8007360:	e7c4      	b.n	80072ec <_svfiprintf_r+0x130>
 8007362:	fb0c 2101 	mla	r1, ip, r1, r2
 8007366:	4604      	mov	r4, r0
 8007368:	2301      	movs	r3, #1
 800736a:	e7f0      	b.n	800734e <_svfiprintf_r+0x192>
 800736c:	ab03      	add	r3, sp, #12
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	462a      	mov	r2, r5
 8007372:	4b0e      	ldr	r3, [pc, #56]	@ (80073ac <_svfiprintf_r+0x1f0>)
 8007374:	a904      	add	r1, sp, #16
 8007376:	4638      	mov	r0, r7
 8007378:	f7fc fc90 	bl	8003c9c <_printf_float>
 800737c:	1c42      	adds	r2, r0, #1
 800737e:	4606      	mov	r6, r0
 8007380:	d1d6      	bne.n	8007330 <_svfiprintf_r+0x174>
 8007382:	89ab      	ldrh	r3, [r5, #12]
 8007384:	065b      	lsls	r3, r3, #25
 8007386:	f53f af2d 	bmi.w	80071e4 <_svfiprintf_r+0x28>
 800738a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800738c:	e72c      	b.n	80071e8 <_svfiprintf_r+0x2c>
 800738e:	ab03      	add	r3, sp, #12
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	462a      	mov	r2, r5
 8007394:	4b05      	ldr	r3, [pc, #20]	@ (80073ac <_svfiprintf_r+0x1f0>)
 8007396:	a904      	add	r1, sp, #16
 8007398:	4638      	mov	r0, r7
 800739a:	f7fc ff17 	bl	80041cc <_printf_i>
 800739e:	e7ed      	b.n	800737c <_svfiprintf_r+0x1c0>
 80073a0:	08009331 	.word	0x08009331
 80073a4:	0800933b 	.word	0x0800933b
 80073a8:	08003c9d 	.word	0x08003c9d
 80073ac:	08007105 	.word	0x08007105
 80073b0:	08009337 	.word	0x08009337

080073b4 <__sflush_r>:
 80073b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073bc:	0716      	lsls	r6, r2, #28
 80073be:	4605      	mov	r5, r0
 80073c0:	460c      	mov	r4, r1
 80073c2:	d454      	bmi.n	800746e <__sflush_r+0xba>
 80073c4:	684b      	ldr	r3, [r1, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	dc02      	bgt.n	80073d0 <__sflush_r+0x1c>
 80073ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	dd48      	ble.n	8007462 <__sflush_r+0xae>
 80073d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073d2:	2e00      	cmp	r6, #0
 80073d4:	d045      	beq.n	8007462 <__sflush_r+0xae>
 80073d6:	2300      	movs	r3, #0
 80073d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80073dc:	682f      	ldr	r7, [r5, #0]
 80073de:	6a21      	ldr	r1, [r4, #32]
 80073e0:	602b      	str	r3, [r5, #0]
 80073e2:	d030      	beq.n	8007446 <__sflush_r+0x92>
 80073e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80073e6:	89a3      	ldrh	r3, [r4, #12]
 80073e8:	0759      	lsls	r1, r3, #29
 80073ea:	d505      	bpl.n	80073f8 <__sflush_r+0x44>
 80073ec:	6863      	ldr	r3, [r4, #4]
 80073ee:	1ad2      	subs	r2, r2, r3
 80073f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073f2:	b10b      	cbz	r3, 80073f8 <__sflush_r+0x44>
 80073f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80073f6:	1ad2      	subs	r2, r2, r3
 80073f8:	2300      	movs	r3, #0
 80073fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073fc:	6a21      	ldr	r1, [r4, #32]
 80073fe:	4628      	mov	r0, r5
 8007400:	47b0      	blx	r6
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	d106      	bne.n	8007416 <__sflush_r+0x62>
 8007408:	6829      	ldr	r1, [r5, #0]
 800740a:	291d      	cmp	r1, #29
 800740c:	d82b      	bhi.n	8007466 <__sflush_r+0xb2>
 800740e:	4a2a      	ldr	r2, [pc, #168]	@ (80074b8 <__sflush_r+0x104>)
 8007410:	40ca      	lsrs	r2, r1
 8007412:	07d6      	lsls	r6, r2, #31
 8007414:	d527      	bpl.n	8007466 <__sflush_r+0xb2>
 8007416:	2200      	movs	r2, #0
 8007418:	6062      	str	r2, [r4, #4]
 800741a:	04d9      	lsls	r1, r3, #19
 800741c:	6922      	ldr	r2, [r4, #16]
 800741e:	6022      	str	r2, [r4, #0]
 8007420:	d504      	bpl.n	800742c <__sflush_r+0x78>
 8007422:	1c42      	adds	r2, r0, #1
 8007424:	d101      	bne.n	800742a <__sflush_r+0x76>
 8007426:	682b      	ldr	r3, [r5, #0]
 8007428:	b903      	cbnz	r3, 800742c <__sflush_r+0x78>
 800742a:	6560      	str	r0, [r4, #84]	@ 0x54
 800742c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800742e:	602f      	str	r7, [r5, #0]
 8007430:	b1b9      	cbz	r1, 8007462 <__sflush_r+0xae>
 8007432:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007436:	4299      	cmp	r1, r3
 8007438:	d002      	beq.n	8007440 <__sflush_r+0x8c>
 800743a:	4628      	mov	r0, r5
 800743c:	f7fe fa34 	bl	80058a8 <_free_r>
 8007440:	2300      	movs	r3, #0
 8007442:	6363      	str	r3, [r4, #52]	@ 0x34
 8007444:	e00d      	b.n	8007462 <__sflush_r+0xae>
 8007446:	2301      	movs	r3, #1
 8007448:	4628      	mov	r0, r5
 800744a:	47b0      	blx	r6
 800744c:	4602      	mov	r2, r0
 800744e:	1c50      	adds	r0, r2, #1
 8007450:	d1c9      	bne.n	80073e6 <__sflush_r+0x32>
 8007452:	682b      	ldr	r3, [r5, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0c6      	beq.n	80073e6 <__sflush_r+0x32>
 8007458:	2b1d      	cmp	r3, #29
 800745a:	d001      	beq.n	8007460 <__sflush_r+0xac>
 800745c:	2b16      	cmp	r3, #22
 800745e:	d11e      	bne.n	800749e <__sflush_r+0xea>
 8007460:	602f      	str	r7, [r5, #0]
 8007462:	2000      	movs	r0, #0
 8007464:	e022      	b.n	80074ac <__sflush_r+0xf8>
 8007466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800746a:	b21b      	sxth	r3, r3
 800746c:	e01b      	b.n	80074a6 <__sflush_r+0xf2>
 800746e:	690f      	ldr	r7, [r1, #16]
 8007470:	2f00      	cmp	r7, #0
 8007472:	d0f6      	beq.n	8007462 <__sflush_r+0xae>
 8007474:	0793      	lsls	r3, r2, #30
 8007476:	680e      	ldr	r6, [r1, #0]
 8007478:	bf08      	it	eq
 800747a:	694b      	ldreq	r3, [r1, #20]
 800747c:	600f      	str	r7, [r1, #0]
 800747e:	bf18      	it	ne
 8007480:	2300      	movne	r3, #0
 8007482:	eba6 0807 	sub.w	r8, r6, r7
 8007486:	608b      	str	r3, [r1, #8]
 8007488:	f1b8 0f00 	cmp.w	r8, #0
 800748c:	dde9      	ble.n	8007462 <__sflush_r+0xae>
 800748e:	6a21      	ldr	r1, [r4, #32]
 8007490:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007492:	4643      	mov	r3, r8
 8007494:	463a      	mov	r2, r7
 8007496:	4628      	mov	r0, r5
 8007498:	47b0      	blx	r6
 800749a:	2800      	cmp	r0, #0
 800749c:	dc08      	bgt.n	80074b0 <__sflush_r+0xfc>
 800749e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074a6:	81a3      	strh	r3, [r4, #12]
 80074a8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074b0:	4407      	add	r7, r0
 80074b2:	eba8 0800 	sub.w	r8, r8, r0
 80074b6:	e7e7      	b.n	8007488 <__sflush_r+0xd4>
 80074b8:	20400001 	.word	0x20400001

080074bc <_fflush_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	690b      	ldr	r3, [r1, #16]
 80074c0:	4605      	mov	r5, r0
 80074c2:	460c      	mov	r4, r1
 80074c4:	b913      	cbnz	r3, 80074cc <_fflush_r+0x10>
 80074c6:	2500      	movs	r5, #0
 80074c8:	4628      	mov	r0, r5
 80074ca:	bd38      	pop	{r3, r4, r5, pc}
 80074cc:	b118      	cbz	r0, 80074d6 <_fflush_r+0x1a>
 80074ce:	6a03      	ldr	r3, [r0, #32]
 80074d0:	b90b      	cbnz	r3, 80074d6 <_fflush_r+0x1a>
 80074d2:	f7fd fa33 	bl	800493c <__sinit>
 80074d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0f3      	beq.n	80074c6 <_fflush_r+0xa>
 80074de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074e0:	07d0      	lsls	r0, r2, #31
 80074e2:	d404      	bmi.n	80074ee <_fflush_r+0x32>
 80074e4:	0599      	lsls	r1, r3, #22
 80074e6:	d402      	bmi.n	80074ee <_fflush_r+0x32>
 80074e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074ea:	f7fd fb7c 	bl	8004be6 <__retarget_lock_acquire_recursive>
 80074ee:	4628      	mov	r0, r5
 80074f0:	4621      	mov	r1, r4
 80074f2:	f7ff ff5f 	bl	80073b4 <__sflush_r>
 80074f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074f8:	07da      	lsls	r2, r3, #31
 80074fa:	4605      	mov	r5, r0
 80074fc:	d4e4      	bmi.n	80074c8 <_fflush_r+0xc>
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	059b      	lsls	r3, r3, #22
 8007502:	d4e1      	bmi.n	80074c8 <_fflush_r+0xc>
 8007504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007506:	f7fd fb6f 	bl	8004be8 <__retarget_lock_release_recursive>
 800750a:	e7dd      	b.n	80074c8 <_fflush_r+0xc>

0800750c <memmove>:
 800750c:	4288      	cmp	r0, r1
 800750e:	b510      	push	{r4, lr}
 8007510:	eb01 0402 	add.w	r4, r1, r2
 8007514:	d902      	bls.n	800751c <memmove+0x10>
 8007516:	4284      	cmp	r4, r0
 8007518:	4623      	mov	r3, r4
 800751a:	d807      	bhi.n	800752c <memmove+0x20>
 800751c:	1e43      	subs	r3, r0, #1
 800751e:	42a1      	cmp	r1, r4
 8007520:	d008      	beq.n	8007534 <memmove+0x28>
 8007522:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007526:	f803 2f01 	strb.w	r2, [r3, #1]!
 800752a:	e7f8      	b.n	800751e <memmove+0x12>
 800752c:	4402      	add	r2, r0
 800752e:	4601      	mov	r1, r0
 8007530:	428a      	cmp	r2, r1
 8007532:	d100      	bne.n	8007536 <memmove+0x2a>
 8007534:	bd10      	pop	{r4, pc}
 8007536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800753a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800753e:	e7f7      	b.n	8007530 <memmove+0x24>

08007540 <strncmp>:
 8007540:	b510      	push	{r4, lr}
 8007542:	b16a      	cbz	r2, 8007560 <strncmp+0x20>
 8007544:	3901      	subs	r1, #1
 8007546:	1884      	adds	r4, r0, r2
 8007548:	f810 2b01 	ldrb.w	r2, [r0], #1
 800754c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007550:	429a      	cmp	r2, r3
 8007552:	d103      	bne.n	800755c <strncmp+0x1c>
 8007554:	42a0      	cmp	r0, r4
 8007556:	d001      	beq.n	800755c <strncmp+0x1c>
 8007558:	2a00      	cmp	r2, #0
 800755a:	d1f5      	bne.n	8007548 <strncmp+0x8>
 800755c:	1ad0      	subs	r0, r2, r3
 800755e:	bd10      	pop	{r4, pc}
 8007560:	4610      	mov	r0, r2
 8007562:	e7fc      	b.n	800755e <strncmp+0x1e>

08007564 <_sbrk_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d06      	ldr	r5, [pc, #24]	@ (8007580 <_sbrk_r+0x1c>)
 8007568:	2300      	movs	r3, #0
 800756a:	4604      	mov	r4, r0
 800756c:	4608      	mov	r0, r1
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	f7fa fb20 	bl	8001bb4 <_sbrk>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_sbrk_r+0x1a>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b103      	cbz	r3, 800757e <_sbrk_r+0x1a>
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	2000044c 	.word	0x2000044c

08007584 <memcpy>:
 8007584:	440a      	add	r2, r1
 8007586:	4291      	cmp	r1, r2
 8007588:	f100 33ff 	add.w	r3, r0, #4294967295
 800758c:	d100      	bne.n	8007590 <memcpy+0xc>
 800758e:	4770      	bx	lr
 8007590:	b510      	push	{r4, lr}
 8007592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800759a:	4291      	cmp	r1, r2
 800759c:	d1f9      	bne.n	8007592 <memcpy+0xe>
 800759e:	bd10      	pop	{r4, pc}

080075a0 <nan>:
 80075a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80075a8 <nan+0x8>
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	00000000 	.word	0x00000000
 80075ac:	7ff80000 	.word	0x7ff80000

080075b0 <__assert_func>:
 80075b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075b2:	4614      	mov	r4, r2
 80075b4:	461a      	mov	r2, r3
 80075b6:	4b09      	ldr	r3, [pc, #36]	@ (80075dc <__assert_func+0x2c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4605      	mov	r5, r0
 80075bc:	68d8      	ldr	r0, [r3, #12]
 80075be:	b14c      	cbz	r4, 80075d4 <__assert_func+0x24>
 80075c0:	4b07      	ldr	r3, [pc, #28]	@ (80075e0 <__assert_func+0x30>)
 80075c2:	9100      	str	r1, [sp, #0]
 80075c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075c8:	4906      	ldr	r1, [pc, #24]	@ (80075e4 <__assert_func+0x34>)
 80075ca:	462b      	mov	r3, r5
 80075cc:	f000 fba8 	bl	8007d20 <fiprintf>
 80075d0:	f000 fbb8 	bl	8007d44 <abort>
 80075d4:	4b04      	ldr	r3, [pc, #16]	@ (80075e8 <__assert_func+0x38>)
 80075d6:	461c      	mov	r4, r3
 80075d8:	e7f3      	b.n	80075c2 <__assert_func+0x12>
 80075da:	bf00      	nop
 80075dc:	20000018 	.word	0x20000018
 80075e0:	0800934a 	.word	0x0800934a
 80075e4:	08009357 	.word	0x08009357
 80075e8:	08009385 	.word	0x08009385

080075ec <_calloc_r>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	fba1 5402 	umull	r5, r4, r1, r2
 80075f2:	b934      	cbnz	r4, 8007602 <_calloc_r+0x16>
 80075f4:	4629      	mov	r1, r5
 80075f6:	f7fe f9cb 	bl	8005990 <_malloc_r>
 80075fa:	4606      	mov	r6, r0
 80075fc:	b928      	cbnz	r0, 800760a <_calloc_r+0x1e>
 80075fe:	4630      	mov	r0, r6
 8007600:	bd70      	pop	{r4, r5, r6, pc}
 8007602:	220c      	movs	r2, #12
 8007604:	6002      	str	r2, [r0, #0]
 8007606:	2600      	movs	r6, #0
 8007608:	e7f9      	b.n	80075fe <_calloc_r+0x12>
 800760a:	462a      	mov	r2, r5
 800760c:	4621      	mov	r1, r4
 800760e:	f7fd fa6d 	bl	8004aec <memset>
 8007612:	e7f4      	b.n	80075fe <_calloc_r+0x12>

08007614 <rshift>:
 8007614:	6903      	ldr	r3, [r0, #16]
 8007616:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800761a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800761e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007622:	f100 0414 	add.w	r4, r0, #20
 8007626:	dd45      	ble.n	80076b4 <rshift+0xa0>
 8007628:	f011 011f 	ands.w	r1, r1, #31
 800762c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007630:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007634:	d10c      	bne.n	8007650 <rshift+0x3c>
 8007636:	f100 0710 	add.w	r7, r0, #16
 800763a:	4629      	mov	r1, r5
 800763c:	42b1      	cmp	r1, r6
 800763e:	d334      	bcc.n	80076aa <rshift+0x96>
 8007640:	1a9b      	subs	r3, r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	1eea      	subs	r2, r5, #3
 8007646:	4296      	cmp	r6, r2
 8007648:	bf38      	it	cc
 800764a:	2300      	movcc	r3, #0
 800764c:	4423      	add	r3, r4
 800764e:	e015      	b.n	800767c <rshift+0x68>
 8007650:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007654:	f1c1 0820 	rsb	r8, r1, #32
 8007658:	40cf      	lsrs	r7, r1
 800765a:	f105 0e04 	add.w	lr, r5, #4
 800765e:	46a1      	mov	r9, r4
 8007660:	4576      	cmp	r6, lr
 8007662:	46f4      	mov	ip, lr
 8007664:	d815      	bhi.n	8007692 <rshift+0x7e>
 8007666:	1a9a      	subs	r2, r3, r2
 8007668:	0092      	lsls	r2, r2, #2
 800766a:	3a04      	subs	r2, #4
 800766c:	3501      	adds	r5, #1
 800766e:	42ae      	cmp	r6, r5
 8007670:	bf38      	it	cc
 8007672:	2200      	movcc	r2, #0
 8007674:	18a3      	adds	r3, r4, r2
 8007676:	50a7      	str	r7, [r4, r2]
 8007678:	b107      	cbz	r7, 800767c <rshift+0x68>
 800767a:	3304      	adds	r3, #4
 800767c:	1b1a      	subs	r2, r3, r4
 800767e:	42a3      	cmp	r3, r4
 8007680:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007684:	bf08      	it	eq
 8007686:	2300      	moveq	r3, #0
 8007688:	6102      	str	r2, [r0, #16]
 800768a:	bf08      	it	eq
 800768c:	6143      	streq	r3, [r0, #20]
 800768e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007692:	f8dc c000 	ldr.w	ip, [ip]
 8007696:	fa0c fc08 	lsl.w	ip, ip, r8
 800769a:	ea4c 0707 	orr.w	r7, ip, r7
 800769e:	f849 7b04 	str.w	r7, [r9], #4
 80076a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80076a6:	40cf      	lsrs	r7, r1
 80076a8:	e7da      	b.n	8007660 <rshift+0x4c>
 80076aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80076ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80076b2:	e7c3      	b.n	800763c <rshift+0x28>
 80076b4:	4623      	mov	r3, r4
 80076b6:	e7e1      	b.n	800767c <rshift+0x68>

080076b8 <__hexdig_fun>:
 80076b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80076bc:	2b09      	cmp	r3, #9
 80076be:	d802      	bhi.n	80076c6 <__hexdig_fun+0xe>
 80076c0:	3820      	subs	r0, #32
 80076c2:	b2c0      	uxtb	r0, r0
 80076c4:	4770      	bx	lr
 80076c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	d801      	bhi.n	80076d2 <__hexdig_fun+0x1a>
 80076ce:	3847      	subs	r0, #71	@ 0x47
 80076d0:	e7f7      	b.n	80076c2 <__hexdig_fun+0xa>
 80076d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80076d6:	2b05      	cmp	r3, #5
 80076d8:	d801      	bhi.n	80076de <__hexdig_fun+0x26>
 80076da:	3827      	subs	r0, #39	@ 0x27
 80076dc:	e7f1      	b.n	80076c2 <__hexdig_fun+0xa>
 80076de:	2000      	movs	r0, #0
 80076e0:	4770      	bx	lr
	...

080076e4 <__gethex>:
 80076e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e8:	b085      	sub	sp, #20
 80076ea:	468a      	mov	sl, r1
 80076ec:	9302      	str	r3, [sp, #8]
 80076ee:	680b      	ldr	r3, [r1, #0]
 80076f0:	9001      	str	r0, [sp, #4]
 80076f2:	4690      	mov	r8, r2
 80076f4:	1c9c      	adds	r4, r3, #2
 80076f6:	46a1      	mov	r9, r4
 80076f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80076fc:	2830      	cmp	r0, #48	@ 0x30
 80076fe:	d0fa      	beq.n	80076f6 <__gethex+0x12>
 8007700:	eba9 0303 	sub.w	r3, r9, r3
 8007704:	f1a3 0b02 	sub.w	fp, r3, #2
 8007708:	f7ff ffd6 	bl	80076b8 <__hexdig_fun>
 800770c:	4605      	mov	r5, r0
 800770e:	2800      	cmp	r0, #0
 8007710:	d168      	bne.n	80077e4 <__gethex+0x100>
 8007712:	49a0      	ldr	r1, [pc, #640]	@ (8007994 <__gethex+0x2b0>)
 8007714:	2201      	movs	r2, #1
 8007716:	4648      	mov	r0, r9
 8007718:	f7ff ff12 	bl	8007540 <strncmp>
 800771c:	4607      	mov	r7, r0
 800771e:	2800      	cmp	r0, #0
 8007720:	d167      	bne.n	80077f2 <__gethex+0x10e>
 8007722:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007726:	4626      	mov	r6, r4
 8007728:	f7ff ffc6 	bl	80076b8 <__hexdig_fun>
 800772c:	2800      	cmp	r0, #0
 800772e:	d062      	beq.n	80077f6 <__gethex+0x112>
 8007730:	4623      	mov	r3, r4
 8007732:	7818      	ldrb	r0, [r3, #0]
 8007734:	2830      	cmp	r0, #48	@ 0x30
 8007736:	4699      	mov	r9, r3
 8007738:	f103 0301 	add.w	r3, r3, #1
 800773c:	d0f9      	beq.n	8007732 <__gethex+0x4e>
 800773e:	f7ff ffbb 	bl	80076b8 <__hexdig_fun>
 8007742:	fab0 f580 	clz	r5, r0
 8007746:	096d      	lsrs	r5, r5, #5
 8007748:	f04f 0b01 	mov.w	fp, #1
 800774c:	464a      	mov	r2, r9
 800774e:	4616      	mov	r6, r2
 8007750:	3201      	adds	r2, #1
 8007752:	7830      	ldrb	r0, [r6, #0]
 8007754:	f7ff ffb0 	bl	80076b8 <__hexdig_fun>
 8007758:	2800      	cmp	r0, #0
 800775a:	d1f8      	bne.n	800774e <__gethex+0x6a>
 800775c:	498d      	ldr	r1, [pc, #564]	@ (8007994 <__gethex+0x2b0>)
 800775e:	2201      	movs	r2, #1
 8007760:	4630      	mov	r0, r6
 8007762:	f7ff feed 	bl	8007540 <strncmp>
 8007766:	2800      	cmp	r0, #0
 8007768:	d13f      	bne.n	80077ea <__gethex+0x106>
 800776a:	b944      	cbnz	r4, 800777e <__gethex+0x9a>
 800776c:	1c74      	adds	r4, r6, #1
 800776e:	4622      	mov	r2, r4
 8007770:	4616      	mov	r6, r2
 8007772:	3201      	adds	r2, #1
 8007774:	7830      	ldrb	r0, [r6, #0]
 8007776:	f7ff ff9f 	bl	80076b8 <__hexdig_fun>
 800777a:	2800      	cmp	r0, #0
 800777c:	d1f8      	bne.n	8007770 <__gethex+0x8c>
 800777e:	1ba4      	subs	r4, r4, r6
 8007780:	00a7      	lsls	r7, r4, #2
 8007782:	7833      	ldrb	r3, [r6, #0]
 8007784:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007788:	2b50      	cmp	r3, #80	@ 0x50
 800778a:	d13e      	bne.n	800780a <__gethex+0x126>
 800778c:	7873      	ldrb	r3, [r6, #1]
 800778e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007790:	d033      	beq.n	80077fa <__gethex+0x116>
 8007792:	2b2d      	cmp	r3, #45	@ 0x2d
 8007794:	d034      	beq.n	8007800 <__gethex+0x11c>
 8007796:	1c71      	adds	r1, r6, #1
 8007798:	2400      	movs	r4, #0
 800779a:	7808      	ldrb	r0, [r1, #0]
 800779c:	f7ff ff8c 	bl	80076b8 <__hexdig_fun>
 80077a0:	1e43      	subs	r3, r0, #1
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b18      	cmp	r3, #24
 80077a6:	d830      	bhi.n	800780a <__gethex+0x126>
 80077a8:	f1a0 0210 	sub.w	r2, r0, #16
 80077ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80077b0:	f7ff ff82 	bl	80076b8 <__hexdig_fun>
 80077b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80077b8:	fa5f fc8c 	uxtb.w	ip, ip
 80077bc:	f1bc 0f18 	cmp.w	ip, #24
 80077c0:	f04f 030a 	mov.w	r3, #10
 80077c4:	d91e      	bls.n	8007804 <__gethex+0x120>
 80077c6:	b104      	cbz	r4, 80077ca <__gethex+0xe6>
 80077c8:	4252      	negs	r2, r2
 80077ca:	4417      	add	r7, r2
 80077cc:	f8ca 1000 	str.w	r1, [sl]
 80077d0:	b1ed      	cbz	r5, 800780e <__gethex+0x12a>
 80077d2:	f1bb 0f00 	cmp.w	fp, #0
 80077d6:	bf0c      	ite	eq
 80077d8:	2506      	moveq	r5, #6
 80077da:	2500      	movne	r5, #0
 80077dc:	4628      	mov	r0, r5
 80077de:	b005      	add	sp, #20
 80077e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e4:	2500      	movs	r5, #0
 80077e6:	462c      	mov	r4, r5
 80077e8:	e7b0      	b.n	800774c <__gethex+0x68>
 80077ea:	2c00      	cmp	r4, #0
 80077ec:	d1c7      	bne.n	800777e <__gethex+0x9a>
 80077ee:	4627      	mov	r7, r4
 80077f0:	e7c7      	b.n	8007782 <__gethex+0x9e>
 80077f2:	464e      	mov	r6, r9
 80077f4:	462f      	mov	r7, r5
 80077f6:	2501      	movs	r5, #1
 80077f8:	e7c3      	b.n	8007782 <__gethex+0x9e>
 80077fa:	2400      	movs	r4, #0
 80077fc:	1cb1      	adds	r1, r6, #2
 80077fe:	e7cc      	b.n	800779a <__gethex+0xb6>
 8007800:	2401      	movs	r4, #1
 8007802:	e7fb      	b.n	80077fc <__gethex+0x118>
 8007804:	fb03 0002 	mla	r0, r3, r2, r0
 8007808:	e7ce      	b.n	80077a8 <__gethex+0xc4>
 800780a:	4631      	mov	r1, r6
 800780c:	e7de      	b.n	80077cc <__gethex+0xe8>
 800780e:	eba6 0309 	sub.w	r3, r6, r9
 8007812:	3b01      	subs	r3, #1
 8007814:	4629      	mov	r1, r5
 8007816:	2b07      	cmp	r3, #7
 8007818:	dc0a      	bgt.n	8007830 <__gethex+0x14c>
 800781a:	9801      	ldr	r0, [sp, #4]
 800781c:	f7fe f944 	bl	8005aa8 <_Balloc>
 8007820:	4604      	mov	r4, r0
 8007822:	b940      	cbnz	r0, 8007836 <__gethex+0x152>
 8007824:	4b5c      	ldr	r3, [pc, #368]	@ (8007998 <__gethex+0x2b4>)
 8007826:	4602      	mov	r2, r0
 8007828:	21e4      	movs	r1, #228	@ 0xe4
 800782a:	485c      	ldr	r0, [pc, #368]	@ (800799c <__gethex+0x2b8>)
 800782c:	f7ff fec0 	bl	80075b0 <__assert_func>
 8007830:	3101      	adds	r1, #1
 8007832:	105b      	asrs	r3, r3, #1
 8007834:	e7ef      	b.n	8007816 <__gethex+0x132>
 8007836:	f100 0a14 	add.w	sl, r0, #20
 800783a:	2300      	movs	r3, #0
 800783c:	4655      	mov	r5, sl
 800783e:	469b      	mov	fp, r3
 8007840:	45b1      	cmp	r9, r6
 8007842:	d337      	bcc.n	80078b4 <__gethex+0x1d0>
 8007844:	f845 bb04 	str.w	fp, [r5], #4
 8007848:	eba5 050a 	sub.w	r5, r5, sl
 800784c:	10ad      	asrs	r5, r5, #2
 800784e:	6125      	str	r5, [r4, #16]
 8007850:	4658      	mov	r0, fp
 8007852:	f7fe fa1b 	bl	8005c8c <__hi0bits>
 8007856:	016d      	lsls	r5, r5, #5
 8007858:	f8d8 6000 	ldr.w	r6, [r8]
 800785c:	1a2d      	subs	r5, r5, r0
 800785e:	42b5      	cmp	r5, r6
 8007860:	dd54      	ble.n	800790c <__gethex+0x228>
 8007862:	1bad      	subs	r5, r5, r6
 8007864:	4629      	mov	r1, r5
 8007866:	4620      	mov	r0, r4
 8007868:	f7fe fda7 	bl	80063ba <__any_on>
 800786c:	4681      	mov	r9, r0
 800786e:	b178      	cbz	r0, 8007890 <__gethex+0x1ac>
 8007870:	1e6b      	subs	r3, r5, #1
 8007872:	1159      	asrs	r1, r3, #5
 8007874:	f003 021f 	and.w	r2, r3, #31
 8007878:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800787c:	f04f 0901 	mov.w	r9, #1
 8007880:	fa09 f202 	lsl.w	r2, r9, r2
 8007884:	420a      	tst	r2, r1
 8007886:	d003      	beq.n	8007890 <__gethex+0x1ac>
 8007888:	454b      	cmp	r3, r9
 800788a:	dc36      	bgt.n	80078fa <__gethex+0x216>
 800788c:	f04f 0902 	mov.w	r9, #2
 8007890:	4629      	mov	r1, r5
 8007892:	4620      	mov	r0, r4
 8007894:	f7ff febe 	bl	8007614 <rshift>
 8007898:	442f      	add	r7, r5
 800789a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800789e:	42bb      	cmp	r3, r7
 80078a0:	da42      	bge.n	8007928 <__gethex+0x244>
 80078a2:	9801      	ldr	r0, [sp, #4]
 80078a4:	4621      	mov	r1, r4
 80078a6:	f7fe f93f 	bl	8005b28 <_Bfree>
 80078aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078ac:	2300      	movs	r3, #0
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	25a3      	movs	r5, #163	@ 0xa3
 80078b2:	e793      	b.n	80077dc <__gethex+0xf8>
 80078b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80078b8:	2a2e      	cmp	r2, #46	@ 0x2e
 80078ba:	d012      	beq.n	80078e2 <__gethex+0x1fe>
 80078bc:	2b20      	cmp	r3, #32
 80078be:	d104      	bne.n	80078ca <__gethex+0x1e6>
 80078c0:	f845 bb04 	str.w	fp, [r5], #4
 80078c4:	f04f 0b00 	mov.w	fp, #0
 80078c8:	465b      	mov	r3, fp
 80078ca:	7830      	ldrb	r0, [r6, #0]
 80078cc:	9303      	str	r3, [sp, #12]
 80078ce:	f7ff fef3 	bl	80076b8 <__hexdig_fun>
 80078d2:	9b03      	ldr	r3, [sp, #12]
 80078d4:	f000 000f 	and.w	r0, r0, #15
 80078d8:	4098      	lsls	r0, r3
 80078da:	ea4b 0b00 	orr.w	fp, fp, r0
 80078de:	3304      	adds	r3, #4
 80078e0:	e7ae      	b.n	8007840 <__gethex+0x15c>
 80078e2:	45b1      	cmp	r9, r6
 80078e4:	d8ea      	bhi.n	80078bc <__gethex+0x1d8>
 80078e6:	492b      	ldr	r1, [pc, #172]	@ (8007994 <__gethex+0x2b0>)
 80078e8:	9303      	str	r3, [sp, #12]
 80078ea:	2201      	movs	r2, #1
 80078ec:	4630      	mov	r0, r6
 80078ee:	f7ff fe27 	bl	8007540 <strncmp>
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	2800      	cmp	r0, #0
 80078f6:	d1e1      	bne.n	80078bc <__gethex+0x1d8>
 80078f8:	e7a2      	b.n	8007840 <__gethex+0x15c>
 80078fa:	1ea9      	subs	r1, r5, #2
 80078fc:	4620      	mov	r0, r4
 80078fe:	f7fe fd5c 	bl	80063ba <__any_on>
 8007902:	2800      	cmp	r0, #0
 8007904:	d0c2      	beq.n	800788c <__gethex+0x1a8>
 8007906:	f04f 0903 	mov.w	r9, #3
 800790a:	e7c1      	b.n	8007890 <__gethex+0x1ac>
 800790c:	da09      	bge.n	8007922 <__gethex+0x23e>
 800790e:	1b75      	subs	r5, r6, r5
 8007910:	4621      	mov	r1, r4
 8007912:	9801      	ldr	r0, [sp, #4]
 8007914:	462a      	mov	r2, r5
 8007916:	f7fe fb17 	bl	8005f48 <__lshift>
 800791a:	1b7f      	subs	r7, r7, r5
 800791c:	4604      	mov	r4, r0
 800791e:	f100 0a14 	add.w	sl, r0, #20
 8007922:	f04f 0900 	mov.w	r9, #0
 8007926:	e7b8      	b.n	800789a <__gethex+0x1b6>
 8007928:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800792c:	42bd      	cmp	r5, r7
 800792e:	dd6f      	ble.n	8007a10 <__gethex+0x32c>
 8007930:	1bed      	subs	r5, r5, r7
 8007932:	42ae      	cmp	r6, r5
 8007934:	dc34      	bgt.n	80079a0 <__gethex+0x2bc>
 8007936:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d022      	beq.n	8007984 <__gethex+0x2a0>
 800793e:	2b03      	cmp	r3, #3
 8007940:	d024      	beq.n	800798c <__gethex+0x2a8>
 8007942:	2b01      	cmp	r3, #1
 8007944:	d115      	bne.n	8007972 <__gethex+0x28e>
 8007946:	42ae      	cmp	r6, r5
 8007948:	d113      	bne.n	8007972 <__gethex+0x28e>
 800794a:	2e01      	cmp	r6, #1
 800794c:	d10b      	bne.n	8007966 <__gethex+0x282>
 800794e:	9a02      	ldr	r2, [sp, #8]
 8007950:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	2301      	movs	r3, #1
 8007958:	6123      	str	r3, [r4, #16]
 800795a:	f8ca 3000 	str.w	r3, [sl]
 800795e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007960:	2562      	movs	r5, #98	@ 0x62
 8007962:	601c      	str	r4, [r3, #0]
 8007964:	e73a      	b.n	80077dc <__gethex+0xf8>
 8007966:	1e71      	subs	r1, r6, #1
 8007968:	4620      	mov	r0, r4
 800796a:	f7fe fd26 	bl	80063ba <__any_on>
 800796e:	2800      	cmp	r0, #0
 8007970:	d1ed      	bne.n	800794e <__gethex+0x26a>
 8007972:	9801      	ldr	r0, [sp, #4]
 8007974:	4621      	mov	r1, r4
 8007976:	f7fe f8d7 	bl	8005b28 <_Bfree>
 800797a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800797c:	2300      	movs	r3, #0
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	2550      	movs	r5, #80	@ 0x50
 8007982:	e72b      	b.n	80077dc <__gethex+0xf8>
 8007984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1f3      	bne.n	8007972 <__gethex+0x28e>
 800798a:	e7e0      	b.n	800794e <__gethex+0x26a>
 800798c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1dd      	bne.n	800794e <__gethex+0x26a>
 8007992:	e7ee      	b.n	8007972 <__gethex+0x28e>
 8007994:	0800932f 	.word	0x0800932f
 8007998:	080092c5 	.word	0x080092c5
 800799c:	08009386 	.word	0x08009386
 80079a0:	1e6f      	subs	r7, r5, #1
 80079a2:	f1b9 0f00 	cmp.w	r9, #0
 80079a6:	d130      	bne.n	8007a0a <__gethex+0x326>
 80079a8:	b127      	cbz	r7, 80079b4 <__gethex+0x2d0>
 80079aa:	4639      	mov	r1, r7
 80079ac:	4620      	mov	r0, r4
 80079ae:	f7fe fd04 	bl	80063ba <__any_on>
 80079b2:	4681      	mov	r9, r0
 80079b4:	117a      	asrs	r2, r7, #5
 80079b6:	2301      	movs	r3, #1
 80079b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80079bc:	f007 071f 	and.w	r7, r7, #31
 80079c0:	40bb      	lsls	r3, r7
 80079c2:	4213      	tst	r3, r2
 80079c4:	4629      	mov	r1, r5
 80079c6:	4620      	mov	r0, r4
 80079c8:	bf18      	it	ne
 80079ca:	f049 0902 	orrne.w	r9, r9, #2
 80079ce:	f7ff fe21 	bl	8007614 <rshift>
 80079d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80079d6:	1b76      	subs	r6, r6, r5
 80079d8:	2502      	movs	r5, #2
 80079da:	f1b9 0f00 	cmp.w	r9, #0
 80079de:	d047      	beq.n	8007a70 <__gethex+0x38c>
 80079e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d015      	beq.n	8007a14 <__gethex+0x330>
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	d017      	beq.n	8007a1c <__gethex+0x338>
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d109      	bne.n	8007a04 <__gethex+0x320>
 80079f0:	f019 0f02 	tst.w	r9, #2
 80079f4:	d006      	beq.n	8007a04 <__gethex+0x320>
 80079f6:	f8da 3000 	ldr.w	r3, [sl]
 80079fa:	ea49 0903 	orr.w	r9, r9, r3
 80079fe:	f019 0f01 	tst.w	r9, #1
 8007a02:	d10e      	bne.n	8007a22 <__gethex+0x33e>
 8007a04:	f045 0510 	orr.w	r5, r5, #16
 8007a08:	e032      	b.n	8007a70 <__gethex+0x38c>
 8007a0a:	f04f 0901 	mov.w	r9, #1
 8007a0e:	e7d1      	b.n	80079b4 <__gethex+0x2d0>
 8007a10:	2501      	movs	r5, #1
 8007a12:	e7e2      	b.n	80079da <__gethex+0x2f6>
 8007a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a16:	f1c3 0301 	rsb	r3, r3, #1
 8007a1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0f0      	beq.n	8007a04 <__gethex+0x320>
 8007a22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007a26:	f104 0314 	add.w	r3, r4, #20
 8007a2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007a2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007a32:	f04f 0c00 	mov.w	ip, #0
 8007a36:	4618      	mov	r0, r3
 8007a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007a40:	d01b      	beq.n	8007a7a <__gethex+0x396>
 8007a42:	3201      	adds	r2, #1
 8007a44:	6002      	str	r2, [r0, #0]
 8007a46:	2d02      	cmp	r5, #2
 8007a48:	f104 0314 	add.w	r3, r4, #20
 8007a4c:	d13c      	bne.n	8007ac8 <__gethex+0x3e4>
 8007a4e:	f8d8 2000 	ldr.w	r2, [r8]
 8007a52:	3a01      	subs	r2, #1
 8007a54:	42b2      	cmp	r2, r6
 8007a56:	d109      	bne.n	8007a6c <__gethex+0x388>
 8007a58:	1171      	asrs	r1, r6, #5
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a60:	f006 061f 	and.w	r6, r6, #31
 8007a64:	fa02 f606 	lsl.w	r6, r2, r6
 8007a68:	421e      	tst	r6, r3
 8007a6a:	d13a      	bne.n	8007ae2 <__gethex+0x3fe>
 8007a6c:	f045 0520 	orr.w	r5, r5, #32
 8007a70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a72:	601c      	str	r4, [r3, #0]
 8007a74:	9b02      	ldr	r3, [sp, #8]
 8007a76:	601f      	str	r7, [r3, #0]
 8007a78:	e6b0      	b.n	80077dc <__gethex+0xf8>
 8007a7a:	4299      	cmp	r1, r3
 8007a7c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007a80:	d8d9      	bhi.n	8007a36 <__gethex+0x352>
 8007a82:	68a3      	ldr	r3, [r4, #8]
 8007a84:	459b      	cmp	fp, r3
 8007a86:	db17      	blt.n	8007ab8 <__gethex+0x3d4>
 8007a88:	6861      	ldr	r1, [r4, #4]
 8007a8a:	9801      	ldr	r0, [sp, #4]
 8007a8c:	3101      	adds	r1, #1
 8007a8e:	f7fe f80b 	bl	8005aa8 <_Balloc>
 8007a92:	4681      	mov	r9, r0
 8007a94:	b918      	cbnz	r0, 8007a9e <__gethex+0x3ba>
 8007a96:	4b1a      	ldr	r3, [pc, #104]	@ (8007b00 <__gethex+0x41c>)
 8007a98:	4602      	mov	r2, r0
 8007a9a:	2184      	movs	r1, #132	@ 0x84
 8007a9c:	e6c5      	b.n	800782a <__gethex+0x146>
 8007a9e:	6922      	ldr	r2, [r4, #16]
 8007aa0:	3202      	adds	r2, #2
 8007aa2:	f104 010c 	add.w	r1, r4, #12
 8007aa6:	0092      	lsls	r2, r2, #2
 8007aa8:	300c      	adds	r0, #12
 8007aaa:	f7ff fd6b 	bl	8007584 <memcpy>
 8007aae:	4621      	mov	r1, r4
 8007ab0:	9801      	ldr	r0, [sp, #4]
 8007ab2:	f7fe f839 	bl	8005b28 <_Bfree>
 8007ab6:	464c      	mov	r4, r9
 8007ab8:	6923      	ldr	r3, [r4, #16]
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ac0:	6122      	str	r2, [r4, #16]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	615a      	str	r2, [r3, #20]
 8007ac6:	e7be      	b.n	8007a46 <__gethex+0x362>
 8007ac8:	6922      	ldr	r2, [r4, #16]
 8007aca:	455a      	cmp	r2, fp
 8007acc:	dd0b      	ble.n	8007ae6 <__gethex+0x402>
 8007ace:	2101      	movs	r1, #1
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f7ff fd9f 	bl	8007614 <rshift>
 8007ad6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ada:	3701      	adds	r7, #1
 8007adc:	42bb      	cmp	r3, r7
 8007ade:	f6ff aee0 	blt.w	80078a2 <__gethex+0x1be>
 8007ae2:	2501      	movs	r5, #1
 8007ae4:	e7c2      	b.n	8007a6c <__gethex+0x388>
 8007ae6:	f016 061f 	ands.w	r6, r6, #31
 8007aea:	d0fa      	beq.n	8007ae2 <__gethex+0x3fe>
 8007aec:	4453      	add	r3, sl
 8007aee:	f1c6 0620 	rsb	r6, r6, #32
 8007af2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007af6:	f7fe f8c9 	bl	8005c8c <__hi0bits>
 8007afa:	42b0      	cmp	r0, r6
 8007afc:	dbe7      	blt.n	8007ace <__gethex+0x3ea>
 8007afe:	e7f0      	b.n	8007ae2 <__gethex+0x3fe>
 8007b00:	080092c5 	.word	0x080092c5

08007b04 <L_shift>:
 8007b04:	f1c2 0208 	rsb	r2, r2, #8
 8007b08:	0092      	lsls	r2, r2, #2
 8007b0a:	b570      	push	{r4, r5, r6, lr}
 8007b0c:	f1c2 0620 	rsb	r6, r2, #32
 8007b10:	6843      	ldr	r3, [r0, #4]
 8007b12:	6804      	ldr	r4, [r0, #0]
 8007b14:	fa03 f506 	lsl.w	r5, r3, r6
 8007b18:	432c      	orrs	r4, r5
 8007b1a:	40d3      	lsrs	r3, r2
 8007b1c:	6004      	str	r4, [r0, #0]
 8007b1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007b22:	4288      	cmp	r0, r1
 8007b24:	d3f4      	bcc.n	8007b10 <L_shift+0xc>
 8007b26:	bd70      	pop	{r4, r5, r6, pc}

08007b28 <__match>:
 8007b28:	b530      	push	{r4, r5, lr}
 8007b2a:	6803      	ldr	r3, [r0, #0]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b32:	b914      	cbnz	r4, 8007b3a <__match+0x12>
 8007b34:	6003      	str	r3, [r0, #0]
 8007b36:	2001      	movs	r0, #1
 8007b38:	bd30      	pop	{r4, r5, pc}
 8007b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007b42:	2d19      	cmp	r5, #25
 8007b44:	bf98      	it	ls
 8007b46:	3220      	addls	r2, #32
 8007b48:	42a2      	cmp	r2, r4
 8007b4a:	d0f0      	beq.n	8007b2e <__match+0x6>
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	e7f3      	b.n	8007b38 <__match+0x10>

08007b50 <__hexnan>:
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	680b      	ldr	r3, [r1, #0]
 8007b56:	6801      	ldr	r1, [r0, #0]
 8007b58:	115e      	asrs	r6, r3, #5
 8007b5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007b5e:	f013 031f 	ands.w	r3, r3, #31
 8007b62:	b087      	sub	sp, #28
 8007b64:	bf18      	it	ne
 8007b66:	3604      	addne	r6, #4
 8007b68:	2500      	movs	r5, #0
 8007b6a:	1f37      	subs	r7, r6, #4
 8007b6c:	4682      	mov	sl, r0
 8007b6e:	4690      	mov	r8, r2
 8007b70:	9301      	str	r3, [sp, #4]
 8007b72:	f846 5c04 	str.w	r5, [r6, #-4]
 8007b76:	46b9      	mov	r9, r7
 8007b78:	463c      	mov	r4, r7
 8007b7a:	9502      	str	r5, [sp, #8]
 8007b7c:	46ab      	mov	fp, r5
 8007b7e:	784a      	ldrb	r2, [r1, #1]
 8007b80:	1c4b      	adds	r3, r1, #1
 8007b82:	9303      	str	r3, [sp, #12]
 8007b84:	b342      	cbz	r2, 8007bd8 <__hexnan+0x88>
 8007b86:	4610      	mov	r0, r2
 8007b88:	9105      	str	r1, [sp, #20]
 8007b8a:	9204      	str	r2, [sp, #16]
 8007b8c:	f7ff fd94 	bl	80076b8 <__hexdig_fun>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d151      	bne.n	8007c38 <__hexnan+0xe8>
 8007b94:	9a04      	ldr	r2, [sp, #16]
 8007b96:	9905      	ldr	r1, [sp, #20]
 8007b98:	2a20      	cmp	r2, #32
 8007b9a:	d818      	bhi.n	8007bce <__hexnan+0x7e>
 8007b9c:	9b02      	ldr	r3, [sp, #8]
 8007b9e:	459b      	cmp	fp, r3
 8007ba0:	dd13      	ble.n	8007bca <__hexnan+0x7a>
 8007ba2:	454c      	cmp	r4, r9
 8007ba4:	d206      	bcs.n	8007bb4 <__hexnan+0x64>
 8007ba6:	2d07      	cmp	r5, #7
 8007ba8:	dc04      	bgt.n	8007bb4 <__hexnan+0x64>
 8007baa:	462a      	mov	r2, r5
 8007bac:	4649      	mov	r1, r9
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f7ff ffa8 	bl	8007b04 <L_shift>
 8007bb4:	4544      	cmp	r4, r8
 8007bb6:	d952      	bls.n	8007c5e <__hexnan+0x10e>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f1a4 0904 	sub.w	r9, r4, #4
 8007bbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8007bc2:	f8cd b008 	str.w	fp, [sp, #8]
 8007bc6:	464c      	mov	r4, r9
 8007bc8:	461d      	mov	r5, r3
 8007bca:	9903      	ldr	r1, [sp, #12]
 8007bcc:	e7d7      	b.n	8007b7e <__hexnan+0x2e>
 8007bce:	2a29      	cmp	r2, #41	@ 0x29
 8007bd0:	d157      	bne.n	8007c82 <__hexnan+0x132>
 8007bd2:	3102      	adds	r1, #2
 8007bd4:	f8ca 1000 	str.w	r1, [sl]
 8007bd8:	f1bb 0f00 	cmp.w	fp, #0
 8007bdc:	d051      	beq.n	8007c82 <__hexnan+0x132>
 8007bde:	454c      	cmp	r4, r9
 8007be0:	d206      	bcs.n	8007bf0 <__hexnan+0xa0>
 8007be2:	2d07      	cmp	r5, #7
 8007be4:	dc04      	bgt.n	8007bf0 <__hexnan+0xa0>
 8007be6:	462a      	mov	r2, r5
 8007be8:	4649      	mov	r1, r9
 8007bea:	4620      	mov	r0, r4
 8007bec:	f7ff ff8a 	bl	8007b04 <L_shift>
 8007bf0:	4544      	cmp	r4, r8
 8007bf2:	d936      	bls.n	8007c62 <__hexnan+0x112>
 8007bf4:	f1a8 0204 	sub.w	r2, r8, #4
 8007bf8:	4623      	mov	r3, r4
 8007bfa:	f853 1b04 	ldr.w	r1, [r3], #4
 8007bfe:	f842 1f04 	str.w	r1, [r2, #4]!
 8007c02:	429f      	cmp	r7, r3
 8007c04:	d2f9      	bcs.n	8007bfa <__hexnan+0xaa>
 8007c06:	1b3b      	subs	r3, r7, r4
 8007c08:	f023 0303 	bic.w	r3, r3, #3
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	3401      	adds	r4, #1
 8007c10:	3e03      	subs	r6, #3
 8007c12:	42b4      	cmp	r4, r6
 8007c14:	bf88      	it	hi
 8007c16:	2304      	movhi	r3, #4
 8007c18:	4443      	add	r3, r8
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f843 2b04 	str.w	r2, [r3], #4
 8007c20:	429f      	cmp	r7, r3
 8007c22:	d2fb      	bcs.n	8007c1c <__hexnan+0xcc>
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	b91b      	cbnz	r3, 8007c30 <__hexnan+0xe0>
 8007c28:	4547      	cmp	r7, r8
 8007c2a:	d128      	bne.n	8007c7e <__hexnan+0x12e>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	603b      	str	r3, [r7, #0]
 8007c30:	2005      	movs	r0, #5
 8007c32:	b007      	add	sp, #28
 8007c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c38:	3501      	adds	r5, #1
 8007c3a:	2d08      	cmp	r5, #8
 8007c3c:	f10b 0b01 	add.w	fp, fp, #1
 8007c40:	dd06      	ble.n	8007c50 <__hexnan+0x100>
 8007c42:	4544      	cmp	r4, r8
 8007c44:	d9c1      	bls.n	8007bca <__hexnan+0x7a>
 8007c46:	2300      	movs	r3, #0
 8007c48:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c4c:	2501      	movs	r5, #1
 8007c4e:	3c04      	subs	r4, #4
 8007c50:	6822      	ldr	r2, [r4, #0]
 8007c52:	f000 000f 	and.w	r0, r0, #15
 8007c56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007c5a:	6020      	str	r0, [r4, #0]
 8007c5c:	e7b5      	b.n	8007bca <__hexnan+0x7a>
 8007c5e:	2508      	movs	r5, #8
 8007c60:	e7b3      	b.n	8007bca <__hexnan+0x7a>
 8007c62:	9b01      	ldr	r3, [sp, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0dd      	beq.n	8007c24 <__hexnan+0xd4>
 8007c68:	f1c3 0320 	rsb	r3, r3, #32
 8007c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c70:	40da      	lsrs	r2, r3
 8007c72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007c76:	4013      	ands	r3, r2
 8007c78:	f846 3c04 	str.w	r3, [r6, #-4]
 8007c7c:	e7d2      	b.n	8007c24 <__hexnan+0xd4>
 8007c7e:	3f04      	subs	r7, #4
 8007c80:	e7d0      	b.n	8007c24 <__hexnan+0xd4>
 8007c82:	2004      	movs	r0, #4
 8007c84:	e7d5      	b.n	8007c32 <__hexnan+0xe2>

08007c86 <__ascii_mbtowc>:
 8007c86:	b082      	sub	sp, #8
 8007c88:	b901      	cbnz	r1, 8007c8c <__ascii_mbtowc+0x6>
 8007c8a:	a901      	add	r1, sp, #4
 8007c8c:	b142      	cbz	r2, 8007ca0 <__ascii_mbtowc+0x1a>
 8007c8e:	b14b      	cbz	r3, 8007ca4 <__ascii_mbtowc+0x1e>
 8007c90:	7813      	ldrb	r3, [r2, #0]
 8007c92:	600b      	str	r3, [r1, #0]
 8007c94:	7812      	ldrb	r2, [r2, #0]
 8007c96:	1e10      	subs	r0, r2, #0
 8007c98:	bf18      	it	ne
 8007c9a:	2001      	movne	r0, #1
 8007c9c:	b002      	add	sp, #8
 8007c9e:	4770      	bx	lr
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	e7fb      	b.n	8007c9c <__ascii_mbtowc+0x16>
 8007ca4:	f06f 0001 	mvn.w	r0, #1
 8007ca8:	e7f8      	b.n	8007c9c <__ascii_mbtowc+0x16>

08007caa <_realloc_r>:
 8007caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cae:	4607      	mov	r7, r0
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	460d      	mov	r5, r1
 8007cb4:	b921      	cbnz	r1, 8007cc0 <_realloc_r+0x16>
 8007cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cba:	4611      	mov	r1, r2
 8007cbc:	f7fd be68 	b.w	8005990 <_malloc_r>
 8007cc0:	b92a      	cbnz	r2, 8007cce <_realloc_r+0x24>
 8007cc2:	f7fd fdf1 	bl	80058a8 <_free_r>
 8007cc6:	4625      	mov	r5, r4
 8007cc8:	4628      	mov	r0, r5
 8007cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cce:	f000 f840 	bl	8007d52 <_malloc_usable_size_r>
 8007cd2:	4284      	cmp	r4, r0
 8007cd4:	4606      	mov	r6, r0
 8007cd6:	d802      	bhi.n	8007cde <_realloc_r+0x34>
 8007cd8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cdc:	d8f4      	bhi.n	8007cc8 <_realloc_r+0x1e>
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4638      	mov	r0, r7
 8007ce2:	f7fd fe55 	bl	8005990 <_malloc_r>
 8007ce6:	4680      	mov	r8, r0
 8007ce8:	b908      	cbnz	r0, 8007cee <_realloc_r+0x44>
 8007cea:	4645      	mov	r5, r8
 8007cec:	e7ec      	b.n	8007cc8 <_realloc_r+0x1e>
 8007cee:	42b4      	cmp	r4, r6
 8007cf0:	4622      	mov	r2, r4
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	bf28      	it	cs
 8007cf6:	4632      	movcs	r2, r6
 8007cf8:	f7ff fc44 	bl	8007584 <memcpy>
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	4638      	mov	r0, r7
 8007d00:	f7fd fdd2 	bl	80058a8 <_free_r>
 8007d04:	e7f1      	b.n	8007cea <_realloc_r+0x40>

08007d06 <__ascii_wctomb>:
 8007d06:	4603      	mov	r3, r0
 8007d08:	4608      	mov	r0, r1
 8007d0a:	b141      	cbz	r1, 8007d1e <__ascii_wctomb+0x18>
 8007d0c:	2aff      	cmp	r2, #255	@ 0xff
 8007d0e:	d904      	bls.n	8007d1a <__ascii_wctomb+0x14>
 8007d10:	228a      	movs	r2, #138	@ 0x8a
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	4770      	bx	lr
 8007d1a:	700a      	strb	r2, [r1, #0]
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	4770      	bx	lr

08007d20 <fiprintf>:
 8007d20:	b40e      	push	{r1, r2, r3}
 8007d22:	b503      	push	{r0, r1, lr}
 8007d24:	4601      	mov	r1, r0
 8007d26:	ab03      	add	r3, sp, #12
 8007d28:	4805      	ldr	r0, [pc, #20]	@ (8007d40 <fiprintf+0x20>)
 8007d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d2e:	6800      	ldr	r0, [r0, #0]
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	f000 f83f 	bl	8007db4 <_vfiprintf_r>
 8007d36:	b002      	add	sp, #8
 8007d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d3c:	b003      	add	sp, #12
 8007d3e:	4770      	bx	lr
 8007d40:	20000018 	.word	0x20000018

08007d44 <abort>:
 8007d44:	b508      	push	{r3, lr}
 8007d46:	2006      	movs	r0, #6
 8007d48:	f000 fa08 	bl	800815c <raise>
 8007d4c:	2001      	movs	r0, #1
 8007d4e:	f7f9 feb8 	bl	8001ac2 <_exit>

08007d52 <_malloc_usable_size_r>:
 8007d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d56:	1f18      	subs	r0, r3, #4
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	bfbc      	itt	lt
 8007d5c:	580b      	ldrlt	r3, [r1, r0]
 8007d5e:	18c0      	addlt	r0, r0, r3
 8007d60:	4770      	bx	lr

08007d62 <__sfputc_r>:
 8007d62:	6893      	ldr	r3, [r2, #8]
 8007d64:	3b01      	subs	r3, #1
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	b410      	push	{r4}
 8007d6a:	6093      	str	r3, [r2, #8]
 8007d6c:	da08      	bge.n	8007d80 <__sfputc_r+0x1e>
 8007d6e:	6994      	ldr	r4, [r2, #24]
 8007d70:	42a3      	cmp	r3, r4
 8007d72:	db01      	blt.n	8007d78 <__sfputc_r+0x16>
 8007d74:	290a      	cmp	r1, #10
 8007d76:	d103      	bne.n	8007d80 <__sfputc_r+0x1e>
 8007d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d7c:	f000 b932 	b.w	8007fe4 <__swbuf_r>
 8007d80:	6813      	ldr	r3, [r2, #0]
 8007d82:	1c58      	adds	r0, r3, #1
 8007d84:	6010      	str	r0, [r2, #0]
 8007d86:	7019      	strb	r1, [r3, #0]
 8007d88:	4608      	mov	r0, r1
 8007d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <__sfputs_r>:
 8007d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d92:	4606      	mov	r6, r0
 8007d94:	460f      	mov	r7, r1
 8007d96:	4614      	mov	r4, r2
 8007d98:	18d5      	adds	r5, r2, r3
 8007d9a:	42ac      	cmp	r4, r5
 8007d9c:	d101      	bne.n	8007da2 <__sfputs_r+0x12>
 8007d9e:	2000      	movs	r0, #0
 8007da0:	e007      	b.n	8007db2 <__sfputs_r+0x22>
 8007da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da6:	463a      	mov	r2, r7
 8007da8:	4630      	mov	r0, r6
 8007daa:	f7ff ffda 	bl	8007d62 <__sfputc_r>
 8007dae:	1c43      	adds	r3, r0, #1
 8007db0:	d1f3      	bne.n	8007d9a <__sfputs_r+0xa>
 8007db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007db4 <_vfiprintf_r>:
 8007db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db8:	460d      	mov	r5, r1
 8007dba:	b09d      	sub	sp, #116	@ 0x74
 8007dbc:	4614      	mov	r4, r2
 8007dbe:	4698      	mov	r8, r3
 8007dc0:	4606      	mov	r6, r0
 8007dc2:	b118      	cbz	r0, 8007dcc <_vfiprintf_r+0x18>
 8007dc4:	6a03      	ldr	r3, [r0, #32]
 8007dc6:	b90b      	cbnz	r3, 8007dcc <_vfiprintf_r+0x18>
 8007dc8:	f7fc fdb8 	bl	800493c <__sinit>
 8007dcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dce:	07d9      	lsls	r1, r3, #31
 8007dd0:	d405      	bmi.n	8007dde <_vfiprintf_r+0x2a>
 8007dd2:	89ab      	ldrh	r3, [r5, #12]
 8007dd4:	059a      	lsls	r2, r3, #22
 8007dd6:	d402      	bmi.n	8007dde <_vfiprintf_r+0x2a>
 8007dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dda:	f7fc ff04 	bl	8004be6 <__retarget_lock_acquire_recursive>
 8007dde:	89ab      	ldrh	r3, [r5, #12]
 8007de0:	071b      	lsls	r3, r3, #28
 8007de2:	d501      	bpl.n	8007de8 <_vfiprintf_r+0x34>
 8007de4:	692b      	ldr	r3, [r5, #16]
 8007de6:	b99b      	cbnz	r3, 8007e10 <_vfiprintf_r+0x5c>
 8007de8:	4629      	mov	r1, r5
 8007dea:	4630      	mov	r0, r6
 8007dec:	f000 f938 	bl	8008060 <__swsetup_r>
 8007df0:	b170      	cbz	r0, 8007e10 <_vfiprintf_r+0x5c>
 8007df2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007df4:	07dc      	lsls	r4, r3, #31
 8007df6:	d504      	bpl.n	8007e02 <_vfiprintf_r+0x4e>
 8007df8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfc:	b01d      	add	sp, #116	@ 0x74
 8007dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e02:	89ab      	ldrh	r3, [r5, #12]
 8007e04:	0598      	lsls	r0, r3, #22
 8007e06:	d4f7      	bmi.n	8007df8 <_vfiprintf_r+0x44>
 8007e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e0a:	f7fc feed 	bl	8004be8 <__retarget_lock_release_recursive>
 8007e0e:	e7f3      	b.n	8007df8 <_vfiprintf_r+0x44>
 8007e10:	2300      	movs	r3, #0
 8007e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e14:	2320      	movs	r3, #32
 8007e16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e1e:	2330      	movs	r3, #48	@ 0x30
 8007e20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007fd0 <_vfiprintf_r+0x21c>
 8007e24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e28:	f04f 0901 	mov.w	r9, #1
 8007e2c:	4623      	mov	r3, r4
 8007e2e:	469a      	mov	sl, r3
 8007e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e34:	b10a      	cbz	r2, 8007e3a <_vfiprintf_r+0x86>
 8007e36:	2a25      	cmp	r2, #37	@ 0x25
 8007e38:	d1f9      	bne.n	8007e2e <_vfiprintf_r+0x7a>
 8007e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8007e3e:	d00b      	beq.n	8007e58 <_vfiprintf_r+0xa4>
 8007e40:	465b      	mov	r3, fp
 8007e42:	4622      	mov	r2, r4
 8007e44:	4629      	mov	r1, r5
 8007e46:	4630      	mov	r0, r6
 8007e48:	f7ff ffa2 	bl	8007d90 <__sfputs_r>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	f000 80a7 	beq.w	8007fa0 <_vfiprintf_r+0x1ec>
 8007e52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e54:	445a      	add	r2, fp
 8007e56:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e58:	f89a 3000 	ldrb.w	r3, [sl]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 809f 	beq.w	8007fa0 <_vfiprintf_r+0x1ec>
 8007e62:	2300      	movs	r3, #0
 8007e64:	f04f 32ff 	mov.w	r2, #4294967295
 8007e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e6c:	f10a 0a01 	add.w	sl, sl, #1
 8007e70:	9304      	str	r3, [sp, #16]
 8007e72:	9307      	str	r3, [sp, #28]
 8007e74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e78:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e7a:	4654      	mov	r4, sl
 8007e7c:	2205      	movs	r2, #5
 8007e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e82:	4853      	ldr	r0, [pc, #332]	@ (8007fd0 <_vfiprintf_r+0x21c>)
 8007e84:	f7f8 f9a4 	bl	80001d0 <memchr>
 8007e88:	9a04      	ldr	r2, [sp, #16]
 8007e8a:	b9d8      	cbnz	r0, 8007ec4 <_vfiprintf_r+0x110>
 8007e8c:	06d1      	lsls	r1, r2, #27
 8007e8e:	bf44      	itt	mi
 8007e90:	2320      	movmi	r3, #32
 8007e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e96:	0713      	lsls	r3, r2, #28
 8007e98:	bf44      	itt	mi
 8007e9a:	232b      	movmi	r3, #43	@ 0x2b
 8007e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ea6:	d015      	beq.n	8007ed4 <_vfiprintf_r+0x120>
 8007ea8:	9a07      	ldr	r2, [sp, #28]
 8007eaa:	4654      	mov	r4, sl
 8007eac:	2000      	movs	r0, #0
 8007eae:	f04f 0c0a 	mov.w	ip, #10
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eb8:	3b30      	subs	r3, #48	@ 0x30
 8007eba:	2b09      	cmp	r3, #9
 8007ebc:	d94b      	bls.n	8007f56 <_vfiprintf_r+0x1a2>
 8007ebe:	b1b0      	cbz	r0, 8007eee <_vfiprintf_r+0x13a>
 8007ec0:	9207      	str	r2, [sp, #28]
 8007ec2:	e014      	b.n	8007eee <_vfiprintf_r+0x13a>
 8007ec4:	eba0 0308 	sub.w	r3, r0, r8
 8007ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	9304      	str	r3, [sp, #16]
 8007ed0:	46a2      	mov	sl, r4
 8007ed2:	e7d2      	b.n	8007e7a <_vfiprintf_r+0xc6>
 8007ed4:	9b03      	ldr	r3, [sp, #12]
 8007ed6:	1d19      	adds	r1, r3, #4
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	9103      	str	r1, [sp, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	bfbb      	ittet	lt
 8007ee0:	425b      	neglt	r3, r3
 8007ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ee6:	9307      	strge	r3, [sp, #28]
 8007ee8:	9307      	strlt	r3, [sp, #28]
 8007eea:	bfb8      	it	lt
 8007eec:	9204      	strlt	r2, [sp, #16]
 8007eee:	7823      	ldrb	r3, [r4, #0]
 8007ef0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ef2:	d10a      	bne.n	8007f0a <_vfiprintf_r+0x156>
 8007ef4:	7863      	ldrb	r3, [r4, #1]
 8007ef6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ef8:	d132      	bne.n	8007f60 <_vfiprintf_r+0x1ac>
 8007efa:	9b03      	ldr	r3, [sp, #12]
 8007efc:	1d1a      	adds	r2, r3, #4
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	9203      	str	r2, [sp, #12]
 8007f02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f06:	3402      	adds	r4, #2
 8007f08:	9305      	str	r3, [sp, #20]
 8007f0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007fe0 <_vfiprintf_r+0x22c>
 8007f0e:	7821      	ldrb	r1, [r4, #0]
 8007f10:	2203      	movs	r2, #3
 8007f12:	4650      	mov	r0, sl
 8007f14:	f7f8 f95c 	bl	80001d0 <memchr>
 8007f18:	b138      	cbz	r0, 8007f2a <_vfiprintf_r+0x176>
 8007f1a:	9b04      	ldr	r3, [sp, #16]
 8007f1c:	eba0 000a 	sub.w	r0, r0, sl
 8007f20:	2240      	movs	r2, #64	@ 0x40
 8007f22:	4082      	lsls	r2, r0
 8007f24:	4313      	orrs	r3, r2
 8007f26:	3401      	adds	r4, #1
 8007f28:	9304      	str	r3, [sp, #16]
 8007f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f2e:	4829      	ldr	r0, [pc, #164]	@ (8007fd4 <_vfiprintf_r+0x220>)
 8007f30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f34:	2206      	movs	r2, #6
 8007f36:	f7f8 f94b 	bl	80001d0 <memchr>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d03f      	beq.n	8007fbe <_vfiprintf_r+0x20a>
 8007f3e:	4b26      	ldr	r3, [pc, #152]	@ (8007fd8 <_vfiprintf_r+0x224>)
 8007f40:	bb1b      	cbnz	r3, 8007f8a <_vfiprintf_r+0x1d6>
 8007f42:	9b03      	ldr	r3, [sp, #12]
 8007f44:	3307      	adds	r3, #7
 8007f46:	f023 0307 	bic.w	r3, r3, #7
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	9303      	str	r3, [sp, #12]
 8007f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f50:	443b      	add	r3, r7
 8007f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f54:	e76a      	b.n	8007e2c <_vfiprintf_r+0x78>
 8007f56:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	2001      	movs	r0, #1
 8007f5e:	e7a8      	b.n	8007eb2 <_vfiprintf_r+0xfe>
 8007f60:	2300      	movs	r3, #0
 8007f62:	3401      	adds	r4, #1
 8007f64:	9305      	str	r3, [sp, #20]
 8007f66:	4619      	mov	r1, r3
 8007f68:	f04f 0c0a 	mov.w	ip, #10
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f72:	3a30      	subs	r2, #48	@ 0x30
 8007f74:	2a09      	cmp	r2, #9
 8007f76:	d903      	bls.n	8007f80 <_vfiprintf_r+0x1cc>
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d0c6      	beq.n	8007f0a <_vfiprintf_r+0x156>
 8007f7c:	9105      	str	r1, [sp, #20]
 8007f7e:	e7c4      	b.n	8007f0a <_vfiprintf_r+0x156>
 8007f80:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f84:	4604      	mov	r4, r0
 8007f86:	2301      	movs	r3, #1
 8007f88:	e7f0      	b.n	8007f6c <_vfiprintf_r+0x1b8>
 8007f8a:	ab03      	add	r3, sp, #12
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	462a      	mov	r2, r5
 8007f90:	4b12      	ldr	r3, [pc, #72]	@ (8007fdc <_vfiprintf_r+0x228>)
 8007f92:	a904      	add	r1, sp, #16
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7fb fe81 	bl	8003c9c <_printf_float>
 8007f9a:	4607      	mov	r7, r0
 8007f9c:	1c78      	adds	r0, r7, #1
 8007f9e:	d1d6      	bne.n	8007f4e <_vfiprintf_r+0x19a>
 8007fa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fa2:	07d9      	lsls	r1, r3, #31
 8007fa4:	d405      	bmi.n	8007fb2 <_vfiprintf_r+0x1fe>
 8007fa6:	89ab      	ldrh	r3, [r5, #12]
 8007fa8:	059a      	lsls	r2, r3, #22
 8007faa:	d402      	bmi.n	8007fb2 <_vfiprintf_r+0x1fe>
 8007fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fae:	f7fc fe1b 	bl	8004be8 <__retarget_lock_release_recursive>
 8007fb2:	89ab      	ldrh	r3, [r5, #12]
 8007fb4:	065b      	lsls	r3, r3, #25
 8007fb6:	f53f af1f 	bmi.w	8007df8 <_vfiprintf_r+0x44>
 8007fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fbc:	e71e      	b.n	8007dfc <_vfiprintf_r+0x48>
 8007fbe:	ab03      	add	r3, sp, #12
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	462a      	mov	r2, r5
 8007fc4:	4b05      	ldr	r3, [pc, #20]	@ (8007fdc <_vfiprintf_r+0x228>)
 8007fc6:	a904      	add	r1, sp, #16
 8007fc8:	4630      	mov	r0, r6
 8007fca:	f7fc f8ff 	bl	80041cc <_printf_i>
 8007fce:	e7e4      	b.n	8007f9a <_vfiprintf_r+0x1e6>
 8007fd0:	08009331 	.word	0x08009331
 8007fd4:	0800933b 	.word	0x0800933b
 8007fd8:	08003c9d 	.word	0x08003c9d
 8007fdc:	08007d91 	.word	0x08007d91
 8007fe0:	08009337 	.word	0x08009337

08007fe4 <__swbuf_r>:
 8007fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe6:	460e      	mov	r6, r1
 8007fe8:	4614      	mov	r4, r2
 8007fea:	4605      	mov	r5, r0
 8007fec:	b118      	cbz	r0, 8007ff6 <__swbuf_r+0x12>
 8007fee:	6a03      	ldr	r3, [r0, #32]
 8007ff0:	b90b      	cbnz	r3, 8007ff6 <__swbuf_r+0x12>
 8007ff2:	f7fc fca3 	bl	800493c <__sinit>
 8007ff6:	69a3      	ldr	r3, [r4, #24]
 8007ff8:	60a3      	str	r3, [r4, #8]
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	071a      	lsls	r2, r3, #28
 8007ffe:	d501      	bpl.n	8008004 <__swbuf_r+0x20>
 8008000:	6923      	ldr	r3, [r4, #16]
 8008002:	b943      	cbnz	r3, 8008016 <__swbuf_r+0x32>
 8008004:	4621      	mov	r1, r4
 8008006:	4628      	mov	r0, r5
 8008008:	f000 f82a 	bl	8008060 <__swsetup_r>
 800800c:	b118      	cbz	r0, 8008016 <__swbuf_r+0x32>
 800800e:	f04f 37ff 	mov.w	r7, #4294967295
 8008012:	4638      	mov	r0, r7
 8008014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	6922      	ldr	r2, [r4, #16]
 800801a:	1a98      	subs	r0, r3, r2
 800801c:	6963      	ldr	r3, [r4, #20]
 800801e:	b2f6      	uxtb	r6, r6
 8008020:	4283      	cmp	r3, r0
 8008022:	4637      	mov	r7, r6
 8008024:	dc05      	bgt.n	8008032 <__swbuf_r+0x4e>
 8008026:	4621      	mov	r1, r4
 8008028:	4628      	mov	r0, r5
 800802a:	f7ff fa47 	bl	80074bc <_fflush_r>
 800802e:	2800      	cmp	r0, #0
 8008030:	d1ed      	bne.n	800800e <__swbuf_r+0x2a>
 8008032:	68a3      	ldr	r3, [r4, #8]
 8008034:	3b01      	subs	r3, #1
 8008036:	60a3      	str	r3, [r4, #8]
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	1c5a      	adds	r2, r3, #1
 800803c:	6022      	str	r2, [r4, #0]
 800803e:	701e      	strb	r6, [r3, #0]
 8008040:	6962      	ldr	r2, [r4, #20]
 8008042:	1c43      	adds	r3, r0, #1
 8008044:	429a      	cmp	r2, r3
 8008046:	d004      	beq.n	8008052 <__swbuf_r+0x6e>
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	07db      	lsls	r3, r3, #31
 800804c:	d5e1      	bpl.n	8008012 <__swbuf_r+0x2e>
 800804e:	2e0a      	cmp	r6, #10
 8008050:	d1df      	bne.n	8008012 <__swbuf_r+0x2e>
 8008052:	4621      	mov	r1, r4
 8008054:	4628      	mov	r0, r5
 8008056:	f7ff fa31 	bl	80074bc <_fflush_r>
 800805a:	2800      	cmp	r0, #0
 800805c:	d0d9      	beq.n	8008012 <__swbuf_r+0x2e>
 800805e:	e7d6      	b.n	800800e <__swbuf_r+0x2a>

08008060 <__swsetup_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4b29      	ldr	r3, [pc, #164]	@ (8008108 <__swsetup_r+0xa8>)
 8008064:	4605      	mov	r5, r0
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	460c      	mov	r4, r1
 800806a:	b118      	cbz	r0, 8008074 <__swsetup_r+0x14>
 800806c:	6a03      	ldr	r3, [r0, #32]
 800806e:	b90b      	cbnz	r3, 8008074 <__swsetup_r+0x14>
 8008070:	f7fc fc64 	bl	800493c <__sinit>
 8008074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008078:	0719      	lsls	r1, r3, #28
 800807a:	d422      	bmi.n	80080c2 <__swsetup_r+0x62>
 800807c:	06da      	lsls	r2, r3, #27
 800807e:	d407      	bmi.n	8008090 <__swsetup_r+0x30>
 8008080:	2209      	movs	r2, #9
 8008082:	602a      	str	r2, [r5, #0]
 8008084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008088:	81a3      	strh	r3, [r4, #12]
 800808a:	f04f 30ff 	mov.w	r0, #4294967295
 800808e:	e033      	b.n	80080f8 <__swsetup_r+0x98>
 8008090:	0758      	lsls	r0, r3, #29
 8008092:	d512      	bpl.n	80080ba <__swsetup_r+0x5a>
 8008094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008096:	b141      	cbz	r1, 80080aa <__swsetup_r+0x4a>
 8008098:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800809c:	4299      	cmp	r1, r3
 800809e:	d002      	beq.n	80080a6 <__swsetup_r+0x46>
 80080a0:	4628      	mov	r0, r5
 80080a2:	f7fd fc01 	bl	80058a8 <_free_r>
 80080a6:	2300      	movs	r3, #0
 80080a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080b0:	81a3      	strh	r3, [r4, #12]
 80080b2:	2300      	movs	r3, #0
 80080b4:	6063      	str	r3, [r4, #4]
 80080b6:	6923      	ldr	r3, [r4, #16]
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	f043 0308 	orr.w	r3, r3, #8
 80080c0:	81a3      	strh	r3, [r4, #12]
 80080c2:	6923      	ldr	r3, [r4, #16]
 80080c4:	b94b      	cbnz	r3, 80080da <__swsetup_r+0x7a>
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80080cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080d0:	d003      	beq.n	80080da <__swsetup_r+0x7a>
 80080d2:	4621      	mov	r1, r4
 80080d4:	4628      	mov	r0, r5
 80080d6:	f000 f883 	bl	80081e0 <__smakebuf_r>
 80080da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080de:	f013 0201 	ands.w	r2, r3, #1
 80080e2:	d00a      	beq.n	80080fa <__swsetup_r+0x9a>
 80080e4:	2200      	movs	r2, #0
 80080e6:	60a2      	str	r2, [r4, #8]
 80080e8:	6962      	ldr	r2, [r4, #20]
 80080ea:	4252      	negs	r2, r2
 80080ec:	61a2      	str	r2, [r4, #24]
 80080ee:	6922      	ldr	r2, [r4, #16]
 80080f0:	b942      	cbnz	r2, 8008104 <__swsetup_r+0xa4>
 80080f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80080f6:	d1c5      	bne.n	8008084 <__swsetup_r+0x24>
 80080f8:	bd38      	pop	{r3, r4, r5, pc}
 80080fa:	0799      	lsls	r1, r3, #30
 80080fc:	bf58      	it	pl
 80080fe:	6962      	ldrpl	r2, [r4, #20]
 8008100:	60a2      	str	r2, [r4, #8]
 8008102:	e7f4      	b.n	80080ee <__swsetup_r+0x8e>
 8008104:	2000      	movs	r0, #0
 8008106:	e7f7      	b.n	80080f8 <__swsetup_r+0x98>
 8008108:	20000018 	.word	0x20000018

0800810c <_raise_r>:
 800810c:	291f      	cmp	r1, #31
 800810e:	b538      	push	{r3, r4, r5, lr}
 8008110:	4605      	mov	r5, r0
 8008112:	460c      	mov	r4, r1
 8008114:	d904      	bls.n	8008120 <_raise_r+0x14>
 8008116:	2316      	movs	r3, #22
 8008118:	6003      	str	r3, [r0, #0]
 800811a:	f04f 30ff 	mov.w	r0, #4294967295
 800811e:	bd38      	pop	{r3, r4, r5, pc}
 8008120:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008122:	b112      	cbz	r2, 800812a <_raise_r+0x1e>
 8008124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008128:	b94b      	cbnz	r3, 800813e <_raise_r+0x32>
 800812a:	4628      	mov	r0, r5
 800812c:	f000 f830 	bl	8008190 <_getpid_r>
 8008130:	4622      	mov	r2, r4
 8008132:	4601      	mov	r1, r0
 8008134:	4628      	mov	r0, r5
 8008136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800813a:	f000 b817 	b.w	800816c <_kill_r>
 800813e:	2b01      	cmp	r3, #1
 8008140:	d00a      	beq.n	8008158 <_raise_r+0x4c>
 8008142:	1c59      	adds	r1, r3, #1
 8008144:	d103      	bne.n	800814e <_raise_r+0x42>
 8008146:	2316      	movs	r3, #22
 8008148:	6003      	str	r3, [r0, #0]
 800814a:	2001      	movs	r0, #1
 800814c:	e7e7      	b.n	800811e <_raise_r+0x12>
 800814e:	2100      	movs	r1, #0
 8008150:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008154:	4620      	mov	r0, r4
 8008156:	4798      	blx	r3
 8008158:	2000      	movs	r0, #0
 800815a:	e7e0      	b.n	800811e <_raise_r+0x12>

0800815c <raise>:
 800815c:	4b02      	ldr	r3, [pc, #8]	@ (8008168 <raise+0xc>)
 800815e:	4601      	mov	r1, r0
 8008160:	6818      	ldr	r0, [r3, #0]
 8008162:	f7ff bfd3 	b.w	800810c <_raise_r>
 8008166:	bf00      	nop
 8008168:	20000018 	.word	0x20000018

0800816c <_kill_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	4d07      	ldr	r5, [pc, #28]	@ (800818c <_kill_r+0x20>)
 8008170:	2300      	movs	r3, #0
 8008172:	4604      	mov	r4, r0
 8008174:	4608      	mov	r0, r1
 8008176:	4611      	mov	r1, r2
 8008178:	602b      	str	r3, [r5, #0]
 800817a:	f7f9 fc92 	bl	8001aa2 <_kill>
 800817e:	1c43      	adds	r3, r0, #1
 8008180:	d102      	bne.n	8008188 <_kill_r+0x1c>
 8008182:	682b      	ldr	r3, [r5, #0]
 8008184:	b103      	cbz	r3, 8008188 <_kill_r+0x1c>
 8008186:	6023      	str	r3, [r4, #0]
 8008188:	bd38      	pop	{r3, r4, r5, pc}
 800818a:	bf00      	nop
 800818c:	2000044c 	.word	0x2000044c

08008190 <_getpid_r>:
 8008190:	f7f9 bc7f 	b.w	8001a92 <_getpid>

08008194 <__swhatbuf_r>:
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	460c      	mov	r4, r1
 8008198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800819c:	2900      	cmp	r1, #0
 800819e:	b096      	sub	sp, #88	@ 0x58
 80081a0:	4615      	mov	r5, r2
 80081a2:	461e      	mov	r6, r3
 80081a4:	da0d      	bge.n	80081c2 <__swhatbuf_r+0x2e>
 80081a6:	89a3      	ldrh	r3, [r4, #12]
 80081a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80081ac:	f04f 0100 	mov.w	r1, #0
 80081b0:	bf14      	ite	ne
 80081b2:	2340      	movne	r3, #64	@ 0x40
 80081b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80081b8:	2000      	movs	r0, #0
 80081ba:	6031      	str	r1, [r6, #0]
 80081bc:	602b      	str	r3, [r5, #0]
 80081be:	b016      	add	sp, #88	@ 0x58
 80081c0:	bd70      	pop	{r4, r5, r6, pc}
 80081c2:	466a      	mov	r2, sp
 80081c4:	f000 f848 	bl	8008258 <_fstat_r>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	dbec      	blt.n	80081a6 <__swhatbuf_r+0x12>
 80081cc:	9901      	ldr	r1, [sp, #4]
 80081ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80081d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80081d6:	4259      	negs	r1, r3
 80081d8:	4159      	adcs	r1, r3
 80081da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081de:	e7eb      	b.n	80081b8 <__swhatbuf_r+0x24>

080081e0 <__smakebuf_r>:
 80081e0:	898b      	ldrh	r3, [r1, #12]
 80081e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081e4:	079d      	lsls	r5, r3, #30
 80081e6:	4606      	mov	r6, r0
 80081e8:	460c      	mov	r4, r1
 80081ea:	d507      	bpl.n	80081fc <__smakebuf_r+0x1c>
 80081ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	6123      	str	r3, [r4, #16]
 80081f4:	2301      	movs	r3, #1
 80081f6:	6163      	str	r3, [r4, #20]
 80081f8:	b003      	add	sp, #12
 80081fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081fc:	ab01      	add	r3, sp, #4
 80081fe:	466a      	mov	r2, sp
 8008200:	f7ff ffc8 	bl	8008194 <__swhatbuf_r>
 8008204:	9f00      	ldr	r7, [sp, #0]
 8008206:	4605      	mov	r5, r0
 8008208:	4639      	mov	r1, r7
 800820a:	4630      	mov	r0, r6
 800820c:	f7fd fbc0 	bl	8005990 <_malloc_r>
 8008210:	b948      	cbnz	r0, 8008226 <__smakebuf_r+0x46>
 8008212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008216:	059a      	lsls	r2, r3, #22
 8008218:	d4ee      	bmi.n	80081f8 <__smakebuf_r+0x18>
 800821a:	f023 0303 	bic.w	r3, r3, #3
 800821e:	f043 0302 	orr.w	r3, r3, #2
 8008222:	81a3      	strh	r3, [r4, #12]
 8008224:	e7e2      	b.n	80081ec <__smakebuf_r+0xc>
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	6020      	str	r0, [r4, #0]
 800822a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800822e:	81a3      	strh	r3, [r4, #12]
 8008230:	9b01      	ldr	r3, [sp, #4]
 8008232:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008236:	b15b      	cbz	r3, 8008250 <__smakebuf_r+0x70>
 8008238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800823c:	4630      	mov	r0, r6
 800823e:	f000 f81d 	bl	800827c <_isatty_r>
 8008242:	b128      	cbz	r0, 8008250 <__smakebuf_r+0x70>
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	f023 0303 	bic.w	r3, r3, #3
 800824a:	f043 0301 	orr.w	r3, r3, #1
 800824e:	81a3      	strh	r3, [r4, #12]
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	431d      	orrs	r5, r3
 8008254:	81a5      	strh	r5, [r4, #12]
 8008256:	e7cf      	b.n	80081f8 <__smakebuf_r+0x18>

08008258 <_fstat_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	4d07      	ldr	r5, [pc, #28]	@ (8008278 <_fstat_r+0x20>)
 800825c:	2300      	movs	r3, #0
 800825e:	4604      	mov	r4, r0
 8008260:	4608      	mov	r0, r1
 8008262:	4611      	mov	r1, r2
 8008264:	602b      	str	r3, [r5, #0]
 8008266:	f7f9 fc7c 	bl	8001b62 <_fstat>
 800826a:	1c43      	adds	r3, r0, #1
 800826c:	d102      	bne.n	8008274 <_fstat_r+0x1c>
 800826e:	682b      	ldr	r3, [r5, #0]
 8008270:	b103      	cbz	r3, 8008274 <_fstat_r+0x1c>
 8008272:	6023      	str	r3, [r4, #0]
 8008274:	bd38      	pop	{r3, r4, r5, pc}
 8008276:	bf00      	nop
 8008278:	2000044c 	.word	0x2000044c

0800827c <_isatty_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4d06      	ldr	r5, [pc, #24]	@ (8008298 <_isatty_r+0x1c>)
 8008280:	2300      	movs	r3, #0
 8008282:	4604      	mov	r4, r0
 8008284:	4608      	mov	r0, r1
 8008286:	602b      	str	r3, [r5, #0]
 8008288:	f7f9 fc7b 	bl	8001b82 <_isatty>
 800828c:	1c43      	adds	r3, r0, #1
 800828e:	d102      	bne.n	8008296 <_isatty_r+0x1a>
 8008290:	682b      	ldr	r3, [r5, #0]
 8008292:	b103      	cbz	r3, 8008296 <_isatty_r+0x1a>
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	bd38      	pop	{r3, r4, r5, pc}
 8008298:	2000044c 	.word	0x2000044c

0800829c <pow>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	ed2d 8b02 	vpush	{d8}
 80082a2:	eeb0 8a40 	vmov.f32	s16, s0
 80082a6:	eef0 8a60 	vmov.f32	s17, s1
 80082aa:	ec55 4b11 	vmov	r4, r5, d1
 80082ae:	f000 f873 	bl	8008398 <__ieee754_pow>
 80082b2:	4622      	mov	r2, r4
 80082b4:	462b      	mov	r3, r5
 80082b6:	4620      	mov	r0, r4
 80082b8:	4629      	mov	r1, r5
 80082ba:	ec57 6b10 	vmov	r6, r7, d0
 80082be:	f7f8 fc35 	bl	8000b2c <__aeabi_dcmpun>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d13b      	bne.n	800833e <pow+0xa2>
 80082c6:	ec51 0b18 	vmov	r0, r1, d8
 80082ca:	2200      	movs	r2, #0
 80082cc:	2300      	movs	r3, #0
 80082ce:	f7f8 fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 80082d2:	b1b8      	cbz	r0, 8008304 <pow+0x68>
 80082d4:	2200      	movs	r2, #0
 80082d6:	2300      	movs	r3, #0
 80082d8:	4620      	mov	r0, r4
 80082da:	4629      	mov	r1, r5
 80082dc:	f7f8 fbf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d146      	bne.n	8008372 <pow+0xd6>
 80082e4:	ec45 4b10 	vmov	d0, r4, r5
 80082e8:	f000 f848 	bl	800837c <finite>
 80082ec:	b338      	cbz	r0, 800833e <pow+0xa2>
 80082ee:	2200      	movs	r2, #0
 80082f0:	2300      	movs	r3, #0
 80082f2:	4620      	mov	r0, r4
 80082f4:	4629      	mov	r1, r5
 80082f6:	f7f8 fbf1 	bl	8000adc <__aeabi_dcmplt>
 80082fa:	b300      	cbz	r0, 800833e <pow+0xa2>
 80082fc:	f7fc fc48 	bl	8004b90 <__errno>
 8008300:	2322      	movs	r3, #34	@ 0x22
 8008302:	e01b      	b.n	800833c <pow+0xa0>
 8008304:	ec47 6b10 	vmov	d0, r6, r7
 8008308:	f000 f838 	bl	800837c <finite>
 800830c:	b9e0      	cbnz	r0, 8008348 <pow+0xac>
 800830e:	eeb0 0a48 	vmov.f32	s0, s16
 8008312:	eef0 0a68 	vmov.f32	s1, s17
 8008316:	f000 f831 	bl	800837c <finite>
 800831a:	b1a8      	cbz	r0, 8008348 <pow+0xac>
 800831c:	ec45 4b10 	vmov	d0, r4, r5
 8008320:	f000 f82c 	bl	800837c <finite>
 8008324:	b180      	cbz	r0, 8008348 <pow+0xac>
 8008326:	4632      	mov	r2, r6
 8008328:	463b      	mov	r3, r7
 800832a:	4630      	mov	r0, r6
 800832c:	4639      	mov	r1, r7
 800832e:	f7f8 fbfd 	bl	8000b2c <__aeabi_dcmpun>
 8008332:	2800      	cmp	r0, #0
 8008334:	d0e2      	beq.n	80082fc <pow+0x60>
 8008336:	f7fc fc2b 	bl	8004b90 <__errno>
 800833a:	2321      	movs	r3, #33	@ 0x21
 800833c:	6003      	str	r3, [r0, #0]
 800833e:	ecbd 8b02 	vpop	{d8}
 8008342:	ec47 6b10 	vmov	d0, r6, r7
 8008346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008348:	2200      	movs	r2, #0
 800834a:	2300      	movs	r3, #0
 800834c:	4630      	mov	r0, r6
 800834e:	4639      	mov	r1, r7
 8008350:	f7f8 fbba 	bl	8000ac8 <__aeabi_dcmpeq>
 8008354:	2800      	cmp	r0, #0
 8008356:	d0f2      	beq.n	800833e <pow+0xa2>
 8008358:	eeb0 0a48 	vmov.f32	s0, s16
 800835c:	eef0 0a68 	vmov.f32	s1, s17
 8008360:	f000 f80c 	bl	800837c <finite>
 8008364:	2800      	cmp	r0, #0
 8008366:	d0ea      	beq.n	800833e <pow+0xa2>
 8008368:	ec45 4b10 	vmov	d0, r4, r5
 800836c:	f000 f806 	bl	800837c <finite>
 8008370:	e7c3      	b.n	80082fa <pow+0x5e>
 8008372:	4f01      	ldr	r7, [pc, #4]	@ (8008378 <pow+0xdc>)
 8008374:	2600      	movs	r6, #0
 8008376:	e7e2      	b.n	800833e <pow+0xa2>
 8008378:	3ff00000 	.word	0x3ff00000

0800837c <finite>:
 800837c:	b082      	sub	sp, #8
 800837e:	ed8d 0b00 	vstr	d0, [sp]
 8008382:	9801      	ldr	r0, [sp, #4]
 8008384:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008388:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800838c:	0fc0      	lsrs	r0, r0, #31
 800838e:	b002      	add	sp, #8
 8008390:	4770      	bx	lr
 8008392:	0000      	movs	r0, r0
 8008394:	0000      	movs	r0, r0
	...

08008398 <__ieee754_pow>:
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	b091      	sub	sp, #68	@ 0x44
 800839e:	ed8d 1b00 	vstr	d1, [sp]
 80083a2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80083a6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80083aa:	ea5a 0001 	orrs.w	r0, sl, r1
 80083ae:	ec57 6b10 	vmov	r6, r7, d0
 80083b2:	d113      	bne.n	80083dc <__ieee754_pow+0x44>
 80083b4:	19b3      	adds	r3, r6, r6
 80083b6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80083ba:	4152      	adcs	r2, r2
 80083bc:	4298      	cmp	r0, r3
 80083be:	4b9a      	ldr	r3, [pc, #616]	@ (8008628 <__ieee754_pow+0x290>)
 80083c0:	4193      	sbcs	r3, r2
 80083c2:	f080 84ee 	bcs.w	8008da2 <__ieee754_pow+0xa0a>
 80083c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083ca:	4630      	mov	r0, r6
 80083cc:	4639      	mov	r1, r7
 80083ce:	f7f7 ff5d 	bl	800028c <__adddf3>
 80083d2:	ec41 0b10 	vmov	d0, r0, r1
 80083d6:	b011      	add	sp, #68	@ 0x44
 80083d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083dc:	4a93      	ldr	r2, [pc, #588]	@ (800862c <__ieee754_pow+0x294>)
 80083de:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80083e2:	4295      	cmp	r5, r2
 80083e4:	46b8      	mov	r8, r7
 80083e6:	4633      	mov	r3, r6
 80083e8:	d80a      	bhi.n	8008400 <__ieee754_pow+0x68>
 80083ea:	d104      	bne.n	80083f6 <__ieee754_pow+0x5e>
 80083ec:	2e00      	cmp	r6, #0
 80083ee:	d1ea      	bne.n	80083c6 <__ieee754_pow+0x2e>
 80083f0:	45aa      	cmp	sl, r5
 80083f2:	d8e8      	bhi.n	80083c6 <__ieee754_pow+0x2e>
 80083f4:	e001      	b.n	80083fa <__ieee754_pow+0x62>
 80083f6:	4592      	cmp	sl, r2
 80083f8:	d802      	bhi.n	8008400 <__ieee754_pow+0x68>
 80083fa:	4592      	cmp	sl, r2
 80083fc:	d10f      	bne.n	800841e <__ieee754_pow+0x86>
 80083fe:	b171      	cbz	r1, 800841e <__ieee754_pow+0x86>
 8008400:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8008404:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008408:	ea58 0803 	orrs.w	r8, r8, r3
 800840c:	d1db      	bne.n	80083c6 <__ieee754_pow+0x2e>
 800840e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008412:	18db      	adds	r3, r3, r3
 8008414:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008418:	4152      	adcs	r2, r2
 800841a:	4598      	cmp	r8, r3
 800841c:	e7cf      	b.n	80083be <__ieee754_pow+0x26>
 800841e:	f1b8 0f00 	cmp.w	r8, #0
 8008422:	46ab      	mov	fp, r5
 8008424:	da43      	bge.n	80084ae <__ieee754_pow+0x116>
 8008426:	4a82      	ldr	r2, [pc, #520]	@ (8008630 <__ieee754_pow+0x298>)
 8008428:	4592      	cmp	sl, r2
 800842a:	d856      	bhi.n	80084da <__ieee754_pow+0x142>
 800842c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008430:	4592      	cmp	sl, r2
 8008432:	f240 84c5 	bls.w	8008dc0 <__ieee754_pow+0xa28>
 8008436:	ea4f 522a 	mov.w	r2, sl, asr #20
 800843a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800843e:	2a14      	cmp	r2, #20
 8008440:	dd18      	ble.n	8008474 <__ieee754_pow+0xdc>
 8008442:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008446:	fa21 f402 	lsr.w	r4, r1, r2
 800844a:	fa04 f202 	lsl.w	r2, r4, r2
 800844e:	428a      	cmp	r2, r1
 8008450:	f040 84b6 	bne.w	8008dc0 <__ieee754_pow+0xa28>
 8008454:	f004 0401 	and.w	r4, r4, #1
 8008458:	f1c4 0402 	rsb	r4, r4, #2
 800845c:	2900      	cmp	r1, #0
 800845e:	d159      	bne.n	8008514 <__ieee754_pow+0x17c>
 8008460:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008464:	d148      	bne.n	80084f8 <__ieee754_pow+0x160>
 8008466:	4632      	mov	r2, r6
 8008468:	463b      	mov	r3, r7
 800846a:	4630      	mov	r0, r6
 800846c:	4639      	mov	r1, r7
 800846e:	f7f8 f8c3 	bl	80005f8 <__aeabi_dmul>
 8008472:	e7ae      	b.n	80083d2 <__ieee754_pow+0x3a>
 8008474:	2900      	cmp	r1, #0
 8008476:	d14c      	bne.n	8008512 <__ieee754_pow+0x17a>
 8008478:	f1c2 0214 	rsb	r2, r2, #20
 800847c:	fa4a f402 	asr.w	r4, sl, r2
 8008480:	fa04 f202 	lsl.w	r2, r4, r2
 8008484:	4552      	cmp	r2, sl
 8008486:	f040 8498 	bne.w	8008dba <__ieee754_pow+0xa22>
 800848a:	f004 0401 	and.w	r4, r4, #1
 800848e:	f1c4 0402 	rsb	r4, r4, #2
 8008492:	4a68      	ldr	r2, [pc, #416]	@ (8008634 <__ieee754_pow+0x29c>)
 8008494:	4592      	cmp	sl, r2
 8008496:	d1e3      	bne.n	8008460 <__ieee754_pow+0xc8>
 8008498:	f1b9 0f00 	cmp.w	r9, #0
 800849c:	f280 8489 	bge.w	8008db2 <__ieee754_pow+0xa1a>
 80084a0:	4964      	ldr	r1, [pc, #400]	@ (8008634 <__ieee754_pow+0x29c>)
 80084a2:	4632      	mov	r2, r6
 80084a4:	463b      	mov	r3, r7
 80084a6:	2000      	movs	r0, #0
 80084a8:	f7f8 f9d0 	bl	800084c <__aeabi_ddiv>
 80084ac:	e791      	b.n	80083d2 <__ieee754_pow+0x3a>
 80084ae:	2400      	movs	r4, #0
 80084b0:	bb81      	cbnz	r1, 8008514 <__ieee754_pow+0x17c>
 80084b2:	4a5e      	ldr	r2, [pc, #376]	@ (800862c <__ieee754_pow+0x294>)
 80084b4:	4592      	cmp	sl, r2
 80084b6:	d1ec      	bne.n	8008492 <__ieee754_pow+0xfa>
 80084b8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80084bc:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80084c0:	431a      	orrs	r2, r3
 80084c2:	f000 846e 	beq.w	8008da2 <__ieee754_pow+0xa0a>
 80084c6:	4b5c      	ldr	r3, [pc, #368]	@ (8008638 <__ieee754_pow+0x2a0>)
 80084c8:	429d      	cmp	r5, r3
 80084ca:	d908      	bls.n	80084de <__ieee754_pow+0x146>
 80084cc:	f1b9 0f00 	cmp.w	r9, #0
 80084d0:	f280 846b 	bge.w	8008daa <__ieee754_pow+0xa12>
 80084d4:	2000      	movs	r0, #0
 80084d6:	2100      	movs	r1, #0
 80084d8:	e77b      	b.n	80083d2 <__ieee754_pow+0x3a>
 80084da:	2402      	movs	r4, #2
 80084dc:	e7e8      	b.n	80084b0 <__ieee754_pow+0x118>
 80084de:	f1b9 0f00 	cmp.w	r9, #0
 80084e2:	f04f 0000 	mov.w	r0, #0
 80084e6:	f04f 0100 	mov.w	r1, #0
 80084ea:	f6bf af72 	bge.w	80083d2 <__ieee754_pow+0x3a>
 80084ee:	e9dd 0300 	ldrd	r0, r3, [sp]
 80084f2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80084f6:	e76c      	b.n	80083d2 <__ieee754_pow+0x3a>
 80084f8:	4a50      	ldr	r2, [pc, #320]	@ (800863c <__ieee754_pow+0x2a4>)
 80084fa:	4591      	cmp	r9, r2
 80084fc:	d10a      	bne.n	8008514 <__ieee754_pow+0x17c>
 80084fe:	f1b8 0f00 	cmp.w	r8, #0
 8008502:	db07      	blt.n	8008514 <__ieee754_pow+0x17c>
 8008504:	ec47 6b10 	vmov	d0, r6, r7
 8008508:	b011      	add	sp, #68	@ 0x44
 800850a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850e:	f000 bd4f 	b.w	8008fb0 <__ieee754_sqrt>
 8008512:	2400      	movs	r4, #0
 8008514:	ec47 6b10 	vmov	d0, r6, r7
 8008518:	9302      	str	r3, [sp, #8]
 800851a:	f000 fc87 	bl	8008e2c <fabs>
 800851e:	9b02      	ldr	r3, [sp, #8]
 8008520:	ec51 0b10 	vmov	r0, r1, d0
 8008524:	bb43      	cbnz	r3, 8008578 <__ieee754_pow+0x1e0>
 8008526:	4b43      	ldr	r3, [pc, #268]	@ (8008634 <__ieee754_pow+0x29c>)
 8008528:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800852c:	429a      	cmp	r2, r3
 800852e:	d000      	beq.n	8008532 <__ieee754_pow+0x19a>
 8008530:	bb15      	cbnz	r5, 8008578 <__ieee754_pow+0x1e0>
 8008532:	f1b9 0f00 	cmp.w	r9, #0
 8008536:	da05      	bge.n	8008544 <__ieee754_pow+0x1ac>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	2000      	movs	r0, #0
 800853e:	493d      	ldr	r1, [pc, #244]	@ (8008634 <__ieee754_pow+0x29c>)
 8008540:	f7f8 f984 	bl	800084c <__aeabi_ddiv>
 8008544:	f1b8 0f00 	cmp.w	r8, #0
 8008548:	f6bf af43 	bge.w	80083d2 <__ieee754_pow+0x3a>
 800854c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008550:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008554:	4325      	orrs	r5, r4
 8008556:	d108      	bne.n	800856a <__ieee754_pow+0x1d2>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4610      	mov	r0, r2
 800855e:	4619      	mov	r1, r3
 8008560:	f7f7 fe92 	bl	8000288 <__aeabi_dsub>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	e79e      	b.n	80084a8 <__ieee754_pow+0x110>
 800856a:	2c01      	cmp	r4, #1
 800856c:	f47f af31 	bne.w	80083d2 <__ieee754_pow+0x3a>
 8008570:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008574:	4619      	mov	r1, r3
 8008576:	e72c      	b.n	80083d2 <__ieee754_pow+0x3a>
 8008578:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800857c:	3b01      	subs	r3, #1
 800857e:	ea53 0204 	orrs.w	r2, r3, r4
 8008582:	d102      	bne.n	800858a <__ieee754_pow+0x1f2>
 8008584:	4632      	mov	r2, r6
 8008586:	463b      	mov	r3, r7
 8008588:	e7e8      	b.n	800855c <__ieee754_pow+0x1c4>
 800858a:	3c01      	subs	r4, #1
 800858c:	431c      	orrs	r4, r3
 800858e:	d016      	beq.n	80085be <__ieee754_pow+0x226>
 8008590:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008618 <__ieee754_pow+0x280>
 8008594:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008598:	ed8d 7b02 	vstr	d7, [sp, #8]
 800859c:	f240 8110 	bls.w	80087c0 <__ieee754_pow+0x428>
 80085a0:	4b27      	ldr	r3, [pc, #156]	@ (8008640 <__ieee754_pow+0x2a8>)
 80085a2:	459a      	cmp	sl, r3
 80085a4:	4b24      	ldr	r3, [pc, #144]	@ (8008638 <__ieee754_pow+0x2a0>)
 80085a6:	d916      	bls.n	80085d6 <__ieee754_pow+0x23e>
 80085a8:	429d      	cmp	r5, r3
 80085aa:	d80b      	bhi.n	80085c4 <__ieee754_pow+0x22c>
 80085ac:	f1b9 0f00 	cmp.w	r9, #0
 80085b0:	da0b      	bge.n	80085ca <__ieee754_pow+0x232>
 80085b2:	2000      	movs	r0, #0
 80085b4:	b011      	add	sp, #68	@ 0x44
 80085b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ba:	f000 bcf1 	b.w	8008fa0 <__math_oflow>
 80085be:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8008620 <__ieee754_pow+0x288>
 80085c2:	e7e7      	b.n	8008594 <__ieee754_pow+0x1fc>
 80085c4:	f1b9 0f00 	cmp.w	r9, #0
 80085c8:	dcf3      	bgt.n	80085b2 <__ieee754_pow+0x21a>
 80085ca:	2000      	movs	r0, #0
 80085cc:	b011      	add	sp, #68	@ 0x44
 80085ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d2:	f000 bcdd 	b.w	8008f90 <__math_uflow>
 80085d6:	429d      	cmp	r5, r3
 80085d8:	d20c      	bcs.n	80085f4 <__ieee754_pow+0x25c>
 80085da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085de:	2200      	movs	r2, #0
 80085e0:	2300      	movs	r3, #0
 80085e2:	f7f8 fa7b 	bl	8000adc <__aeabi_dcmplt>
 80085e6:	3800      	subs	r0, #0
 80085e8:	bf18      	it	ne
 80085ea:	2001      	movne	r0, #1
 80085ec:	f1b9 0f00 	cmp.w	r9, #0
 80085f0:	daec      	bge.n	80085cc <__ieee754_pow+0x234>
 80085f2:	e7df      	b.n	80085b4 <__ieee754_pow+0x21c>
 80085f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008634 <__ieee754_pow+0x29c>)
 80085f6:	429d      	cmp	r5, r3
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	d922      	bls.n	8008644 <__ieee754_pow+0x2ac>
 80085fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008602:	2300      	movs	r3, #0
 8008604:	f7f8 fa6a 	bl	8000adc <__aeabi_dcmplt>
 8008608:	3800      	subs	r0, #0
 800860a:	bf18      	it	ne
 800860c:	2001      	movne	r0, #1
 800860e:	f1b9 0f00 	cmp.w	r9, #0
 8008612:	dccf      	bgt.n	80085b4 <__ieee754_pow+0x21c>
 8008614:	e7da      	b.n	80085cc <__ieee754_pow+0x234>
 8008616:	bf00      	nop
 8008618:	00000000 	.word	0x00000000
 800861c:	3ff00000 	.word	0x3ff00000
 8008620:	00000000 	.word	0x00000000
 8008624:	bff00000 	.word	0xbff00000
 8008628:	fff00000 	.word	0xfff00000
 800862c:	7ff00000 	.word	0x7ff00000
 8008630:	433fffff 	.word	0x433fffff
 8008634:	3ff00000 	.word	0x3ff00000
 8008638:	3fefffff 	.word	0x3fefffff
 800863c:	3fe00000 	.word	0x3fe00000
 8008640:	43f00000 	.word	0x43f00000
 8008644:	4b5a      	ldr	r3, [pc, #360]	@ (80087b0 <__ieee754_pow+0x418>)
 8008646:	f7f7 fe1f 	bl	8000288 <__aeabi_dsub>
 800864a:	a351      	add	r3, pc, #324	@ (adr r3, 8008790 <__ieee754_pow+0x3f8>)
 800864c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008650:	4604      	mov	r4, r0
 8008652:	460d      	mov	r5, r1
 8008654:	f7f7 ffd0 	bl	80005f8 <__aeabi_dmul>
 8008658:	a34f      	add	r3, pc, #316	@ (adr r3, 8008798 <__ieee754_pow+0x400>)
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	4606      	mov	r6, r0
 8008660:	460f      	mov	r7, r1
 8008662:	4620      	mov	r0, r4
 8008664:	4629      	mov	r1, r5
 8008666:	f7f7 ffc7 	bl	80005f8 <__aeabi_dmul>
 800866a:	4b52      	ldr	r3, [pc, #328]	@ (80087b4 <__ieee754_pow+0x41c>)
 800866c:	4682      	mov	sl, r0
 800866e:	468b      	mov	fp, r1
 8008670:	2200      	movs	r2, #0
 8008672:	4620      	mov	r0, r4
 8008674:	4629      	mov	r1, r5
 8008676:	f7f7 ffbf 	bl	80005f8 <__aeabi_dmul>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	a148      	add	r1, pc, #288	@ (adr r1, 80087a0 <__ieee754_pow+0x408>)
 8008680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008684:	f7f7 fe00 	bl	8000288 <__aeabi_dsub>
 8008688:	4622      	mov	r2, r4
 800868a:	462b      	mov	r3, r5
 800868c:	f7f7 ffb4 	bl	80005f8 <__aeabi_dmul>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	2000      	movs	r0, #0
 8008696:	4948      	ldr	r1, [pc, #288]	@ (80087b8 <__ieee754_pow+0x420>)
 8008698:	f7f7 fdf6 	bl	8000288 <__aeabi_dsub>
 800869c:	4622      	mov	r2, r4
 800869e:	4680      	mov	r8, r0
 80086a0:	4689      	mov	r9, r1
 80086a2:	462b      	mov	r3, r5
 80086a4:	4620      	mov	r0, r4
 80086a6:	4629      	mov	r1, r5
 80086a8:	f7f7 ffa6 	bl	80005f8 <__aeabi_dmul>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	4640      	mov	r0, r8
 80086b2:	4649      	mov	r1, r9
 80086b4:	f7f7 ffa0 	bl	80005f8 <__aeabi_dmul>
 80086b8:	a33b      	add	r3, pc, #236	@ (adr r3, 80087a8 <__ieee754_pow+0x410>)
 80086ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086be:	f7f7 ff9b 	bl	80005f8 <__aeabi_dmul>
 80086c2:	4602      	mov	r2, r0
 80086c4:	460b      	mov	r3, r1
 80086c6:	4650      	mov	r0, sl
 80086c8:	4659      	mov	r1, fp
 80086ca:	f7f7 fddd 	bl	8000288 <__aeabi_dsub>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	4680      	mov	r8, r0
 80086d4:	4689      	mov	r9, r1
 80086d6:	4630      	mov	r0, r6
 80086d8:	4639      	mov	r1, r7
 80086da:	f7f7 fdd7 	bl	800028c <__adddf3>
 80086de:	2400      	movs	r4, #0
 80086e0:	4632      	mov	r2, r6
 80086e2:	463b      	mov	r3, r7
 80086e4:	4620      	mov	r0, r4
 80086e6:	460d      	mov	r5, r1
 80086e8:	f7f7 fdce 	bl	8000288 <__aeabi_dsub>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4640      	mov	r0, r8
 80086f2:	4649      	mov	r1, r9
 80086f4:	f7f7 fdc8 	bl	8000288 <__aeabi_dsub>
 80086f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008700:	2300      	movs	r3, #0
 8008702:	9304      	str	r3, [sp, #16]
 8008704:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008708:	4606      	mov	r6, r0
 800870a:	460f      	mov	r7, r1
 800870c:	465b      	mov	r3, fp
 800870e:	4652      	mov	r2, sl
 8008710:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008714:	f7f7 fdb8 	bl	8000288 <__aeabi_dsub>
 8008718:	4622      	mov	r2, r4
 800871a:	462b      	mov	r3, r5
 800871c:	f7f7 ff6c 	bl	80005f8 <__aeabi_dmul>
 8008720:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008724:	4680      	mov	r8, r0
 8008726:	4689      	mov	r9, r1
 8008728:	4630      	mov	r0, r6
 800872a:	4639      	mov	r1, r7
 800872c:	f7f7 ff64 	bl	80005f8 <__aeabi_dmul>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	4640      	mov	r0, r8
 8008736:	4649      	mov	r1, r9
 8008738:	f7f7 fda8 	bl	800028c <__adddf3>
 800873c:	465b      	mov	r3, fp
 800873e:	4606      	mov	r6, r0
 8008740:	460f      	mov	r7, r1
 8008742:	4652      	mov	r2, sl
 8008744:	4620      	mov	r0, r4
 8008746:	4629      	mov	r1, r5
 8008748:	f7f7 ff56 	bl	80005f8 <__aeabi_dmul>
 800874c:	460b      	mov	r3, r1
 800874e:	4602      	mov	r2, r0
 8008750:	4680      	mov	r8, r0
 8008752:	4689      	mov	r9, r1
 8008754:	4630      	mov	r0, r6
 8008756:	4639      	mov	r1, r7
 8008758:	f7f7 fd98 	bl	800028c <__adddf3>
 800875c:	4b17      	ldr	r3, [pc, #92]	@ (80087bc <__ieee754_pow+0x424>)
 800875e:	4299      	cmp	r1, r3
 8008760:	4604      	mov	r4, r0
 8008762:	460d      	mov	r5, r1
 8008764:	468b      	mov	fp, r1
 8008766:	f340 820b 	ble.w	8008b80 <__ieee754_pow+0x7e8>
 800876a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800876e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008772:	4303      	orrs	r3, r0
 8008774:	f000 81ea 	beq.w	8008b4c <__ieee754_pow+0x7b4>
 8008778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800877c:	2200      	movs	r2, #0
 800877e:	2300      	movs	r3, #0
 8008780:	f7f8 f9ac 	bl	8000adc <__aeabi_dcmplt>
 8008784:	3800      	subs	r0, #0
 8008786:	bf18      	it	ne
 8008788:	2001      	movne	r0, #1
 800878a:	e713      	b.n	80085b4 <__ieee754_pow+0x21c>
 800878c:	f3af 8000 	nop.w
 8008790:	60000000 	.word	0x60000000
 8008794:	3ff71547 	.word	0x3ff71547
 8008798:	f85ddf44 	.word	0xf85ddf44
 800879c:	3e54ae0b 	.word	0x3e54ae0b
 80087a0:	55555555 	.word	0x55555555
 80087a4:	3fd55555 	.word	0x3fd55555
 80087a8:	652b82fe 	.word	0x652b82fe
 80087ac:	3ff71547 	.word	0x3ff71547
 80087b0:	3ff00000 	.word	0x3ff00000
 80087b4:	3fd00000 	.word	0x3fd00000
 80087b8:	3fe00000 	.word	0x3fe00000
 80087bc:	408fffff 	.word	0x408fffff
 80087c0:	4bd5      	ldr	r3, [pc, #852]	@ (8008b18 <__ieee754_pow+0x780>)
 80087c2:	ea08 0303 	and.w	r3, r8, r3
 80087c6:	2200      	movs	r2, #0
 80087c8:	b92b      	cbnz	r3, 80087d6 <__ieee754_pow+0x43e>
 80087ca:	4bd4      	ldr	r3, [pc, #848]	@ (8008b1c <__ieee754_pow+0x784>)
 80087cc:	f7f7 ff14 	bl	80005f8 <__aeabi_dmul>
 80087d0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80087d4:	468b      	mov	fp, r1
 80087d6:	ea4f 532b 	mov.w	r3, fp, asr #20
 80087da:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80087de:	4413      	add	r3, r2
 80087e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80087e2:	4bcf      	ldr	r3, [pc, #828]	@ (8008b20 <__ieee754_pow+0x788>)
 80087e4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80087e8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80087ec:	459b      	cmp	fp, r3
 80087ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80087f2:	dd08      	ble.n	8008806 <__ieee754_pow+0x46e>
 80087f4:	4bcb      	ldr	r3, [pc, #812]	@ (8008b24 <__ieee754_pow+0x78c>)
 80087f6:	459b      	cmp	fp, r3
 80087f8:	f340 81a5 	ble.w	8008b46 <__ieee754_pow+0x7ae>
 80087fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087fe:	3301      	adds	r3, #1
 8008800:	930a      	str	r3, [sp, #40]	@ 0x28
 8008802:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008806:	f04f 0a00 	mov.w	sl, #0
 800880a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800880e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008810:	4bc5      	ldr	r3, [pc, #788]	@ (8008b28 <__ieee754_pow+0x790>)
 8008812:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008816:	ed93 7b00 	vldr	d7, [r3]
 800881a:	4629      	mov	r1, r5
 800881c:	ec53 2b17 	vmov	r2, r3, d7
 8008820:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008824:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008828:	f7f7 fd2e 	bl	8000288 <__aeabi_dsub>
 800882c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008830:	4606      	mov	r6, r0
 8008832:	460f      	mov	r7, r1
 8008834:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008838:	f7f7 fd28 	bl	800028c <__adddf3>
 800883c:	4602      	mov	r2, r0
 800883e:	460b      	mov	r3, r1
 8008840:	2000      	movs	r0, #0
 8008842:	49ba      	ldr	r1, [pc, #744]	@ (8008b2c <__ieee754_pow+0x794>)
 8008844:	f7f8 f802 	bl	800084c <__aeabi_ddiv>
 8008848:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	4630      	mov	r0, r6
 8008852:	4639      	mov	r1, r7
 8008854:	f7f7 fed0 	bl	80005f8 <__aeabi_dmul>
 8008858:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800885c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008860:	106d      	asrs	r5, r5, #1
 8008862:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008866:	f04f 0b00 	mov.w	fp, #0
 800886a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800886e:	4661      	mov	r1, ip
 8008870:	2200      	movs	r2, #0
 8008872:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008876:	4658      	mov	r0, fp
 8008878:	46e1      	mov	r9, ip
 800887a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800887e:	4614      	mov	r4, r2
 8008880:	461d      	mov	r5, r3
 8008882:	f7f7 feb9 	bl	80005f8 <__aeabi_dmul>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	4630      	mov	r0, r6
 800888c:	4639      	mov	r1, r7
 800888e:	f7f7 fcfb 	bl	8000288 <__aeabi_dsub>
 8008892:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008896:	4606      	mov	r6, r0
 8008898:	460f      	mov	r7, r1
 800889a:	4620      	mov	r0, r4
 800889c:	4629      	mov	r1, r5
 800889e:	f7f7 fcf3 	bl	8000288 <__aeabi_dsub>
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80088aa:	f7f7 fced 	bl	8000288 <__aeabi_dsub>
 80088ae:	465a      	mov	r2, fp
 80088b0:	464b      	mov	r3, r9
 80088b2:	f7f7 fea1 	bl	80005f8 <__aeabi_dmul>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4630      	mov	r0, r6
 80088bc:	4639      	mov	r1, r7
 80088be:	f7f7 fce3 	bl	8000288 <__aeabi_dsub>
 80088c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80088c6:	f7f7 fe97 	bl	80005f8 <__aeabi_dmul>
 80088ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80088d2:	4610      	mov	r0, r2
 80088d4:	4619      	mov	r1, r3
 80088d6:	f7f7 fe8f 	bl	80005f8 <__aeabi_dmul>
 80088da:	a37d      	add	r3, pc, #500	@ (adr r3, 8008ad0 <__ieee754_pow+0x738>)
 80088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e0:	4604      	mov	r4, r0
 80088e2:	460d      	mov	r5, r1
 80088e4:	f7f7 fe88 	bl	80005f8 <__aeabi_dmul>
 80088e8:	a37b      	add	r3, pc, #492	@ (adr r3, 8008ad8 <__ieee754_pow+0x740>)
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	f7f7 fccd 	bl	800028c <__adddf3>
 80088f2:	4622      	mov	r2, r4
 80088f4:	462b      	mov	r3, r5
 80088f6:	f7f7 fe7f 	bl	80005f8 <__aeabi_dmul>
 80088fa:	a379      	add	r3, pc, #484	@ (adr r3, 8008ae0 <__ieee754_pow+0x748>)
 80088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008900:	f7f7 fcc4 	bl	800028c <__adddf3>
 8008904:	4622      	mov	r2, r4
 8008906:	462b      	mov	r3, r5
 8008908:	f7f7 fe76 	bl	80005f8 <__aeabi_dmul>
 800890c:	a376      	add	r3, pc, #472	@ (adr r3, 8008ae8 <__ieee754_pow+0x750>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	f7f7 fcbb 	bl	800028c <__adddf3>
 8008916:	4622      	mov	r2, r4
 8008918:	462b      	mov	r3, r5
 800891a:	f7f7 fe6d 	bl	80005f8 <__aeabi_dmul>
 800891e:	a374      	add	r3, pc, #464	@ (adr r3, 8008af0 <__ieee754_pow+0x758>)
 8008920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008924:	f7f7 fcb2 	bl	800028c <__adddf3>
 8008928:	4622      	mov	r2, r4
 800892a:	462b      	mov	r3, r5
 800892c:	f7f7 fe64 	bl	80005f8 <__aeabi_dmul>
 8008930:	a371      	add	r3, pc, #452	@ (adr r3, 8008af8 <__ieee754_pow+0x760>)
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	f7f7 fca9 	bl	800028c <__adddf3>
 800893a:	4622      	mov	r2, r4
 800893c:	4606      	mov	r6, r0
 800893e:	460f      	mov	r7, r1
 8008940:	462b      	mov	r3, r5
 8008942:	4620      	mov	r0, r4
 8008944:	4629      	mov	r1, r5
 8008946:	f7f7 fe57 	bl	80005f8 <__aeabi_dmul>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4630      	mov	r0, r6
 8008950:	4639      	mov	r1, r7
 8008952:	f7f7 fe51 	bl	80005f8 <__aeabi_dmul>
 8008956:	465a      	mov	r2, fp
 8008958:	4604      	mov	r4, r0
 800895a:	460d      	mov	r5, r1
 800895c:	464b      	mov	r3, r9
 800895e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008962:	f7f7 fc93 	bl	800028c <__adddf3>
 8008966:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800896a:	f7f7 fe45 	bl	80005f8 <__aeabi_dmul>
 800896e:	4622      	mov	r2, r4
 8008970:	462b      	mov	r3, r5
 8008972:	f7f7 fc8b 	bl	800028c <__adddf3>
 8008976:	465a      	mov	r2, fp
 8008978:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800897c:	464b      	mov	r3, r9
 800897e:	4658      	mov	r0, fp
 8008980:	4649      	mov	r1, r9
 8008982:	f7f7 fe39 	bl	80005f8 <__aeabi_dmul>
 8008986:	4b6a      	ldr	r3, [pc, #424]	@ (8008b30 <__ieee754_pow+0x798>)
 8008988:	2200      	movs	r2, #0
 800898a:	4606      	mov	r6, r0
 800898c:	460f      	mov	r7, r1
 800898e:	f7f7 fc7d 	bl	800028c <__adddf3>
 8008992:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008996:	f7f7 fc79 	bl	800028c <__adddf3>
 800899a:	46d8      	mov	r8, fp
 800899c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80089a0:	460d      	mov	r5, r1
 80089a2:	465a      	mov	r2, fp
 80089a4:	460b      	mov	r3, r1
 80089a6:	4640      	mov	r0, r8
 80089a8:	4649      	mov	r1, r9
 80089aa:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80089ae:	f7f7 fe23 	bl	80005f8 <__aeabi_dmul>
 80089b2:	465c      	mov	r4, fp
 80089b4:	4680      	mov	r8, r0
 80089b6:	4689      	mov	r9, r1
 80089b8:	4b5d      	ldr	r3, [pc, #372]	@ (8008b30 <__ieee754_pow+0x798>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	4620      	mov	r0, r4
 80089be:	4629      	mov	r1, r5
 80089c0:	f7f7 fc62 	bl	8000288 <__aeabi_dsub>
 80089c4:	4632      	mov	r2, r6
 80089c6:	463b      	mov	r3, r7
 80089c8:	f7f7 fc5e 	bl	8000288 <__aeabi_dsub>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089d4:	f7f7 fc58 	bl	8000288 <__aeabi_dsub>
 80089d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089dc:	f7f7 fe0c 	bl	80005f8 <__aeabi_dmul>
 80089e0:	4622      	mov	r2, r4
 80089e2:	4606      	mov	r6, r0
 80089e4:	460f      	mov	r7, r1
 80089e6:	462b      	mov	r3, r5
 80089e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089ec:	f7f7 fe04 	bl	80005f8 <__aeabi_dmul>
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4630      	mov	r0, r6
 80089f6:	4639      	mov	r1, r7
 80089f8:	f7f7 fc48 	bl	800028c <__adddf3>
 80089fc:	4606      	mov	r6, r0
 80089fe:	460f      	mov	r7, r1
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4640      	mov	r0, r8
 8008a06:	4649      	mov	r1, r9
 8008a08:	f7f7 fc40 	bl	800028c <__adddf3>
 8008a0c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008a10:	a33b      	add	r3, pc, #236	@ (adr r3, 8008b00 <__ieee754_pow+0x768>)
 8008a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a16:	4658      	mov	r0, fp
 8008a18:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008a1c:	460d      	mov	r5, r1
 8008a1e:	f7f7 fdeb 	bl	80005f8 <__aeabi_dmul>
 8008a22:	465c      	mov	r4, fp
 8008a24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a28:	4642      	mov	r2, r8
 8008a2a:	464b      	mov	r3, r9
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7f7 fc2a 	bl	8000288 <__aeabi_dsub>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f7 fc24 	bl	8000288 <__aeabi_dsub>
 8008a40:	a331      	add	r3, pc, #196	@ (adr r3, 8008b08 <__ieee754_pow+0x770>)
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	f7f7 fdd7 	bl	80005f8 <__aeabi_dmul>
 8008a4a:	a331      	add	r3, pc, #196	@ (adr r3, 8008b10 <__ieee754_pow+0x778>)
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	4606      	mov	r6, r0
 8008a52:	460f      	mov	r7, r1
 8008a54:	4620      	mov	r0, r4
 8008a56:	4629      	mov	r1, r5
 8008a58:	f7f7 fdce 	bl	80005f8 <__aeabi_dmul>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4630      	mov	r0, r6
 8008a62:	4639      	mov	r1, r7
 8008a64:	f7f7 fc12 	bl	800028c <__adddf3>
 8008a68:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a6a:	4b32      	ldr	r3, [pc, #200]	@ (8008b34 <__ieee754_pow+0x79c>)
 8008a6c:	4413      	add	r3, r2
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	f7f7 fc0b 	bl	800028c <__adddf3>
 8008a76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a7a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a7c:	f7f7 fd52 	bl	8000524 <__aeabi_i2d>
 8008a80:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a82:	4b2d      	ldr	r3, [pc, #180]	@ (8008b38 <__ieee754_pow+0x7a0>)
 8008a84:	4413      	add	r3, r2
 8008a86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a90:	460f      	mov	r7, r1
 8008a92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a96:	f7f7 fbf9 	bl	800028c <__adddf3>
 8008a9a:	4642      	mov	r2, r8
 8008a9c:	464b      	mov	r3, r9
 8008a9e:	f7f7 fbf5 	bl	800028c <__adddf3>
 8008aa2:	4632      	mov	r2, r6
 8008aa4:	463b      	mov	r3, r7
 8008aa6:	f7f7 fbf1 	bl	800028c <__adddf3>
 8008aaa:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008aae:	4632      	mov	r2, r6
 8008ab0:	463b      	mov	r3, r7
 8008ab2:	4658      	mov	r0, fp
 8008ab4:	460d      	mov	r5, r1
 8008ab6:	f7f7 fbe7 	bl	8000288 <__aeabi_dsub>
 8008aba:	4642      	mov	r2, r8
 8008abc:	464b      	mov	r3, r9
 8008abe:	f7f7 fbe3 	bl	8000288 <__aeabi_dsub>
 8008ac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ac6:	f7f7 fbdf 	bl	8000288 <__aeabi_dsub>
 8008aca:	465c      	mov	r4, fp
 8008acc:	e036      	b.n	8008b3c <__ieee754_pow+0x7a4>
 8008ace:	bf00      	nop
 8008ad0:	4a454eef 	.word	0x4a454eef
 8008ad4:	3fca7e28 	.word	0x3fca7e28
 8008ad8:	93c9db65 	.word	0x93c9db65
 8008adc:	3fcd864a 	.word	0x3fcd864a
 8008ae0:	a91d4101 	.word	0xa91d4101
 8008ae4:	3fd17460 	.word	0x3fd17460
 8008ae8:	518f264d 	.word	0x518f264d
 8008aec:	3fd55555 	.word	0x3fd55555
 8008af0:	db6fabff 	.word	0xdb6fabff
 8008af4:	3fdb6db6 	.word	0x3fdb6db6
 8008af8:	33333303 	.word	0x33333303
 8008afc:	3fe33333 	.word	0x3fe33333
 8008b00:	e0000000 	.word	0xe0000000
 8008b04:	3feec709 	.word	0x3feec709
 8008b08:	dc3a03fd 	.word	0xdc3a03fd
 8008b0c:	3feec709 	.word	0x3feec709
 8008b10:	145b01f5 	.word	0x145b01f5
 8008b14:	be3e2fe0 	.word	0xbe3e2fe0
 8008b18:	7ff00000 	.word	0x7ff00000
 8008b1c:	43400000 	.word	0x43400000
 8008b20:	0003988e 	.word	0x0003988e
 8008b24:	000bb679 	.word	0x000bb679
 8008b28:	08009660 	.word	0x08009660
 8008b2c:	3ff00000 	.word	0x3ff00000
 8008b30:	40080000 	.word	0x40080000
 8008b34:	08009640 	.word	0x08009640
 8008b38:	08009650 	.word	0x08009650
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b44:	e5d6      	b.n	80086f4 <__ieee754_pow+0x35c>
 8008b46:	f04f 0a01 	mov.w	sl, #1
 8008b4a:	e65e      	b.n	800880a <__ieee754_pow+0x472>
 8008b4c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8008e24 <__ieee754_pow+0xa8c>)
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	4630      	mov	r0, r6
 8008b54:	4639      	mov	r1, r7
 8008b56:	f7f7 fb99 	bl	800028c <__adddf3>
 8008b5a:	4642      	mov	r2, r8
 8008b5c:	e9cd 0100 	strd	r0, r1, [sp]
 8008b60:	464b      	mov	r3, r9
 8008b62:	4620      	mov	r0, r4
 8008b64:	4629      	mov	r1, r5
 8008b66:	f7f7 fb8f 	bl	8000288 <__aeabi_dsub>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b72:	f7f7 ffd1 	bl	8000b18 <__aeabi_dcmpgt>
 8008b76:	2800      	cmp	r0, #0
 8008b78:	f47f adfe 	bne.w	8008778 <__ieee754_pow+0x3e0>
 8008b7c:	4ba2      	ldr	r3, [pc, #648]	@ (8008e08 <__ieee754_pow+0xa70>)
 8008b7e:	e022      	b.n	8008bc6 <__ieee754_pow+0x82e>
 8008b80:	4ca2      	ldr	r4, [pc, #648]	@ (8008e0c <__ieee754_pow+0xa74>)
 8008b82:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008b86:	42a3      	cmp	r3, r4
 8008b88:	d919      	bls.n	8008bbe <__ieee754_pow+0x826>
 8008b8a:	4ba1      	ldr	r3, [pc, #644]	@ (8008e10 <__ieee754_pow+0xa78>)
 8008b8c:	440b      	add	r3, r1
 8008b8e:	4303      	orrs	r3, r0
 8008b90:	d009      	beq.n	8008ba6 <__ieee754_pow+0x80e>
 8008b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b96:	2200      	movs	r2, #0
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f7f7 ff9f 	bl	8000adc <__aeabi_dcmplt>
 8008b9e:	3800      	subs	r0, #0
 8008ba0:	bf18      	it	ne
 8008ba2:	2001      	movne	r0, #1
 8008ba4:	e512      	b.n	80085cc <__ieee754_pow+0x234>
 8008ba6:	4642      	mov	r2, r8
 8008ba8:	464b      	mov	r3, r9
 8008baa:	f7f7 fb6d 	bl	8000288 <__aeabi_dsub>
 8008bae:	4632      	mov	r2, r6
 8008bb0:	463b      	mov	r3, r7
 8008bb2:	f7f7 ffa7 	bl	8000b04 <__aeabi_dcmpge>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d1eb      	bne.n	8008b92 <__ieee754_pow+0x7fa>
 8008bba:	4b96      	ldr	r3, [pc, #600]	@ (8008e14 <__ieee754_pow+0xa7c>)
 8008bbc:	e003      	b.n	8008bc6 <__ieee754_pow+0x82e>
 8008bbe:	4a96      	ldr	r2, [pc, #600]	@ (8008e18 <__ieee754_pow+0xa80>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	f240 80e7 	bls.w	8008d94 <__ieee754_pow+0x9fc>
 8008bc6:	151b      	asrs	r3, r3, #20
 8008bc8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8008bcc:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8008bd0:	fa4a fa03 	asr.w	sl, sl, r3
 8008bd4:	44da      	add	sl, fp
 8008bd6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008bda:	4890      	ldr	r0, [pc, #576]	@ (8008e1c <__ieee754_pow+0xa84>)
 8008bdc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008be0:	4108      	asrs	r0, r1
 8008be2:	ea00 030a 	and.w	r3, r0, sl
 8008be6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008bea:	f1c1 0114 	rsb	r1, r1, #20
 8008bee:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008bf2:	fa4a fa01 	asr.w	sl, sl, r1
 8008bf6:	f1bb 0f00 	cmp.w	fp, #0
 8008bfa:	4640      	mov	r0, r8
 8008bfc:	4649      	mov	r1, r9
 8008bfe:	f04f 0200 	mov.w	r2, #0
 8008c02:	bfb8      	it	lt
 8008c04:	f1ca 0a00 	rsblt	sl, sl, #0
 8008c08:	f7f7 fb3e 	bl	8000288 <__aeabi_dsub>
 8008c0c:	4680      	mov	r8, r0
 8008c0e:	4689      	mov	r9, r1
 8008c10:	4632      	mov	r2, r6
 8008c12:	463b      	mov	r3, r7
 8008c14:	4640      	mov	r0, r8
 8008c16:	4649      	mov	r1, r9
 8008c18:	f7f7 fb38 	bl	800028c <__adddf3>
 8008c1c:	2400      	movs	r4, #0
 8008c1e:	a36a      	add	r3, pc, #424	@ (adr r3, 8008dc8 <__ieee754_pow+0xa30>)
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	4620      	mov	r0, r4
 8008c26:	460d      	mov	r5, r1
 8008c28:	f7f7 fce6 	bl	80005f8 <__aeabi_dmul>
 8008c2c:	4642      	mov	r2, r8
 8008c2e:	e9cd 0100 	strd	r0, r1, [sp]
 8008c32:	464b      	mov	r3, r9
 8008c34:	4620      	mov	r0, r4
 8008c36:	4629      	mov	r1, r5
 8008c38:	f7f7 fb26 	bl	8000288 <__aeabi_dsub>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4630      	mov	r0, r6
 8008c42:	4639      	mov	r1, r7
 8008c44:	f7f7 fb20 	bl	8000288 <__aeabi_dsub>
 8008c48:	a361      	add	r3, pc, #388	@ (adr r3, 8008dd0 <__ieee754_pow+0xa38>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fcd3 	bl	80005f8 <__aeabi_dmul>
 8008c52:	a361      	add	r3, pc, #388	@ (adr r3, 8008dd8 <__ieee754_pow+0xa40>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	4680      	mov	r8, r0
 8008c5a:	4689      	mov	r9, r1
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	4629      	mov	r1, r5
 8008c60:	f7f7 fcca 	bl	80005f8 <__aeabi_dmul>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4640      	mov	r0, r8
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	f7f7 fb0e 	bl	800028c <__adddf3>
 8008c70:	4604      	mov	r4, r0
 8008c72:	460d      	mov	r5, r1
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c7c:	f7f7 fb06 	bl	800028c <__adddf3>
 8008c80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c84:	4680      	mov	r8, r0
 8008c86:	4689      	mov	r9, r1
 8008c88:	f7f7 fafe 	bl	8000288 <__aeabi_dsub>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4620      	mov	r0, r4
 8008c92:	4629      	mov	r1, r5
 8008c94:	f7f7 faf8 	bl	8000288 <__aeabi_dsub>
 8008c98:	4642      	mov	r2, r8
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	460f      	mov	r7, r1
 8008c9e:	464b      	mov	r3, r9
 8008ca0:	4640      	mov	r0, r8
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	f7f7 fca8 	bl	80005f8 <__aeabi_dmul>
 8008ca8:	a34d      	add	r3, pc, #308	@ (adr r3, 8008de0 <__ieee754_pow+0xa48>)
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	4604      	mov	r4, r0
 8008cb0:	460d      	mov	r5, r1
 8008cb2:	f7f7 fca1 	bl	80005f8 <__aeabi_dmul>
 8008cb6:	a34c      	add	r3, pc, #304	@ (adr r3, 8008de8 <__ieee754_pow+0xa50>)
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	f7f7 fae4 	bl	8000288 <__aeabi_dsub>
 8008cc0:	4622      	mov	r2, r4
 8008cc2:	462b      	mov	r3, r5
 8008cc4:	f7f7 fc98 	bl	80005f8 <__aeabi_dmul>
 8008cc8:	a349      	add	r3, pc, #292	@ (adr r3, 8008df0 <__ieee754_pow+0xa58>)
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	f7f7 fadd 	bl	800028c <__adddf3>
 8008cd2:	4622      	mov	r2, r4
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	f7f7 fc8f 	bl	80005f8 <__aeabi_dmul>
 8008cda:	a347      	add	r3, pc, #284	@ (adr r3, 8008df8 <__ieee754_pow+0xa60>)
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f7f7 fad2 	bl	8000288 <__aeabi_dsub>
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	462b      	mov	r3, r5
 8008ce8:	f7f7 fc86 	bl	80005f8 <__aeabi_dmul>
 8008cec:	a344      	add	r3, pc, #272	@ (adr r3, 8008e00 <__ieee754_pow+0xa68>)
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f7f7 facb 	bl	800028c <__adddf3>
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	462b      	mov	r3, r5
 8008cfa:	f7f7 fc7d 	bl	80005f8 <__aeabi_dmul>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4640      	mov	r0, r8
 8008d04:	4649      	mov	r1, r9
 8008d06:	f7f7 fabf 	bl	8000288 <__aeabi_dsub>
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	460d      	mov	r5, r1
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4640      	mov	r0, r8
 8008d14:	4649      	mov	r1, r9
 8008d16:	f7f7 fc6f 	bl	80005f8 <__aeabi_dmul>
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	e9cd 0100 	strd	r0, r1, [sp]
 8008d20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008d24:	4620      	mov	r0, r4
 8008d26:	4629      	mov	r1, r5
 8008d28:	f7f7 faae 	bl	8000288 <__aeabi_dsub>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d34:	f7f7 fd8a 	bl	800084c <__aeabi_ddiv>
 8008d38:	4632      	mov	r2, r6
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	460d      	mov	r5, r1
 8008d3e:	463b      	mov	r3, r7
 8008d40:	4640      	mov	r0, r8
 8008d42:	4649      	mov	r1, r9
 8008d44:	f7f7 fc58 	bl	80005f8 <__aeabi_dmul>
 8008d48:	4632      	mov	r2, r6
 8008d4a:	463b      	mov	r3, r7
 8008d4c:	f7f7 fa9e 	bl	800028c <__adddf3>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	4620      	mov	r0, r4
 8008d56:	4629      	mov	r1, r5
 8008d58:	f7f7 fa96 	bl	8000288 <__aeabi_dsub>
 8008d5c:	4642      	mov	r2, r8
 8008d5e:	464b      	mov	r3, r9
 8008d60:	f7f7 fa92 	bl	8000288 <__aeabi_dsub>
 8008d64:	460b      	mov	r3, r1
 8008d66:	4602      	mov	r2, r0
 8008d68:	492d      	ldr	r1, [pc, #180]	@ (8008e20 <__ieee754_pow+0xa88>)
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	f7f7 fa8c 	bl	8000288 <__aeabi_dsub>
 8008d70:	ec41 0b10 	vmov	d0, r0, r1
 8008d74:	ee10 3a90 	vmov	r3, s1
 8008d78:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008d7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d80:	da0b      	bge.n	8008d9a <__ieee754_pow+0xa02>
 8008d82:	4650      	mov	r0, sl
 8008d84:	f000 f85c 	bl	8008e40 <scalbn>
 8008d88:	ec51 0b10 	vmov	r0, r1, d0
 8008d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d90:	f7ff bb6d 	b.w	800846e <__ieee754_pow+0xd6>
 8008d94:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008d98:	e73a      	b.n	8008c10 <__ieee754_pow+0x878>
 8008d9a:	ec51 0b10 	vmov	r0, r1, d0
 8008d9e:	4619      	mov	r1, r3
 8008da0:	e7f4      	b.n	8008d8c <__ieee754_pow+0x9f4>
 8008da2:	491f      	ldr	r1, [pc, #124]	@ (8008e20 <__ieee754_pow+0xa88>)
 8008da4:	2000      	movs	r0, #0
 8008da6:	f7ff bb14 	b.w	80083d2 <__ieee754_pow+0x3a>
 8008daa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dae:	f7ff bb10 	b.w	80083d2 <__ieee754_pow+0x3a>
 8008db2:	4630      	mov	r0, r6
 8008db4:	4639      	mov	r1, r7
 8008db6:	f7ff bb0c 	b.w	80083d2 <__ieee754_pow+0x3a>
 8008dba:	460c      	mov	r4, r1
 8008dbc:	f7ff bb69 	b.w	8008492 <__ieee754_pow+0xfa>
 8008dc0:	2400      	movs	r4, #0
 8008dc2:	f7ff bb4b 	b.w	800845c <__ieee754_pow+0xc4>
 8008dc6:	bf00      	nop
 8008dc8:	00000000 	.word	0x00000000
 8008dcc:	3fe62e43 	.word	0x3fe62e43
 8008dd0:	fefa39ef 	.word	0xfefa39ef
 8008dd4:	3fe62e42 	.word	0x3fe62e42
 8008dd8:	0ca86c39 	.word	0x0ca86c39
 8008ddc:	be205c61 	.word	0xbe205c61
 8008de0:	72bea4d0 	.word	0x72bea4d0
 8008de4:	3e663769 	.word	0x3e663769
 8008de8:	c5d26bf1 	.word	0xc5d26bf1
 8008dec:	3ebbbd41 	.word	0x3ebbbd41
 8008df0:	af25de2c 	.word	0xaf25de2c
 8008df4:	3f11566a 	.word	0x3f11566a
 8008df8:	16bebd93 	.word	0x16bebd93
 8008dfc:	3f66c16c 	.word	0x3f66c16c
 8008e00:	5555553e 	.word	0x5555553e
 8008e04:	3fc55555 	.word	0x3fc55555
 8008e08:	40900000 	.word	0x40900000
 8008e0c:	4090cbff 	.word	0x4090cbff
 8008e10:	3f6f3400 	.word	0x3f6f3400
 8008e14:	4090cc00 	.word	0x4090cc00
 8008e18:	3fe00000 	.word	0x3fe00000
 8008e1c:	fff00000 	.word	0xfff00000
 8008e20:	3ff00000 	.word	0x3ff00000
 8008e24:	652b82fe 	.word	0x652b82fe
 8008e28:	3c971547 	.word	0x3c971547

08008e2c <fabs>:
 8008e2c:	ec51 0b10 	vmov	r0, r1, d0
 8008e30:	4602      	mov	r2, r0
 8008e32:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008e36:	ec43 2b10 	vmov	d0, r2, r3
 8008e3a:	4770      	bx	lr
 8008e3c:	0000      	movs	r0, r0
	...

08008e40 <scalbn>:
 8008e40:	b570      	push	{r4, r5, r6, lr}
 8008e42:	ec55 4b10 	vmov	r4, r5, d0
 8008e46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	462b      	mov	r3, r5
 8008e4e:	b991      	cbnz	r1, 8008e76 <scalbn+0x36>
 8008e50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008e54:	4323      	orrs	r3, r4
 8008e56:	d03b      	beq.n	8008ed0 <scalbn+0x90>
 8008e58:	4b33      	ldr	r3, [pc, #204]	@ (8008f28 <scalbn+0xe8>)
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f7f7 fbca 	bl	80005f8 <__aeabi_dmul>
 8008e64:	4b31      	ldr	r3, [pc, #196]	@ (8008f2c <scalbn+0xec>)
 8008e66:	429e      	cmp	r6, r3
 8008e68:	4604      	mov	r4, r0
 8008e6a:	460d      	mov	r5, r1
 8008e6c:	da0f      	bge.n	8008e8e <scalbn+0x4e>
 8008e6e:	a326      	add	r3, pc, #152	@ (adr r3, 8008f08 <scalbn+0xc8>)
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	e01e      	b.n	8008eb4 <scalbn+0x74>
 8008e76:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008e7a:	4291      	cmp	r1, r2
 8008e7c:	d10b      	bne.n	8008e96 <scalbn+0x56>
 8008e7e:	4622      	mov	r2, r4
 8008e80:	4620      	mov	r0, r4
 8008e82:	4629      	mov	r1, r5
 8008e84:	f7f7 fa02 	bl	800028c <__adddf3>
 8008e88:	4604      	mov	r4, r0
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	e020      	b.n	8008ed0 <scalbn+0x90>
 8008e8e:	460b      	mov	r3, r1
 8008e90:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008e94:	3936      	subs	r1, #54	@ 0x36
 8008e96:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008e9a:	4296      	cmp	r6, r2
 8008e9c:	dd0d      	ble.n	8008eba <scalbn+0x7a>
 8008e9e:	2d00      	cmp	r5, #0
 8008ea0:	a11b      	add	r1, pc, #108	@ (adr r1, 8008f10 <scalbn+0xd0>)
 8008ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea6:	da02      	bge.n	8008eae <scalbn+0x6e>
 8008ea8:	a11b      	add	r1, pc, #108	@ (adr r1, 8008f18 <scalbn+0xd8>)
 8008eaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eae:	a318      	add	r3, pc, #96	@ (adr r3, 8008f10 <scalbn+0xd0>)
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	f7f7 fba0 	bl	80005f8 <__aeabi_dmul>
 8008eb8:	e7e6      	b.n	8008e88 <scalbn+0x48>
 8008eba:	1872      	adds	r2, r6, r1
 8008ebc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008ec0:	428a      	cmp	r2, r1
 8008ec2:	dcec      	bgt.n	8008e9e <scalbn+0x5e>
 8008ec4:	2a00      	cmp	r2, #0
 8008ec6:	dd06      	ble.n	8008ed6 <scalbn+0x96>
 8008ec8:	f36f 531e 	bfc	r3, #20, #11
 8008ecc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ed0:	ec45 4b10 	vmov	d0, r4, r5
 8008ed4:	bd70      	pop	{r4, r5, r6, pc}
 8008ed6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008eda:	da08      	bge.n	8008eee <scalbn+0xae>
 8008edc:	2d00      	cmp	r5, #0
 8008ede:	a10a      	add	r1, pc, #40	@ (adr r1, 8008f08 <scalbn+0xc8>)
 8008ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ee4:	dac3      	bge.n	8008e6e <scalbn+0x2e>
 8008ee6:	a10e      	add	r1, pc, #56	@ (adr r1, 8008f20 <scalbn+0xe0>)
 8008ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eec:	e7bf      	b.n	8008e6e <scalbn+0x2e>
 8008eee:	3236      	adds	r2, #54	@ 0x36
 8008ef0:	f36f 531e 	bfc	r3, #20, #11
 8008ef4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ef8:	4620      	mov	r0, r4
 8008efa:	4b0d      	ldr	r3, [pc, #52]	@ (8008f30 <scalbn+0xf0>)
 8008efc:	4629      	mov	r1, r5
 8008efe:	2200      	movs	r2, #0
 8008f00:	e7d8      	b.n	8008eb4 <scalbn+0x74>
 8008f02:	bf00      	nop
 8008f04:	f3af 8000 	nop.w
 8008f08:	c2f8f359 	.word	0xc2f8f359
 8008f0c:	01a56e1f 	.word	0x01a56e1f
 8008f10:	8800759c 	.word	0x8800759c
 8008f14:	7e37e43c 	.word	0x7e37e43c
 8008f18:	8800759c 	.word	0x8800759c
 8008f1c:	fe37e43c 	.word	0xfe37e43c
 8008f20:	c2f8f359 	.word	0xc2f8f359
 8008f24:	81a56e1f 	.word	0x81a56e1f
 8008f28:	43500000 	.word	0x43500000
 8008f2c:	ffff3cb0 	.word	0xffff3cb0
 8008f30:	3c900000 	.word	0x3c900000

08008f34 <with_errno>:
 8008f34:	b510      	push	{r4, lr}
 8008f36:	ed2d 8b02 	vpush	{d8}
 8008f3a:	eeb0 8a40 	vmov.f32	s16, s0
 8008f3e:	eef0 8a60 	vmov.f32	s17, s1
 8008f42:	4604      	mov	r4, r0
 8008f44:	f7fb fe24 	bl	8004b90 <__errno>
 8008f48:	eeb0 0a48 	vmov.f32	s0, s16
 8008f4c:	eef0 0a68 	vmov.f32	s1, s17
 8008f50:	ecbd 8b02 	vpop	{d8}
 8008f54:	6004      	str	r4, [r0, #0]
 8008f56:	bd10      	pop	{r4, pc}

08008f58 <xflow>:
 8008f58:	4603      	mov	r3, r0
 8008f5a:	b507      	push	{r0, r1, r2, lr}
 8008f5c:	ec51 0b10 	vmov	r0, r1, d0
 8008f60:	b183      	cbz	r3, 8008f84 <xflow+0x2c>
 8008f62:	4602      	mov	r2, r0
 8008f64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f68:	e9cd 2300 	strd	r2, r3, [sp]
 8008f6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f70:	f7f7 fb42 	bl	80005f8 <__aeabi_dmul>
 8008f74:	ec41 0b10 	vmov	d0, r0, r1
 8008f78:	2022      	movs	r0, #34	@ 0x22
 8008f7a:	b003      	add	sp, #12
 8008f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f80:	f7ff bfd8 	b.w	8008f34 <with_errno>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	e7ee      	b.n	8008f68 <xflow+0x10>
 8008f8a:	0000      	movs	r0, r0
 8008f8c:	0000      	movs	r0, r0
	...

08008f90 <__math_uflow>:
 8008f90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008f98 <__math_uflow+0x8>
 8008f94:	f7ff bfe0 	b.w	8008f58 <xflow>
 8008f98:	00000000 	.word	0x00000000
 8008f9c:	10000000 	.word	0x10000000

08008fa0 <__math_oflow>:
 8008fa0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008fa8 <__math_oflow+0x8>
 8008fa4:	f7ff bfd8 	b.w	8008f58 <xflow>
 8008fa8:	00000000 	.word	0x00000000
 8008fac:	70000000 	.word	0x70000000

08008fb0 <__ieee754_sqrt>:
 8008fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb4:	4a66      	ldr	r2, [pc, #408]	@ (8009150 <__ieee754_sqrt+0x1a0>)
 8008fb6:	ec55 4b10 	vmov	r4, r5, d0
 8008fba:	43aa      	bics	r2, r5
 8008fbc:	462b      	mov	r3, r5
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	d110      	bne.n	8008fe4 <__ieee754_sqrt+0x34>
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	f7f7 fb16 	bl	80005f8 <__aeabi_dmul>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	f7f7 f95a 	bl	800028c <__adddf3>
 8008fd8:	4604      	mov	r4, r0
 8008fda:	460d      	mov	r5, r1
 8008fdc:	ec45 4b10 	vmov	d0, r4, r5
 8008fe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe4:	2d00      	cmp	r5, #0
 8008fe6:	dc0e      	bgt.n	8009006 <__ieee754_sqrt+0x56>
 8008fe8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008fec:	4322      	orrs	r2, r4
 8008fee:	d0f5      	beq.n	8008fdc <__ieee754_sqrt+0x2c>
 8008ff0:	b19d      	cbz	r5, 800901a <__ieee754_sqrt+0x6a>
 8008ff2:	4622      	mov	r2, r4
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	f7f7 f946 	bl	8000288 <__aeabi_dsub>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	f7f7 fc24 	bl	800084c <__aeabi_ddiv>
 8009004:	e7e8      	b.n	8008fd8 <__ieee754_sqrt+0x28>
 8009006:	152a      	asrs	r2, r5, #20
 8009008:	d115      	bne.n	8009036 <__ieee754_sqrt+0x86>
 800900a:	2000      	movs	r0, #0
 800900c:	e009      	b.n	8009022 <__ieee754_sqrt+0x72>
 800900e:	0acb      	lsrs	r3, r1, #11
 8009010:	3a15      	subs	r2, #21
 8009012:	0549      	lsls	r1, r1, #21
 8009014:	2b00      	cmp	r3, #0
 8009016:	d0fa      	beq.n	800900e <__ieee754_sqrt+0x5e>
 8009018:	e7f7      	b.n	800900a <__ieee754_sqrt+0x5a>
 800901a:	462a      	mov	r2, r5
 800901c:	e7fa      	b.n	8009014 <__ieee754_sqrt+0x64>
 800901e:	005b      	lsls	r3, r3, #1
 8009020:	3001      	adds	r0, #1
 8009022:	02dc      	lsls	r4, r3, #11
 8009024:	d5fb      	bpl.n	800901e <__ieee754_sqrt+0x6e>
 8009026:	1e44      	subs	r4, r0, #1
 8009028:	1b12      	subs	r2, r2, r4
 800902a:	f1c0 0420 	rsb	r4, r0, #32
 800902e:	fa21 f404 	lsr.w	r4, r1, r4
 8009032:	4323      	orrs	r3, r4
 8009034:	4081      	lsls	r1, r0
 8009036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800903a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800903e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009042:	07d2      	lsls	r2, r2, #31
 8009044:	bf5c      	itt	pl
 8009046:	005b      	lslpl	r3, r3, #1
 8009048:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800904c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009050:	bf58      	it	pl
 8009052:	0049      	lslpl	r1, r1, #1
 8009054:	2600      	movs	r6, #0
 8009056:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800905a:	107f      	asrs	r7, r7, #1
 800905c:	0049      	lsls	r1, r1, #1
 800905e:	2016      	movs	r0, #22
 8009060:	4632      	mov	r2, r6
 8009062:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009066:	1915      	adds	r5, r2, r4
 8009068:	429d      	cmp	r5, r3
 800906a:	bfde      	ittt	le
 800906c:	192a      	addle	r2, r5, r4
 800906e:	1b5b      	suble	r3, r3, r5
 8009070:	1936      	addle	r6, r6, r4
 8009072:	0fcd      	lsrs	r5, r1, #31
 8009074:	3801      	subs	r0, #1
 8009076:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800907a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800907e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009082:	d1f0      	bne.n	8009066 <__ieee754_sqrt+0xb6>
 8009084:	4605      	mov	r5, r0
 8009086:	2420      	movs	r4, #32
 8009088:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800908c:	4293      	cmp	r3, r2
 800908e:	eb0c 0e00 	add.w	lr, ip, r0
 8009092:	dc02      	bgt.n	800909a <__ieee754_sqrt+0xea>
 8009094:	d113      	bne.n	80090be <__ieee754_sqrt+0x10e>
 8009096:	458e      	cmp	lr, r1
 8009098:	d811      	bhi.n	80090be <__ieee754_sqrt+0x10e>
 800909a:	f1be 0f00 	cmp.w	lr, #0
 800909e:	eb0e 000c 	add.w	r0, lr, ip
 80090a2:	da3f      	bge.n	8009124 <__ieee754_sqrt+0x174>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	db3d      	blt.n	8009124 <__ieee754_sqrt+0x174>
 80090a8:	f102 0801 	add.w	r8, r2, #1
 80090ac:	1a9b      	subs	r3, r3, r2
 80090ae:	458e      	cmp	lr, r1
 80090b0:	bf88      	it	hi
 80090b2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80090b6:	eba1 010e 	sub.w	r1, r1, lr
 80090ba:	4465      	add	r5, ip
 80090bc:	4642      	mov	r2, r8
 80090be:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80090c2:	3c01      	subs	r4, #1
 80090c4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80090c8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80090cc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80090d0:	d1dc      	bne.n	800908c <__ieee754_sqrt+0xdc>
 80090d2:	4319      	orrs	r1, r3
 80090d4:	d01b      	beq.n	800910e <__ieee754_sqrt+0x15e>
 80090d6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8009154 <__ieee754_sqrt+0x1a4>
 80090da:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8009158 <__ieee754_sqrt+0x1a8>
 80090de:	e9da 0100 	ldrd	r0, r1, [sl]
 80090e2:	e9db 2300 	ldrd	r2, r3, [fp]
 80090e6:	f7f7 f8cf 	bl	8000288 <__aeabi_dsub>
 80090ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4640      	mov	r0, r8
 80090f4:	4649      	mov	r1, r9
 80090f6:	f7f7 fcfb 	bl	8000af0 <__aeabi_dcmple>
 80090fa:	b140      	cbz	r0, 800910e <__ieee754_sqrt+0x15e>
 80090fc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009100:	e9da 0100 	ldrd	r0, r1, [sl]
 8009104:	e9db 2300 	ldrd	r2, r3, [fp]
 8009108:	d10e      	bne.n	8009128 <__ieee754_sqrt+0x178>
 800910a:	3601      	adds	r6, #1
 800910c:	4625      	mov	r5, r4
 800910e:	1073      	asrs	r3, r6, #1
 8009110:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8009114:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8009118:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800911c:	086b      	lsrs	r3, r5, #1
 800911e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8009122:	e759      	b.n	8008fd8 <__ieee754_sqrt+0x28>
 8009124:	4690      	mov	r8, r2
 8009126:	e7c1      	b.n	80090ac <__ieee754_sqrt+0xfc>
 8009128:	f7f7 f8b0 	bl	800028c <__adddf3>
 800912c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4640      	mov	r0, r8
 8009136:	4649      	mov	r1, r9
 8009138:	f7f7 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800913c:	b120      	cbz	r0, 8009148 <__ieee754_sqrt+0x198>
 800913e:	1cab      	adds	r3, r5, #2
 8009140:	bf08      	it	eq
 8009142:	3601      	addeq	r6, #1
 8009144:	3502      	adds	r5, #2
 8009146:	e7e2      	b.n	800910e <__ieee754_sqrt+0x15e>
 8009148:	1c6b      	adds	r3, r5, #1
 800914a:	f023 0501 	bic.w	r5, r3, #1
 800914e:	e7de      	b.n	800910e <__ieee754_sqrt+0x15e>
 8009150:	7ff00000 	.word	0x7ff00000
 8009154:	08009678 	.word	0x08009678
 8009158:	08009670 	.word	0x08009670

0800915c <_init>:
 800915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915e:	bf00      	nop
 8009160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009162:	bc08      	pop	{r3}
 8009164:	469e      	mov	lr, r3
 8009166:	4770      	bx	lr

08009168 <_fini>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	bf00      	nop
 800916c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916e:	bc08      	pop	{r3}
 8009170:	469e      	mov	lr, r3
 8009172:	4770      	bx	lr
